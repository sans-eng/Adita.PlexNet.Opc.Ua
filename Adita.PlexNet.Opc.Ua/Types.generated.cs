// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

// Auto-generated code requires an explicit `#nullable` directive in source.
#nullable enable

using MediatR;
using Adita.PlexNet.Opc.Ua.Annotations;
using Adita.PlexNet.Opc.Ua.Abstractions.Encodables;
using Adita.PlexNet.Opc.Ua.Abstractions.Encoders;
using Adita.PlexNet.Opc.Ua.Abstractions.Decoders;
using Adita.PlexNet.Opc.Ua.Abstractions.Requests;
using Adita.PlexNet.Opc.Ua.Abstractions.Responses;

[assembly: TypeLibrary()]
namespace Adita.PlexNet.Opc.Ua
{
    using System;
    using System.Xml.Linq;
    [DataTypeId(DataTypeIds.MessageSecurityMode)]
    public enum MessageSecurityMode
    {   
        Invalid=0,
        None=1,
        Sign=2,
        SignAndEncrypt=3,
    }
    [DataTypeId(DataTypeIds.OpenFileMode)]
    public enum OpenFileMode
    {   
        Read=1,
        Write=2,
        EraseExisting=4,
        Append=8,
    }
    [DataTypeId(DataTypeIds.IdentityCriteriaType)]
    public enum IdentityCriteriaType
    {   
        UserName=1,
        Thumbprint=2,
        Role=3,
        GroupId=4,
        Anonymous=5,
        AuthenticatedUser=6,
    }
    [DataTypeId(DataTypeIds.TrustListMasks)]
    public enum TrustListMasks
    {   
        None=0,
        TrustedCertificates=1,
        TrustedCrls=2,
        IssuerCertificates=4,
        IssuerCrls=8,
        All=15,
    }
    [DataTypeId(DataTypeIds.StructureType)]
    public enum StructureType
    {   
        Structure=0,
        StructureWithOptionalFields=1,
        Union=2,
    }
    [DataTypeId(DataTypeIds.PubSubState)]
    public enum PubSubState
    {   
        Disabled=0,
        Paused=1,
        Operational=2,
        Error=3,
    }
    [DataTypeId(DataTypeIds.FilterOperator)]
    public enum FilterOperator
    {   
        Equals=0,
        IsNull=1,
        GreaterThan=2,
        LessThan=3,
        GreaterThanOrEqual=4,
        LessThanOrEqual=5,
        Like=6,
        Not=7,
        Between=8,
        InList=9,
        And=10,
        Or=11,
        Cast=12,
        InView=13,
        OfType=14,
        RelatedTo=15,
        BitwiseAnd=16,
        BitwiseOr=17,
    }
    [DataTypeId(DataTypeIds.BrokerTransportQualityOfService)]
    public enum BrokerTransportQualityOfService
    {   
        NotSpecified=0,
        BestEffort=1,
        AtLeastOnce=2,
        AtMostOnce=3,
        ExactlyOnce=4,
    }
    [DataTypeId(DataTypeIds.ApplicationType)]
    public enum ApplicationType
    {   
        Server=0,
        Client=1,
        ClientAndServer=2,
        DiscoveryServer=3,
    }
    [DataTypeId(DataTypeIds.UserTokenType)]
    public enum UserTokenType
    {   
        Anonymous=0,
        UserName=1,
        Certificate=2,
        IssuedToken=3,
    }
    [DataTypeId(DataTypeIds.OverrideValueHandling)]
    public enum OverrideValueHandling
    {   
        Disabled=0,
        LastUsableValue=1,
        OverrideValue=2,
    }
    [DataTypeId(DataTypeIds.DataSetOrderingType)]
    public enum DataSetOrderingType
    {   
        Undefined=0,
        AscendingWriterId=1,
        AscendingWriterIdSingle=2,
    }
    [DataTypeId(DataTypeIds.DiagnosticsLevel)]
    public enum DiagnosticsLevel
    {   
        Basic=0,
        Advanced=1,
        Info=2,
        Log=3,
        Debug=4,
    }
    [DataTypeId(DataTypeIds.PubSubDiagnosticsCounterClassification)]
    public enum PubSubDiagnosticsCounterClassification
    {   
        Information=0,
        Error=1,
    }
    [DataTypeId(DataTypeIds.IdType)]
    public enum IdType
    {   
        Numeric=0,
        String=1,
        Guid=2,
        Opaque=3,
    }
    [DataTypeId(DataTypeIds.NodeClass)]
    public enum NodeClass
    {   
        Unspecified=0,
        Object=1,
        Variable=2,
        Method=4,
        ObjectType=8,
        VariableType=16,
        ReferenceType=32,
        DataType=64,
        View=128,
    }
    [DataTypeId(DataTypeIds.SecurityTokenRequestType)]
    public enum SecurityTokenRequestType
    {   
        Issue=0,
        Renew=1,
    }
    [DataTypeId(DataTypeIds.NodeAttributesMask)]
    public enum NodeAttributesMask
    {   
        None=0,
        AccessLevel=1,
        ArrayDimensions=2,
        BrowseName=4,
        ContainsNoLoops=8,
        DataType=16,
        Description=32,
        DisplayName=64,
        EventNotifier=128,
        Executable=256,
        Historizing=512,
        InverseName=1024,
        IsAbstract=2048,
        MinimumSamplingInterval=4096,
        NodeClass=8192,
        NodeId=16384,
        Symmetric=32768,
        UserAccessLevel=65536,
        UserExecutable=131072,
        UserWriteMask=262144,
        ValueRank=524288,
        WriteMask=1048576,
        Value=2097152,
        DataTypeDefinition=4194304,
        RolePermissions=8388608,
        AccessRestrictions=16777216,
        All=33554431,
        BaseNode=26501220,
        Object=26501348,
        ObjectType=26503268,
        Variable=26571383,
        VariableType=28600438,
        Method=26632548,
        ReferenceType=26537060,
        View=26501356,
    }
    [DataTypeId(DataTypeIds.BrowseDirection)]
    public enum BrowseDirection
    {   
        Forward=0,
        Inverse=1,
        Both=2,
        Invalid=3,
    }
    [DataTypeId(DataTypeIds.BrowseResultMask)]
    public enum BrowseResultMask
    {   
        None=0,
        ReferenceTypeId=1,
        IsForward=2,
        NodeClass=4,
        BrowseName=8,
        DisplayName=16,
        TypeDefinition=32,
        All=63,
        ReferenceTypeInfo=3,
        TargetInfo=60,
    }
    [DataTypeId(DataTypeIds.TimestampsToReturn)]
    public enum TimestampsToReturn
    {   
        Source=0,
        Server=1,
        Both=2,
        Neither=3,
        Invalid=4,
    }
    [DataTypeId(DataTypeIds.HistoryUpdateType)]
    public enum HistoryUpdateType
    {   
        Insert=1,
        Replace=2,
        Update=3,
        Delete=4,
    }
    [DataTypeId(DataTypeIds.DataChangeTrigger)]
    public enum DataChangeTrigger
    {   
        Status=0,
        StatusValue=1,
        StatusValueTimestamp=2,
    }
    [DataTypeId(DataTypeIds.PerformUpdateType)]
    public enum PerformUpdateType
    {   
        Insert=1,
        Replace=2,
        Update=3,
        Remove=4,
    }
    [DataTypeId(DataTypeIds.MonitoringMode)]
    public enum MonitoringMode
    {   
        Disabled=0,
        Sampling=1,
        Reporting=2,
    }
    [DataTypeId(DataTypeIds.DeadbandType)]
    public enum DeadbandType
    {   
        None=0,
        Absolute=1,
        Percent=2,
    }
    [DataTypeId(DataTypeIds.RedundancySupport)]
    public enum RedundancySupport
    {   
        None=0,
        Cold=1,
        Warm=2,
        Hot=3,
        Transparent=4,
        HotAndMirrored=5,
    }
    [DataTypeId(DataTypeIds.ServerState)]
    public enum ServerState
    {   
        Running=0,
        Failed=1,
        NoConfiguration=2,
        Suspended=3,
        Shutdown=4,
        Test=5,
        CommunicationFault=6,
        Unknown=7,
    }
    [DataTypeId(DataTypeIds.ModelChangeStructureVerbMask)]
    public enum ModelChangeStructureVerbMask
    {   
        NodeAdded=1,
        NodeDeleted=2,
        ReferenceAdded=4,
        ReferenceDeleted=8,
        DataTypeChanged=16,
    }
    [DataTypeId(DataTypeIds.AxisScaleEnumeration)]
    public enum AxisScaleEnumeration
    {   
        Linear=0,
        Log=1,
        Ln=2,
    }
    [DataTypeId(DataTypeIds.ExceptionDeviationFormat)]
    public enum ExceptionDeviationFormat
    {   
        AbsoluteValue=0,
        PercentOfValue=1,
        PercentOfRange=2,
        PercentOfEURange=3,
        Unknown=4,
    }
    [BinaryEncodingId(ObjectIds.KeyValuePair_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.KeyValuePair_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.KeyValuePair)]
    public class KeyValuePair : IEncodable
    {
        public QualifiedName? Key { get; set; }
        public Variant Value { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteQualifiedName("Key", Key);
            encoder.WriteVariant("Value", Value);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Key = decoder.ReadQualifiedName("Key");
            Value = decoder.ReadVariant("Value");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.EndpointType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.EndpointType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.EndpointType)]
    public class EndpointType : IEncodable
    {
        public String? EndpointUrl { get; set; }
        public MessageSecurityMode SecurityMode { get; set; }
        public String? SecurityPolicyUri { get; set; }
        public String? TransportProfileUri { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteString("EndpointUrl", EndpointUrl);
            encoder.WriteEnumeration<MessageSecurityMode>("SecurityMode", SecurityMode);
            encoder.WriteString("SecurityPolicyUri", SecurityPolicyUri);
            encoder.WriteString("TransportProfileUri", TransportProfileUri);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            EndpointUrl = decoder.ReadString("EndpointUrl");
            SecurityMode = decoder.ReadEnumeration<MessageSecurityMode>("SecurityMode");
            SecurityPolicyUri = decoder.ReadString("SecurityPolicyUri");
            TransportProfileUri = decoder.ReadString("TransportProfileUri");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.RationalNumber_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.RationalNumber_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.RationalNumber)]
    public class RationalNumber : IEncodable
    {
        public Int32 Numerator { get; set; }
        public UInt32 Denominator { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteInt32("Numerator", Numerator);
            encoder.WriteUInt32("Denominator", Denominator);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Numerator = decoder.ReadInt32("Numerator");
            Denominator = decoder.ReadUInt32("Denominator");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.Vector_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.Vector_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.Vector)]
    public class Vector : IEncodable
    {
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ThreeDVector_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ThreeDVector_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ThreeDVector)]
    public class ThreeDVector : Vector
    {
        public Double X { get; set; }
        public Double Y { get; set; }
        public Double Z { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteDouble("X", X);
            encoder.WriteDouble("Y", Y);
            encoder.WriteDouble("Z", Z);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            X = decoder.ReadDouble("X");
            Y = decoder.ReadDouble("Y");
            Z = decoder.ReadDouble("Z");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.CartesianCoordinates_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.CartesianCoordinates_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.CartesianCoordinates)]
    public class CartesianCoordinates : IEncodable
    {
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ThreeDCartesianCoordinates_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ThreeDCartesianCoordinates_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ThreeDCartesianCoordinates)]
    public class ThreeDCartesianCoordinates : CartesianCoordinates
    {
        public Double X { get; set; }
        public Double Y { get; set; }
        public Double Z { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteDouble("X", X);
            encoder.WriteDouble("Y", Y);
            encoder.WriteDouble("Z", Z);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            X = decoder.ReadDouble("X");
            Y = decoder.ReadDouble("Y");
            Z = decoder.ReadDouble("Z");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.Orientation_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.Orientation_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.Orientation)]
    public class Orientation : IEncodable
    {
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ThreeDOrientation_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ThreeDOrientation_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ThreeDOrientation)]
    public class ThreeDOrientation : Orientation
    {
        public Double A { get; set; }
        public Double B { get; set; }
        public Double C { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteDouble("A", A);
            encoder.WriteDouble("B", B);
            encoder.WriteDouble("C", C);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            A = decoder.ReadDouble("A");
            B = decoder.ReadDouble("B");
            C = decoder.ReadDouble("C");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.Frame_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.Frame_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.Frame)]
    public class Frame : IEncodable
    {
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ThreeDFrame_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ThreeDFrame_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ThreeDFrame)]
    public class ThreeDFrame : Frame
    {
        public ThreeDCartesianCoordinates? CartesianCoordinates { get; set; }
        public ThreeDOrientation? Orientation { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ThreeDCartesianCoordinates>("CartesianCoordinates", CartesianCoordinates);
            encoder.WriteEncodable<ThreeDOrientation>("Orientation", Orientation);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            CartesianCoordinates = decoder.ReadEncodable<ThreeDCartesianCoordinates>("CartesianCoordinates");
            Orientation = decoder.ReadEncodable<ThreeDOrientation>("Orientation");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.IdentityMappingRuleType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.IdentityMappingRuleType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.IdentityMappingRuleType)]
    public class IdentityMappingRuleType : IEncodable
    {
        public IdentityCriteriaType CriteriaType { get; set; }
        public String? Criteria { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEnumeration<IdentityCriteriaType>("CriteriaType", CriteriaType);
            encoder.WriteString("Criteria", Criteria);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            CriteriaType = decoder.ReadEnumeration<IdentityCriteriaType>("CriteriaType");
            Criteria = decoder.ReadString("Criteria");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.TrustListDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.TrustListDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.TrustListDataType)]
    public class TrustListDataType : IEncodable
    {
        public UInt32 SpecifiedLists { get; set; }
        public Byte[]?[]? TrustedCertificates { get; set; }
        public Byte[]?[]? TrustedCrls { get; set; }
        public Byte[]?[]? IssuerCertificates { get; set; }
        public Byte[]?[]? IssuerCrls { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteUInt32("SpecifiedLists", SpecifiedLists);
            encoder.WriteByteStringArray("TrustedCertificates", TrustedCertificates);
            encoder.WriteByteStringArray("TrustedCrls", TrustedCrls);
            encoder.WriteByteStringArray("IssuerCertificates", IssuerCertificates);
            encoder.WriteByteStringArray("IssuerCrls", IssuerCrls);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            SpecifiedLists = decoder.ReadUInt32("SpecifiedLists");
            TrustedCertificates = decoder.ReadByteStringArray("TrustedCertificates");
            TrustedCrls = decoder.ReadByteStringArray("TrustedCrls");
            IssuerCertificates = decoder.ReadByteStringArray("IssuerCertificates");
            IssuerCrls = decoder.ReadByteStringArray("IssuerCrls");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.DecimalDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.DecimalDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.DecimalDataType)]
    public class DecimalDataType : IEncodable
    {
        public Int16 Scale { get; set; }
        public Byte[]? Value { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteInt16("Scale", Scale);
            encoder.WriteByteString("Value", Value);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Scale = decoder.ReadInt16("Scale");
            Value = decoder.ReadByteString("Value");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.DataTypeSchemaHeader_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.DataTypeSchemaHeader_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.DataTypeSchemaHeader)]
    public class DataTypeSchemaHeader : IEncodable
    {
        public String?[]? Namespaces { get; set; }
        public StructureDescription?[]? StructureDataTypes { get; set; }
        public EnumDescription?[]? EnumDataTypes { get; set; }
        public SimpleTypeDescription?[]? SimpleDataTypes { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteStringArray("Namespaces", Namespaces);
            encoder.WriteEncodableArray<StructureDescription>("StructureDataTypes", StructureDataTypes);
            encoder.WriteEncodableArray<EnumDescription>("EnumDataTypes", EnumDataTypes);
            encoder.WriteEncodableArray<SimpleTypeDescription>("SimpleDataTypes", SimpleDataTypes);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Namespaces = decoder.ReadStringArray("Namespaces");
            StructureDataTypes = decoder.ReadEncodableArray<StructureDescription>("StructureDataTypes");
            EnumDataTypes = decoder.ReadEncodableArray<EnumDescription>("EnumDataTypes");
            SimpleDataTypes = decoder.ReadEncodableArray<SimpleTypeDescription>("SimpleDataTypes");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.StructureDescription_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.StructureDescription_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.StructureDescription)]
    public class StructureDescription : DataTypeDescription
    {
        public StructureDefinition? StructureDefinition { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<StructureDefinition>("StructureDefinition", StructureDefinition);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            StructureDefinition = decoder.ReadEncodable<StructureDefinition>("StructureDefinition");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.StructureDefinition_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.StructureDefinition_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.StructureDefinition)]
    public class StructureDefinition : DataTypeDefinition
    {
        public NodeId? DefaultEncodingId { get; set; }
        public NodeId? BaseDataType { get; set; }
        public StructureType StructureType { get; set; }
        public StructureField?[]? Fields { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteNodeId("DefaultEncodingId", DefaultEncodingId);
            encoder.WriteNodeId("BaseDataType", BaseDataType);
            encoder.WriteEnumeration<StructureType>("StructureType", StructureType);
            encoder.WriteEncodableArray<StructureField>("Fields", Fields);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            DefaultEncodingId = decoder.ReadNodeId("DefaultEncodingId");
            BaseDataType = decoder.ReadNodeId("BaseDataType");
            StructureType = decoder.ReadEnumeration<StructureType>("StructureType");
            Fields = decoder.ReadEncodableArray<StructureField>("Fields");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.StructureField_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.StructureField_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.StructureField)]
    public class StructureField : IEncodable
    {
        public String? Name { get; set; }
        public LocalizedText? Description { get; set; }
        public NodeId? DataType { get; set; }
        public Int32 ValueRank { get; set; }
        public UInt32[]? ArrayDimensions { get; set; }
        public UInt32 MaxStringLength { get; set; }
        public Boolean IsOptional { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteString("Name", Name);
            encoder.WriteLocalizedText("Description", Description);
            encoder.WriteNodeId("DataType", DataType);
            encoder.WriteInt32("ValueRank", ValueRank);
            encoder.WriteUInt32Array("ArrayDimensions", ArrayDimensions);
            encoder.WriteUInt32("MaxStringLength", MaxStringLength);
            encoder.WriteBoolean("IsOptional", IsOptional);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Name = decoder.ReadString("Name");
            Description = decoder.ReadLocalizedText("Description");
            DataType = decoder.ReadNodeId("DataType");
            ValueRank = decoder.ReadInt32("ValueRank");
            ArrayDimensions = decoder.ReadUInt32Array("ArrayDimensions");
            MaxStringLength = decoder.ReadUInt32("MaxStringLength");
            IsOptional = decoder.ReadBoolean("IsOptional");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.DataTypeDefinition_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.DataTypeDefinition_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.DataTypeDefinition)]
    public class DataTypeDefinition : IEncodable
    {
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.EnumDefinition_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.EnumDefinition_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.EnumDefinition)]
    public class EnumDefinition : DataTypeDefinition
    {
        public EnumField?[]? Fields { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodableArray<EnumField>("Fields", Fields);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Fields = decoder.ReadEncodableArray<EnumField>("Fields");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.EnumField_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.EnumField_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.EnumField)]
    public class EnumField : EnumValueType
    {
        public String? Name { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteString("Name", Name);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Name = decoder.ReadString("Name");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.EnumValueType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.EnumValueType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.EnumValueType)]
    public class EnumValueType : IEncodable
    {
        public Int64 Value { get; set; }
        public LocalizedText? DisplayName { get; set; }
        public LocalizedText? Description { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteInt64("Value", Value);
            encoder.WriteLocalizedText("DisplayName", DisplayName);
            encoder.WriteLocalizedText("Description", Description);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Value = decoder.ReadInt64("Value");
            DisplayName = decoder.ReadLocalizedText("DisplayName");
            Description = decoder.ReadLocalizedText("Description");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.DataTypeDescription_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.DataTypeDescription_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.DataTypeDescription)]
    public class DataTypeDescription : IEncodable
    {
        public NodeId? DataTypeId { get; set; }
        public QualifiedName? Name { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteNodeId("DataTypeId", DataTypeId);
            encoder.WriteQualifiedName("Name", Name);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            DataTypeId = decoder.ReadNodeId("DataTypeId");
            Name = decoder.ReadQualifiedName("Name");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.SimpleTypeDescription_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.SimpleTypeDescription_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.SimpleTypeDescription)]
    public class SimpleTypeDescription : DataTypeDescription
    {
        public NodeId? BaseDataType { get; set; }
        public Byte BuiltInType { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteNodeId("BaseDataType", BaseDataType);
            encoder.WriteByte("BuiltInType", BuiltInType);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            BaseDataType = decoder.ReadNodeId("BaseDataType");
            BuiltInType = decoder.ReadByte("BuiltInType");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.EnumDescription_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.EnumDescription_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.EnumDescription)]
    public class EnumDescription : DataTypeDescription
    {
        public EnumDefinition? EnumDefinition { get; set; }
        public Byte BuiltInType { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<EnumDefinition>("EnumDefinition", EnumDefinition);
            encoder.WriteByte("BuiltInType", BuiltInType);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            EnumDefinition = decoder.ReadEncodable<EnumDefinition>("EnumDefinition");
            BuiltInType = decoder.ReadByte("BuiltInType");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.DataSetMetaDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.DataSetMetaDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.DataSetMetaDataType)]
    public class DataSetMetaDataType : DataTypeSchemaHeader
    {
        public String? Name { get; set; }
        public LocalizedText? Description { get; set; }
        public FieldMetaData?[]? Fields { get; set; }
        public Guid DataSetClassId { get; set; }
        public ConfigurationVersionDataType? ConfigurationVersion { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteString("Name", Name);
            encoder.WriteLocalizedText("Description", Description);
            encoder.WriteEncodableArray<FieldMetaData>("Fields", Fields);
            encoder.WriteGuid("DataSetClassId", DataSetClassId);
            encoder.WriteEncodable<ConfigurationVersionDataType>("ConfigurationVersion", ConfigurationVersion);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Name = decoder.ReadString("Name");
            Description = decoder.ReadLocalizedText("Description");
            Fields = decoder.ReadEncodableArray<FieldMetaData>("Fields");
            DataSetClassId = decoder.ReadGuid("DataSetClassId");
            ConfigurationVersion = decoder.ReadEncodable<ConfigurationVersionDataType>("ConfigurationVersion");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.FieldMetaData_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.FieldMetaData_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.FieldMetaData)]
    public class FieldMetaData : IEncodable
    {
        public String? Name { get; set; }
        public LocalizedText? Description { get; set; }
        public UInt16 FieldFlags { get; set; }
        public Byte BuiltInType { get; set; }
        public NodeId? DataType { get; set; }
        public Int32 ValueRank { get; set; }
        public UInt32[]? ArrayDimensions { get; set; }
        public UInt32 MaxStringLength { get; set; }
        public Guid DataSetFieldId { get; set; }
        public KeyValuePair?[]? Properties { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteString("Name", Name);
            encoder.WriteLocalizedText("Description", Description);
            encoder.WriteUInt16("FieldFlags", FieldFlags);
            encoder.WriteByte("BuiltInType", BuiltInType);
            encoder.WriteNodeId("DataType", DataType);
            encoder.WriteInt32("ValueRank", ValueRank);
            encoder.WriteUInt32Array("ArrayDimensions", ArrayDimensions);
            encoder.WriteUInt32("MaxStringLength", MaxStringLength);
            encoder.WriteGuid("DataSetFieldId", DataSetFieldId);
            encoder.WriteEncodableArray<KeyValuePair>("Properties", Properties);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Name = decoder.ReadString("Name");
            Description = decoder.ReadLocalizedText("Description");
            FieldFlags = decoder.ReadUInt16("FieldFlags");
            BuiltInType = decoder.ReadByte("BuiltInType");
            DataType = decoder.ReadNodeId("DataType");
            ValueRank = decoder.ReadInt32("ValueRank");
            ArrayDimensions = decoder.ReadUInt32Array("ArrayDimensions");
            MaxStringLength = decoder.ReadUInt32("MaxStringLength");
            DataSetFieldId = decoder.ReadGuid("DataSetFieldId");
            Properties = decoder.ReadEncodableArray<KeyValuePair>("Properties");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ConfigurationVersionDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ConfigurationVersionDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ConfigurationVersionDataType)]
    public class ConfigurationVersionDataType : IEncodable
    {
        public UInt32 MajorVersion { get; set; }
        public UInt32 MinorVersion { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteUInt32("MajorVersion", MajorVersion);
            encoder.WriteUInt32("MinorVersion", MinorVersion);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            MajorVersion = decoder.ReadUInt32("MajorVersion");
            MinorVersion = decoder.ReadUInt32("MinorVersion");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.UABinaryFileDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.UABinaryFileDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.UABinaryFileDataType)]
    public class UABinaryFileDataType : DataTypeSchemaHeader
    {
        public String? SchemaLocation { get; set; }
        public KeyValuePair?[]? FileHeader { get; set; }
        public Variant Body { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteString("SchemaLocation", SchemaLocation);
            encoder.WriteEncodableArray<KeyValuePair>("FileHeader", FileHeader);
            encoder.WriteVariant("Body", Body);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            SchemaLocation = decoder.ReadString("SchemaLocation");
            FileHeader = decoder.ReadEncodableArray<KeyValuePair>("FileHeader");
            Body = decoder.ReadVariant("Body");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.PublishedDataSetDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.PublishedDataSetDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.PublishedDataSetDataType)]
    public class PublishedDataSetDataType : IEncodable
    {
        public String? Name { get; set; }
        public String?[]? DataSetFolder { get; set; }
        public DataSetMetaDataType? DataSetMetaData { get; set; }
        public KeyValuePair?[]? ExtensionFields { get; set; }
        public PublishedDataSetSourceDataType? DataSetSource { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteString("Name", Name);
            encoder.WriteStringArray("DataSetFolder", DataSetFolder);
            encoder.WriteEncodable<DataSetMetaDataType>("DataSetMetaData", DataSetMetaData);
            encoder.WriteEncodableArray<KeyValuePair>("ExtensionFields", ExtensionFields);
            encoder.WriteExtensionObject<PublishedDataSetSourceDataType>("DataSetSource", DataSetSource);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Name = decoder.ReadString("Name");
            DataSetFolder = decoder.ReadStringArray("DataSetFolder");
            DataSetMetaData = decoder.ReadEncodable<DataSetMetaDataType>("DataSetMetaData");
            ExtensionFields = decoder.ReadEncodableArray<KeyValuePair>("ExtensionFields");
            DataSetSource = decoder.ReadExtensionObject<PublishedDataSetSourceDataType>("DataSetSource");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.PublishedDataSetSourceDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.PublishedDataSetSourceDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.PublishedDataSetSourceDataType)]
    public class PublishedDataSetSourceDataType : IEncodable
    {
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.PublishedEventsDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.PublishedEventsDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.PublishedEventsDataType)]
    public class PublishedEventsDataType : PublishedDataSetSourceDataType
    {
        public NodeId? EventNotifier { get; set; }
        public SimpleAttributeOperand?[]? SelectedFields { get; set; }
        public ContentFilter? Filter { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteNodeId("EventNotifier", EventNotifier);
            encoder.WriteEncodableArray<SimpleAttributeOperand>("SelectedFields", SelectedFields);
            encoder.WriteEncodable<ContentFilter>("Filter", Filter);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            EventNotifier = decoder.ReadNodeId("EventNotifier");
            SelectedFields = decoder.ReadEncodableArray<SimpleAttributeOperand>("SelectedFields");
            Filter = decoder.ReadEncodable<ContentFilter>("Filter");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.SimpleAttributeOperand_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.SimpleAttributeOperand_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.SimpleAttributeOperand)]
    public class SimpleAttributeOperand : FilterOperand
    {
        public NodeId? TypeDefinitionId { get; set; }
        public QualifiedName?[]? BrowsePath { get; set; }
        public UInt32 AttributeId { get; set; }
        public String? IndexRange { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteNodeId("TypeDefinitionId", TypeDefinitionId);
            encoder.WriteQualifiedNameArray("BrowsePath", BrowsePath);
            encoder.WriteUInt32("AttributeId", AttributeId);
            encoder.WriteString("IndexRange", IndexRange);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            TypeDefinitionId = decoder.ReadNodeId("TypeDefinitionId");
            BrowsePath = decoder.ReadQualifiedNameArray("BrowsePath");
            AttributeId = decoder.ReadUInt32("AttributeId");
            IndexRange = decoder.ReadString("IndexRange");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.FilterOperand_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.FilterOperand_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.FilterOperand)]
    public class FilterOperand : IEncodable
    {
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.AttributeOperand_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.AttributeOperand_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.AttributeOperand)]
    public class AttributeOperand : FilterOperand
    {
        public NodeId? NodeId { get; set; }
        public String? Alias { get; set; }
        public RelativePath? BrowsePath { get; set; }
        public UInt32 AttributeId { get; set; }
        public String? IndexRange { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteNodeId("NodeId", NodeId);
            encoder.WriteString("Alias", Alias);
            encoder.WriteEncodable<RelativePath>("BrowsePath", BrowsePath);
            encoder.WriteUInt32("AttributeId", AttributeId);
            encoder.WriteString("IndexRange", IndexRange);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            NodeId = decoder.ReadNodeId("NodeId");
            Alias = decoder.ReadString("Alias");
            BrowsePath = decoder.ReadEncodable<RelativePath>("BrowsePath");
            AttributeId = decoder.ReadUInt32("AttributeId");
            IndexRange = decoder.ReadString("IndexRange");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.RelativePath_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.RelativePath_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.RelativePath)]
    public class RelativePath : IEncodable
    {
        public RelativePathElement?[]? Elements { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodableArray<RelativePathElement>("Elements", Elements);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Elements = decoder.ReadEncodableArray<RelativePathElement>("Elements");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.RelativePathElement_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.RelativePathElement_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.RelativePathElement)]
    public class RelativePathElement : IEncodable
    {
        public NodeId? ReferenceTypeId { get; set; }
        public Boolean IsInverse { get; set; }
        public Boolean IncludeSubtypes { get; set; }
        public QualifiedName? TargetName { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteNodeId("ReferenceTypeId", ReferenceTypeId);
            encoder.WriteBoolean("IsInverse", IsInverse);
            encoder.WriteBoolean("IncludeSubtypes", IncludeSubtypes);
            encoder.WriteQualifiedName("TargetName", TargetName);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ReferenceTypeId = decoder.ReadNodeId("ReferenceTypeId");
            IsInverse = decoder.ReadBoolean("IsInverse");
            IncludeSubtypes = decoder.ReadBoolean("IncludeSubtypes");
            TargetName = decoder.ReadQualifiedName("TargetName");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.LiteralOperand_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.LiteralOperand_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.LiteralOperand)]
    public class LiteralOperand : FilterOperand
    {
        public Variant Value { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteVariant("Value", Value);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Value = decoder.ReadVariant("Value");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ElementOperand_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ElementOperand_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ElementOperand)]
    public class ElementOperand : FilterOperand
    {
        public UInt32 Index { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteUInt32("Index", Index);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Index = decoder.ReadUInt32("Index");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ContentFilter_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ContentFilter_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ContentFilter)]
    public class ContentFilter : IEncodable
    {
        public ContentFilterElement?[]? Elements { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodableArray<ContentFilterElement>("Elements", Elements);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Elements = decoder.ReadEncodableArray<ContentFilterElement>("Elements");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ContentFilterElement_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ContentFilterElement_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ContentFilterElement)]
    public class ContentFilterElement : IEncodable
    {
        public FilterOperator FilterOperator { get; set; }
        public FilterOperand?[]? FilterOperands { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEnumeration<FilterOperator>("FilterOperator", FilterOperator);
            encoder.WriteExtensionObjectArray<FilterOperand>("FilterOperands", FilterOperands);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            FilterOperator = decoder.ReadEnumeration<FilterOperator>("FilterOperator");
            FilterOperands = decoder.ReadExtensionObjectArray<FilterOperand>("FilterOperands");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.PublishedDataItemsDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.PublishedDataItemsDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.PublishedDataItemsDataType)]
    public class PublishedDataItemsDataType : PublishedDataSetSourceDataType
    {
        public PublishedVariableDataType?[]? PublishedData { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodableArray<PublishedVariableDataType>("PublishedData", PublishedData);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            PublishedData = decoder.ReadEncodableArray<PublishedVariableDataType>("PublishedData");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.PublishedVariableDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.PublishedVariableDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.PublishedVariableDataType)]
    public class PublishedVariableDataType : IEncodable
    {
        public NodeId? PublishedVariable { get; set; }
        public UInt32 AttributeId { get; set; }
        public Double SamplingIntervalHint { get; set; }
        public UInt32 DeadbandType { get; set; }
        public Double DeadbandValue { get; set; }
        public String? IndexRange { get; set; }
        public Variant SubstituteValue { get; set; }
        public QualifiedName?[]? MetaDataProperties { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteNodeId("PublishedVariable", PublishedVariable);
            encoder.WriteUInt32("AttributeId", AttributeId);
            encoder.WriteDouble("SamplingIntervalHint", SamplingIntervalHint);
            encoder.WriteUInt32("DeadbandType", DeadbandType);
            encoder.WriteDouble("DeadbandValue", DeadbandValue);
            encoder.WriteString("IndexRange", IndexRange);
            encoder.WriteVariant("SubstituteValue", SubstituteValue);
            encoder.WriteQualifiedNameArray("MetaDataProperties", MetaDataProperties);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            PublishedVariable = decoder.ReadNodeId("PublishedVariable");
            AttributeId = decoder.ReadUInt32("AttributeId");
            SamplingIntervalHint = decoder.ReadDouble("SamplingIntervalHint");
            DeadbandType = decoder.ReadUInt32("DeadbandType");
            DeadbandValue = decoder.ReadDouble("DeadbandValue");
            IndexRange = decoder.ReadString("IndexRange");
            SubstituteValue = decoder.ReadVariant("SubstituteValue");
            MetaDataProperties = decoder.ReadQualifiedNameArray("MetaDataProperties");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.DataSetWriterDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.DataSetWriterDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.DataSetWriterDataType)]
    public class DataSetWriterDataType : IEncodable
    {
        public String? Name { get; set; }
        public Boolean Enabled { get; set; }
        public UInt16 DataSetWriterId { get; set; }
        public UInt32 DataSetFieldContentMask { get; set; }
        public UInt32 KeyFrameCount { get; set; }
        public String? DataSetName { get; set; }
        public KeyValuePair?[]? DataSetWriterProperties { get; set; }
        public DataSetWriterTransportDataType? TransportSettings { get; set; }
        public DataSetWriterMessageDataType? MessageSettings { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteString("Name", Name);
            encoder.WriteBoolean("Enabled", Enabled);
            encoder.WriteUInt16("DataSetWriterId", DataSetWriterId);
            encoder.WriteUInt32("DataSetFieldContentMask", DataSetFieldContentMask);
            encoder.WriteUInt32("KeyFrameCount", KeyFrameCount);
            encoder.WriteString("DataSetName", DataSetName);
            encoder.WriteEncodableArray<KeyValuePair>("DataSetWriterProperties", DataSetWriterProperties);
            encoder.WriteExtensionObject<DataSetWriterTransportDataType>("TransportSettings", TransportSettings);
            encoder.WriteExtensionObject<DataSetWriterMessageDataType>("MessageSettings", MessageSettings);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Name = decoder.ReadString("Name");
            Enabled = decoder.ReadBoolean("Enabled");
            DataSetWriterId = decoder.ReadUInt16("DataSetWriterId");
            DataSetFieldContentMask = decoder.ReadUInt32("DataSetFieldContentMask");
            KeyFrameCount = decoder.ReadUInt32("KeyFrameCount");
            DataSetName = decoder.ReadString("DataSetName");
            DataSetWriterProperties = decoder.ReadEncodableArray<KeyValuePair>("DataSetWriterProperties");
            TransportSettings = decoder.ReadExtensionObject<DataSetWriterTransportDataType>("TransportSettings");
            MessageSettings = decoder.ReadExtensionObject<DataSetWriterMessageDataType>("MessageSettings");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.DataSetWriterTransportDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.DataSetWriterTransportDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.DataSetWriterTransportDataType)]
    public class DataSetWriterTransportDataType : IEncodable
    {
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.BrokerDataSetWriterTransportDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.BrokerDataSetWriterTransportDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.BrokerDataSetWriterTransportDataType)]
    public class BrokerDataSetWriterTransportDataType : DataSetWriterTransportDataType
    {
        public String? QueueName { get; set; }
        public String? ResourceUri { get; set; }
        public String? AuthenticationProfileUri { get; set; }
        public BrokerTransportQualityOfService RequestedDeliveryGuarantee { get; set; }
        public String? MetaDataQueueName { get; set; }
        public Double MetaDataUpdateTime { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteString("QueueName", QueueName);
            encoder.WriteString("ResourceUri", ResourceUri);
            encoder.WriteString("AuthenticationProfileUri", AuthenticationProfileUri);
            encoder.WriteEnumeration<BrokerTransportQualityOfService>("RequestedDeliveryGuarantee", RequestedDeliveryGuarantee);
            encoder.WriteString("MetaDataQueueName", MetaDataQueueName);
            encoder.WriteDouble("MetaDataUpdateTime", MetaDataUpdateTime);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            QueueName = decoder.ReadString("QueueName");
            ResourceUri = decoder.ReadString("ResourceUri");
            AuthenticationProfileUri = decoder.ReadString("AuthenticationProfileUri");
            RequestedDeliveryGuarantee = decoder.ReadEnumeration<BrokerTransportQualityOfService>("RequestedDeliveryGuarantee");
            MetaDataQueueName = decoder.ReadString("MetaDataQueueName");
            MetaDataUpdateTime = decoder.ReadDouble("MetaDataUpdateTime");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.DataSetWriterMessageDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.DataSetWriterMessageDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.DataSetWriterMessageDataType)]
    public class DataSetWriterMessageDataType : IEncodable
    {
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.JsonDataSetWriterMessageDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.JsonDataSetWriterMessageDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.JsonDataSetWriterMessageDataType)]
    public class JsonDataSetWriterMessageDataType : DataSetWriterMessageDataType
    {
        public UInt32 DataSetMessageContentMask { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteUInt32("DataSetMessageContentMask", DataSetMessageContentMask);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            DataSetMessageContentMask = decoder.ReadUInt32("DataSetMessageContentMask");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.UadpDataSetWriterMessageDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.UadpDataSetWriterMessageDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.UadpDataSetWriterMessageDataType)]
    public class UadpDataSetWriterMessageDataType : DataSetWriterMessageDataType
    {
        public UInt32 DataSetMessageContentMask { get; set; }
        public UInt16 ConfiguredSize { get; set; }
        public UInt16 NetworkMessageNumber { get; set; }
        public UInt16 DataSetOffset { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteUInt32("DataSetMessageContentMask", DataSetMessageContentMask);
            encoder.WriteUInt16("ConfiguredSize", ConfiguredSize);
            encoder.WriteUInt16("NetworkMessageNumber", NetworkMessageNumber);
            encoder.WriteUInt16("DataSetOffset", DataSetOffset);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            DataSetMessageContentMask = decoder.ReadUInt32("DataSetMessageContentMask");
            ConfiguredSize = decoder.ReadUInt16("ConfiguredSize");
            NetworkMessageNumber = decoder.ReadUInt16("NetworkMessageNumber");
            DataSetOffset = decoder.ReadUInt16("DataSetOffset");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.PubSubGroupDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.PubSubGroupDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.PubSubGroupDataType)]
    public class PubSubGroupDataType : IEncodable
    {
        public String? Name { get; set; }
        public Boolean Enabled { get; set; }
        public MessageSecurityMode SecurityMode { get; set; }
        public String? SecurityGroupId { get; set; }
        public EndpointDescription?[]? SecurityKeyServices { get; set; }
        public UInt32 MaxNetworkMessageSize { get; set; }
        public KeyValuePair?[]? GroupProperties { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteString("Name", Name);
            encoder.WriteBoolean("Enabled", Enabled);
            encoder.WriteEnumeration<MessageSecurityMode>("SecurityMode", SecurityMode);
            encoder.WriteString("SecurityGroupId", SecurityGroupId);
            encoder.WriteEncodableArray<EndpointDescription>("SecurityKeyServices", SecurityKeyServices);
            encoder.WriteUInt32("MaxNetworkMessageSize", MaxNetworkMessageSize);
            encoder.WriteEncodableArray<KeyValuePair>("GroupProperties", GroupProperties);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Name = decoder.ReadString("Name");
            Enabled = decoder.ReadBoolean("Enabled");
            SecurityMode = decoder.ReadEnumeration<MessageSecurityMode>("SecurityMode");
            SecurityGroupId = decoder.ReadString("SecurityGroupId");
            SecurityKeyServices = decoder.ReadEncodableArray<EndpointDescription>("SecurityKeyServices");
            MaxNetworkMessageSize = decoder.ReadUInt32("MaxNetworkMessageSize");
            GroupProperties = decoder.ReadEncodableArray<KeyValuePair>("GroupProperties");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.EndpointDescription_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.EndpointDescription_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.EndpointDescription)]
    public class EndpointDescription : IEncodable
    {
        public String? EndpointUrl { get; set; }
        public ApplicationDescription? Server { get; set; }
        public Byte[]? ServerCertificate { get; set; }
        public MessageSecurityMode SecurityMode { get; set; }
        public String? SecurityPolicyUri { get; set; }
        public UserTokenPolicy?[]? UserIdentityTokens { get; set; }
        public String? TransportProfileUri { get; set; }
        public Byte SecurityLevel { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteString("EndpointUrl", EndpointUrl);
            encoder.WriteEncodable<ApplicationDescription>("Server", Server);
            encoder.WriteByteString("ServerCertificate", ServerCertificate);
            encoder.WriteEnumeration<MessageSecurityMode>("SecurityMode", SecurityMode);
            encoder.WriteString("SecurityPolicyUri", SecurityPolicyUri);
            encoder.WriteEncodableArray<UserTokenPolicy>("UserIdentityTokens", UserIdentityTokens);
            encoder.WriteString("TransportProfileUri", TransportProfileUri);
            encoder.WriteByte("SecurityLevel", SecurityLevel);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            EndpointUrl = decoder.ReadString("EndpointUrl");
            Server = decoder.ReadEncodable<ApplicationDescription>("Server");
            ServerCertificate = decoder.ReadByteString("ServerCertificate");
            SecurityMode = decoder.ReadEnumeration<MessageSecurityMode>("SecurityMode");
            SecurityPolicyUri = decoder.ReadString("SecurityPolicyUri");
            UserIdentityTokens = decoder.ReadEncodableArray<UserTokenPolicy>("UserIdentityTokens");
            TransportProfileUri = decoder.ReadString("TransportProfileUri");
            SecurityLevel = decoder.ReadByte("SecurityLevel");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ApplicationDescription_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ApplicationDescription_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ApplicationDescription)]
    public class ApplicationDescription : IEncodable
    {
        public String? ApplicationUri { get; set; }
        public String? ProductUri { get; set; }
        public LocalizedText? ApplicationName { get; set; }
        public ApplicationType ApplicationType { get; set; }
        public String? GatewayServerUri { get; set; }
        public String? DiscoveryProfileUri { get; set; }
        public String?[]? DiscoveryUrls { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteString("ApplicationUri", ApplicationUri);
            encoder.WriteString("ProductUri", ProductUri);
            encoder.WriteLocalizedText("ApplicationName", ApplicationName);
            encoder.WriteEnumeration<ApplicationType>("ApplicationType", ApplicationType);
            encoder.WriteString("GatewayServerUri", GatewayServerUri);
            encoder.WriteString("DiscoveryProfileUri", DiscoveryProfileUri);
            encoder.WriteStringArray("DiscoveryUrls", DiscoveryUrls);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ApplicationUri = decoder.ReadString("ApplicationUri");
            ProductUri = decoder.ReadString("ProductUri");
            ApplicationName = decoder.ReadLocalizedText("ApplicationName");
            ApplicationType = decoder.ReadEnumeration<ApplicationType>("ApplicationType");
            GatewayServerUri = decoder.ReadString("GatewayServerUri");
            DiscoveryProfileUri = decoder.ReadString("DiscoveryProfileUri");
            DiscoveryUrls = decoder.ReadStringArray("DiscoveryUrls");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.UserTokenPolicy_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.UserTokenPolicy_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.UserTokenPolicy)]
    public class UserTokenPolicy : IEncodable
    {
        public String? PolicyId { get; set; }
        public UserTokenType TokenType { get; set; }
        public String? IssuedTokenType { get; set; }
        public String? IssuerEndpointUrl { get; set; }
        public String? SecurityPolicyUri { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteString("PolicyId", PolicyId);
            encoder.WriteEnumeration<UserTokenType>("TokenType", TokenType);
            encoder.WriteString("IssuedTokenType", IssuedTokenType);
            encoder.WriteString("IssuerEndpointUrl", IssuerEndpointUrl);
            encoder.WriteString("SecurityPolicyUri", SecurityPolicyUri);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            PolicyId = decoder.ReadString("PolicyId");
            TokenType = decoder.ReadEnumeration<UserTokenType>("TokenType");
            IssuedTokenType = decoder.ReadString("IssuedTokenType");
            IssuerEndpointUrl = decoder.ReadString("IssuerEndpointUrl");
            SecurityPolicyUri = decoder.ReadString("SecurityPolicyUri");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ReaderGroupDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ReaderGroupDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ReaderGroupDataType)]
    public class ReaderGroupDataType : PubSubGroupDataType
    {
        public ReaderGroupTransportDataType? TransportSettings { get; set; }
        public ReaderGroupMessageDataType? MessageSettings { get; set; }
        public DataSetReaderDataType?[]? DataSetReaders { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteExtensionObject<ReaderGroupTransportDataType>("TransportSettings", TransportSettings);
            encoder.WriteExtensionObject<ReaderGroupMessageDataType>("MessageSettings", MessageSettings);
            encoder.WriteEncodableArray<DataSetReaderDataType>("DataSetReaders", DataSetReaders);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            TransportSettings = decoder.ReadExtensionObject<ReaderGroupTransportDataType>("TransportSettings");
            MessageSettings = decoder.ReadExtensionObject<ReaderGroupMessageDataType>("MessageSettings");
            DataSetReaders = decoder.ReadEncodableArray<DataSetReaderDataType>("DataSetReaders");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ReaderGroupTransportDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ReaderGroupTransportDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ReaderGroupTransportDataType)]
    public class ReaderGroupTransportDataType : IEncodable
    {
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ReaderGroupMessageDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ReaderGroupMessageDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ReaderGroupMessageDataType)]
    public class ReaderGroupMessageDataType : IEncodable
    {
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.DataSetReaderDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.DataSetReaderDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.DataSetReaderDataType)]
    public class DataSetReaderDataType : IEncodable
    {
        public String? Name { get; set; }
        public Boolean Enabled { get; set; }
        public Variant PublisherId { get; set; }
        public UInt16 WriterGroupId { get; set; }
        public UInt16 DataSetWriterId { get; set; }
        public DataSetMetaDataType? DataSetMetaData { get; set; }
        public UInt32 DataSetFieldContentMask { get; set; }
        public Double MessageReceiveTimeout { get; set; }
        public UInt32 KeyFrameCount { get; set; }
        public String? HeaderLayoutUri { get; set; }
        public MessageSecurityMode SecurityMode { get; set; }
        public String? SecurityGroupId { get; set; }
        public EndpointDescription?[]? SecurityKeyServices { get; set; }
        public KeyValuePair?[]? DataSetReaderProperties { get; set; }
        public DataSetReaderTransportDataType? TransportSettings { get; set; }
        public DataSetReaderMessageDataType? MessageSettings { get; set; }
        public SubscribedDataSetDataType? SubscribedDataSet { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteString("Name", Name);
            encoder.WriteBoolean("Enabled", Enabled);
            encoder.WriteVariant("PublisherId", PublisherId);
            encoder.WriteUInt16("WriterGroupId", WriterGroupId);
            encoder.WriteUInt16("DataSetWriterId", DataSetWriterId);
            encoder.WriteEncodable<DataSetMetaDataType>("DataSetMetaData", DataSetMetaData);
            encoder.WriteUInt32("DataSetFieldContentMask", DataSetFieldContentMask);
            encoder.WriteDouble("MessageReceiveTimeout", MessageReceiveTimeout);
            encoder.WriteUInt32("KeyFrameCount", KeyFrameCount);
            encoder.WriteString("HeaderLayoutUri", HeaderLayoutUri);
            encoder.WriteEnumeration<MessageSecurityMode>("SecurityMode", SecurityMode);
            encoder.WriteString("SecurityGroupId", SecurityGroupId);
            encoder.WriteEncodableArray<EndpointDescription>("SecurityKeyServices", SecurityKeyServices);
            encoder.WriteEncodableArray<KeyValuePair>("DataSetReaderProperties", DataSetReaderProperties);
            encoder.WriteExtensionObject<DataSetReaderTransportDataType>("TransportSettings", TransportSettings);
            encoder.WriteExtensionObject<DataSetReaderMessageDataType>("MessageSettings", MessageSettings);
            encoder.WriteEncodable<SubscribedDataSetDataType>("SubscribedDataSet", SubscribedDataSet);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Name = decoder.ReadString("Name");
            Enabled = decoder.ReadBoolean("Enabled");
            PublisherId = decoder.ReadVariant("PublisherId");
            WriterGroupId = decoder.ReadUInt16("WriterGroupId");
            DataSetWriterId = decoder.ReadUInt16("DataSetWriterId");
            DataSetMetaData = decoder.ReadEncodable<DataSetMetaDataType>("DataSetMetaData");
            DataSetFieldContentMask = decoder.ReadUInt32("DataSetFieldContentMask");
            MessageReceiveTimeout = decoder.ReadDouble("MessageReceiveTimeout");
            KeyFrameCount = decoder.ReadUInt32("KeyFrameCount");
            HeaderLayoutUri = decoder.ReadString("HeaderLayoutUri");
            SecurityMode = decoder.ReadEnumeration<MessageSecurityMode>("SecurityMode");
            SecurityGroupId = decoder.ReadString("SecurityGroupId");
            SecurityKeyServices = decoder.ReadEncodableArray<EndpointDescription>("SecurityKeyServices");
            DataSetReaderProperties = decoder.ReadEncodableArray<KeyValuePair>("DataSetReaderProperties");
            TransportSettings = decoder.ReadExtensionObject<DataSetReaderTransportDataType>("TransportSettings");
            MessageSettings = decoder.ReadExtensionObject<DataSetReaderMessageDataType>("MessageSettings");
            SubscribedDataSet = decoder.ReadEncodable<SubscribedDataSetDataType>("SubscribedDataSet");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.DataSetReaderTransportDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.DataSetReaderTransportDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.DataSetReaderTransportDataType)]
    public class DataSetReaderTransportDataType : IEncodable
    {
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.BrokerDataSetReaderTransportDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.BrokerDataSetReaderTransportDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.BrokerDataSetReaderTransportDataType)]
    public class BrokerDataSetReaderTransportDataType : DataSetReaderTransportDataType
    {
        public String? QueueName { get; set; }
        public String? ResourceUri { get; set; }
        public String? AuthenticationProfileUri { get; set; }
        public BrokerTransportQualityOfService RequestedDeliveryGuarantee { get; set; }
        public String? MetaDataQueueName { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteString("QueueName", QueueName);
            encoder.WriteString("ResourceUri", ResourceUri);
            encoder.WriteString("AuthenticationProfileUri", AuthenticationProfileUri);
            encoder.WriteEnumeration<BrokerTransportQualityOfService>("RequestedDeliveryGuarantee", RequestedDeliveryGuarantee);
            encoder.WriteString("MetaDataQueueName", MetaDataQueueName);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            QueueName = decoder.ReadString("QueueName");
            ResourceUri = decoder.ReadString("ResourceUri");
            AuthenticationProfileUri = decoder.ReadString("AuthenticationProfileUri");
            RequestedDeliveryGuarantee = decoder.ReadEnumeration<BrokerTransportQualityOfService>("RequestedDeliveryGuarantee");
            MetaDataQueueName = decoder.ReadString("MetaDataQueueName");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.DataSetReaderMessageDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.DataSetReaderMessageDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.DataSetReaderMessageDataType)]
    public class DataSetReaderMessageDataType : IEncodable
    {
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.JsonDataSetReaderMessageDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.JsonDataSetReaderMessageDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.JsonDataSetReaderMessageDataType)]
    public class JsonDataSetReaderMessageDataType : DataSetReaderMessageDataType
    {
        public UInt32 NetworkMessageContentMask { get; set; }
        public UInt32 DataSetMessageContentMask { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteUInt32("NetworkMessageContentMask", NetworkMessageContentMask);
            encoder.WriteUInt32("DataSetMessageContentMask", DataSetMessageContentMask);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            NetworkMessageContentMask = decoder.ReadUInt32("NetworkMessageContentMask");
            DataSetMessageContentMask = decoder.ReadUInt32("DataSetMessageContentMask");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.UadpDataSetReaderMessageDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.UadpDataSetReaderMessageDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.UadpDataSetReaderMessageDataType)]
    public class UadpDataSetReaderMessageDataType : DataSetReaderMessageDataType
    {
        public UInt32 GroupVersion { get; set; }
        public UInt16 NetworkMessageNumber { get; set; }
        public UInt16 DataSetOffset { get; set; }
        public Guid DataSetClassId { get; set; }
        public UInt32 NetworkMessageContentMask { get; set; }
        public UInt32 DataSetMessageContentMask { get; set; }
        public Double PublishingInterval { get; set; }
        public Double ReceiveOffset { get; set; }
        public Double ProcessingOffset { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteUInt32("GroupVersion", GroupVersion);
            encoder.WriteUInt16("NetworkMessageNumber", NetworkMessageNumber);
            encoder.WriteUInt16("DataSetOffset", DataSetOffset);
            encoder.WriteGuid("DataSetClassId", DataSetClassId);
            encoder.WriteUInt32("NetworkMessageContentMask", NetworkMessageContentMask);
            encoder.WriteUInt32("DataSetMessageContentMask", DataSetMessageContentMask);
            encoder.WriteDouble("PublishingInterval", PublishingInterval);
            encoder.WriteDouble("ReceiveOffset", ReceiveOffset);
            encoder.WriteDouble("ProcessingOffset", ProcessingOffset);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            GroupVersion = decoder.ReadUInt32("GroupVersion");
            NetworkMessageNumber = decoder.ReadUInt16("NetworkMessageNumber");
            DataSetOffset = decoder.ReadUInt16("DataSetOffset");
            DataSetClassId = decoder.ReadGuid("DataSetClassId");
            NetworkMessageContentMask = decoder.ReadUInt32("NetworkMessageContentMask");
            DataSetMessageContentMask = decoder.ReadUInt32("DataSetMessageContentMask");
            PublishingInterval = decoder.ReadDouble("PublishingInterval");
            ReceiveOffset = decoder.ReadDouble("ReceiveOffset");
            ProcessingOffset = decoder.ReadDouble("ProcessingOffset");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.SubscribedDataSetDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.SubscribedDataSetDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.SubscribedDataSetDataType)]
    public class SubscribedDataSetDataType : IEncodable
    {
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.SubscribedDataSetMirrorDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.SubscribedDataSetMirrorDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.SubscribedDataSetMirrorDataType)]
    public class SubscribedDataSetMirrorDataType : SubscribedDataSetDataType
    {
        public String? ParentNodeName { get; set; }
        public RolePermissionType?[]? RolePermissions { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteString("ParentNodeName", ParentNodeName);
            encoder.WriteEncodableArray<RolePermissionType>("RolePermissions", RolePermissions);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ParentNodeName = decoder.ReadString("ParentNodeName");
            RolePermissions = decoder.ReadEncodableArray<RolePermissionType>("RolePermissions");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.RolePermissionType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.RolePermissionType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.RolePermissionType)]
    public class RolePermissionType : IEncodable
    {
        public NodeId? RoleId { get; set; }
        public UInt32 Permissions { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteNodeId("RoleId", RoleId);
            encoder.WriteUInt32("Permissions", Permissions);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RoleId = decoder.ReadNodeId("RoleId");
            Permissions = decoder.ReadUInt32("Permissions");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.TargetVariablesDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.TargetVariablesDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.TargetVariablesDataType)]
    public class TargetVariablesDataType : SubscribedDataSetDataType
    {
        public FieldTargetDataType?[]? TargetVariables { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodableArray<FieldTargetDataType>("TargetVariables", TargetVariables);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            TargetVariables = decoder.ReadEncodableArray<FieldTargetDataType>("TargetVariables");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.FieldTargetDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.FieldTargetDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.FieldTargetDataType)]
    public class FieldTargetDataType : IEncodable
    {
        public Guid DataSetFieldId { get; set; }
        public String? ReceiverIndexRange { get; set; }
        public NodeId? TargetNodeId { get; set; }
        public UInt32 AttributeId { get; set; }
        public String? WriteIndexRange { get; set; }
        public OverrideValueHandling OverrideValueHandling { get; set; }
        public Variant OverrideValue { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteGuid("DataSetFieldId", DataSetFieldId);
            encoder.WriteString("ReceiverIndexRange", ReceiverIndexRange);
            encoder.WriteNodeId("TargetNodeId", TargetNodeId);
            encoder.WriteUInt32("AttributeId", AttributeId);
            encoder.WriteString("WriteIndexRange", WriteIndexRange);
            encoder.WriteEnumeration<OverrideValueHandling>("OverrideValueHandling", OverrideValueHandling);
            encoder.WriteVariant("OverrideValue", OverrideValue);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            DataSetFieldId = decoder.ReadGuid("DataSetFieldId");
            ReceiverIndexRange = decoder.ReadString("ReceiverIndexRange");
            TargetNodeId = decoder.ReadNodeId("TargetNodeId");
            AttributeId = decoder.ReadUInt32("AttributeId");
            WriteIndexRange = decoder.ReadString("WriteIndexRange");
            OverrideValueHandling = decoder.ReadEnumeration<OverrideValueHandling>("OverrideValueHandling");
            OverrideValue = decoder.ReadVariant("OverrideValue");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.WriterGroupDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.WriterGroupDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.WriterGroupDataType)]
    public class WriterGroupDataType : PubSubGroupDataType
    {
        public UInt16 WriterGroupId { get; set; }
        public Double PublishingInterval { get; set; }
        public Double KeepAliveTime { get; set; }
        public Byte Priority { get; set; }
        public String?[]? LocaleIds { get; set; }
        public String? HeaderLayoutUri { get; set; }
        public WriterGroupTransportDataType? TransportSettings { get; set; }
        public WriterGroupMessageDataType? MessageSettings { get; set; }
        public DataSetWriterDataType?[]? DataSetWriters { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteUInt16("WriterGroupId", WriterGroupId);
            encoder.WriteDouble("PublishingInterval", PublishingInterval);
            encoder.WriteDouble("KeepAliveTime", KeepAliveTime);
            encoder.WriteByte("Priority", Priority);
            encoder.WriteStringArray("LocaleIds", LocaleIds);
            encoder.WriteString("HeaderLayoutUri", HeaderLayoutUri);
            encoder.WriteExtensionObject<WriterGroupTransportDataType>("TransportSettings", TransportSettings);
            encoder.WriteExtensionObject<WriterGroupMessageDataType>("MessageSettings", MessageSettings);
            encoder.WriteEncodableArray<DataSetWriterDataType>("DataSetWriters", DataSetWriters);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            WriterGroupId = decoder.ReadUInt16("WriterGroupId");
            PublishingInterval = decoder.ReadDouble("PublishingInterval");
            KeepAliveTime = decoder.ReadDouble("KeepAliveTime");
            Priority = decoder.ReadByte("Priority");
            LocaleIds = decoder.ReadStringArray("LocaleIds");
            HeaderLayoutUri = decoder.ReadString("HeaderLayoutUri");
            TransportSettings = decoder.ReadExtensionObject<WriterGroupTransportDataType>("TransportSettings");
            MessageSettings = decoder.ReadExtensionObject<WriterGroupMessageDataType>("MessageSettings");
            DataSetWriters = decoder.ReadEncodableArray<DataSetWriterDataType>("DataSetWriters");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.WriterGroupTransportDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.WriterGroupTransportDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.WriterGroupTransportDataType)]
    public class WriterGroupTransportDataType : IEncodable
    {
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.BrokerWriterGroupTransportDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.BrokerWriterGroupTransportDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.BrokerWriterGroupTransportDataType)]
    public class BrokerWriterGroupTransportDataType : WriterGroupTransportDataType
    {
        public String? QueueName { get; set; }
        public String? ResourceUri { get; set; }
        public String? AuthenticationProfileUri { get; set; }
        public BrokerTransportQualityOfService RequestedDeliveryGuarantee { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteString("QueueName", QueueName);
            encoder.WriteString("ResourceUri", ResourceUri);
            encoder.WriteString("AuthenticationProfileUri", AuthenticationProfileUri);
            encoder.WriteEnumeration<BrokerTransportQualityOfService>("RequestedDeliveryGuarantee", RequestedDeliveryGuarantee);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            QueueName = decoder.ReadString("QueueName");
            ResourceUri = decoder.ReadString("ResourceUri");
            AuthenticationProfileUri = decoder.ReadString("AuthenticationProfileUri");
            RequestedDeliveryGuarantee = decoder.ReadEnumeration<BrokerTransportQualityOfService>("RequestedDeliveryGuarantee");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.DatagramWriterGroupTransportDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.DatagramWriterGroupTransportDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.DatagramWriterGroupTransportDataType)]
    public class DatagramWriterGroupTransportDataType : WriterGroupTransportDataType
    {
        public Byte MessageRepeatCount { get; set; }
        public Double MessageRepeatDelay { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteByte("MessageRepeatCount", MessageRepeatCount);
            encoder.WriteDouble("MessageRepeatDelay", MessageRepeatDelay);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            MessageRepeatCount = decoder.ReadByte("MessageRepeatCount");
            MessageRepeatDelay = decoder.ReadDouble("MessageRepeatDelay");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.WriterGroupMessageDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.WriterGroupMessageDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.WriterGroupMessageDataType)]
    public class WriterGroupMessageDataType : IEncodable
    {
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.JsonWriterGroupMessageDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.JsonWriterGroupMessageDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.JsonWriterGroupMessageDataType)]
    public class JsonWriterGroupMessageDataType : WriterGroupMessageDataType
    {
        public UInt32 NetworkMessageContentMask { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteUInt32("NetworkMessageContentMask", NetworkMessageContentMask);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            NetworkMessageContentMask = decoder.ReadUInt32("NetworkMessageContentMask");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.UadpWriterGroupMessageDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.UadpWriterGroupMessageDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.UadpWriterGroupMessageDataType)]
    public class UadpWriterGroupMessageDataType : WriterGroupMessageDataType
    {
        public UInt32 GroupVersion { get; set; }
        public DataSetOrderingType DataSetOrdering { get; set; }
        public UInt32 NetworkMessageContentMask { get; set; }
        public Double SamplingOffset { get; set; }
        public Double[]? PublishingOffset { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteUInt32("GroupVersion", GroupVersion);
            encoder.WriteEnumeration<DataSetOrderingType>("DataSetOrdering", DataSetOrdering);
            encoder.WriteUInt32("NetworkMessageContentMask", NetworkMessageContentMask);
            encoder.WriteDouble("SamplingOffset", SamplingOffset);
            encoder.WriteDoubleArray("PublishingOffset", PublishingOffset);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            GroupVersion = decoder.ReadUInt32("GroupVersion");
            DataSetOrdering = decoder.ReadEnumeration<DataSetOrderingType>("DataSetOrdering");
            NetworkMessageContentMask = decoder.ReadUInt32("NetworkMessageContentMask");
            SamplingOffset = decoder.ReadDouble("SamplingOffset");
            PublishingOffset = decoder.ReadDoubleArray("PublishingOffset");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.PubSubConnectionDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.PubSubConnectionDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.PubSubConnectionDataType)]
    public class PubSubConnectionDataType : IEncodable
    {
        public String? Name { get; set; }
        public Boolean Enabled { get; set; }
        public Variant PublisherId { get; set; }
        public String? TransportProfileUri { get; set; }
        public NetworkAddressDataType? Address { get; set; }
        public KeyValuePair?[]? ConnectionProperties { get; set; }
        public ConnectionTransportDataType? TransportSettings { get; set; }
        public WriterGroupDataType?[]? WriterGroups { get; set; }
        public ReaderGroupDataType?[]? ReaderGroups { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteString("Name", Name);
            encoder.WriteBoolean("Enabled", Enabled);
            encoder.WriteVariant("PublisherId", PublisherId);
            encoder.WriteString("TransportProfileUri", TransportProfileUri);
            encoder.WriteExtensionObject<NetworkAddressDataType>("Address", Address);
            encoder.WriteEncodableArray<KeyValuePair>("ConnectionProperties", ConnectionProperties);
            encoder.WriteExtensionObject<ConnectionTransportDataType>("TransportSettings", TransportSettings);
            encoder.WriteEncodableArray<WriterGroupDataType>("WriterGroups", WriterGroups);
            encoder.WriteEncodableArray<ReaderGroupDataType>("ReaderGroups", ReaderGroups);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Name = decoder.ReadString("Name");
            Enabled = decoder.ReadBoolean("Enabled");
            PublisherId = decoder.ReadVariant("PublisherId");
            TransportProfileUri = decoder.ReadString("TransportProfileUri");
            Address = decoder.ReadExtensionObject<NetworkAddressDataType>("Address");
            ConnectionProperties = decoder.ReadEncodableArray<KeyValuePair>("ConnectionProperties");
            TransportSettings = decoder.ReadExtensionObject<ConnectionTransportDataType>("TransportSettings");
            WriterGroups = decoder.ReadEncodableArray<WriterGroupDataType>("WriterGroups");
            ReaderGroups = decoder.ReadEncodableArray<ReaderGroupDataType>("ReaderGroups");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.NetworkAddressDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.NetworkAddressDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.NetworkAddressDataType)]
    public class NetworkAddressDataType : IEncodable
    {
        public String? NetworkInterface { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteString("NetworkInterface", NetworkInterface);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            NetworkInterface = decoder.ReadString("NetworkInterface");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.NetworkAddressUrlDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.NetworkAddressUrlDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.NetworkAddressUrlDataType)]
    public class NetworkAddressUrlDataType : NetworkAddressDataType
    {
        public String? Url { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteString("Url", Url);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Url = decoder.ReadString("Url");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ConnectionTransportDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ConnectionTransportDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ConnectionTransportDataType)]
    public class ConnectionTransportDataType : IEncodable
    {
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.BrokerConnectionTransportDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.BrokerConnectionTransportDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.BrokerConnectionTransportDataType)]
    public class BrokerConnectionTransportDataType : ConnectionTransportDataType
    {
        public String? ResourceUri { get; set; }
        public String? AuthenticationProfileUri { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteString("ResourceUri", ResourceUri);
            encoder.WriteString("AuthenticationProfileUri", AuthenticationProfileUri);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResourceUri = decoder.ReadString("ResourceUri");
            AuthenticationProfileUri = decoder.ReadString("AuthenticationProfileUri");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.DatagramConnectionTransportDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.DatagramConnectionTransportDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.DatagramConnectionTransportDataType)]
    public class DatagramConnectionTransportDataType : ConnectionTransportDataType
    {
        public NetworkAddressDataType? DiscoveryAddress { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteExtensionObject<NetworkAddressDataType>("DiscoveryAddress", DiscoveryAddress);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            DiscoveryAddress = decoder.ReadExtensionObject<NetworkAddressDataType>("DiscoveryAddress");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.PubSubConfigurationDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.PubSubConfigurationDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.PubSubConfigurationDataType)]
    public class PubSubConfigurationDataType : IEncodable
    {
        public PublishedDataSetDataType?[]? PublishedDataSets { get; set; }
        public PubSubConnectionDataType?[]? Connections { get; set; }
        public Boolean Enabled { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodableArray<PublishedDataSetDataType>("PublishedDataSets", PublishedDataSets);
            encoder.WriteEncodableArray<PubSubConnectionDataType>("Connections", Connections);
            encoder.WriteBoolean("Enabled", Enabled);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            PublishedDataSets = decoder.ReadEncodableArray<PublishedDataSetDataType>("PublishedDataSets");
            Connections = decoder.ReadEncodableArray<PubSubConnectionDataType>("Connections");
            Enabled = decoder.ReadBoolean("Enabled");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.Node_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.Node_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.Node)]
    public class Node : IEncodable
    {
        public NodeId? NodeId { get; set; }
        public NodeClass NodeClass { get; set; }
        public QualifiedName? BrowseName { get; set; }
        public LocalizedText? DisplayName { get; set; }
        public LocalizedText? Description { get; set; }
        public UInt32 WriteMask { get; set; }
        public UInt32 UserWriteMask { get; set; }
        public RolePermissionType?[]? RolePermissions { get; set; }
        public RolePermissionType?[]? UserRolePermissions { get; set; }
        public UInt16 AccessRestrictions { get; set; }
        public ReferenceNode?[]? References { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteNodeId("NodeId", NodeId);
            encoder.WriteEnumeration<NodeClass>("NodeClass", NodeClass);
            encoder.WriteQualifiedName("BrowseName", BrowseName);
            encoder.WriteLocalizedText("DisplayName", DisplayName);
            encoder.WriteLocalizedText("Description", Description);
            encoder.WriteUInt32("WriteMask", WriteMask);
            encoder.WriteUInt32("UserWriteMask", UserWriteMask);
            encoder.WriteEncodableArray<RolePermissionType>("RolePermissions", RolePermissions);
            encoder.WriteEncodableArray<RolePermissionType>("UserRolePermissions", UserRolePermissions);
            encoder.WriteUInt16("AccessRestrictions", AccessRestrictions);
            encoder.WriteEncodableArray<ReferenceNode>("References", References);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            NodeId = decoder.ReadNodeId("NodeId");
            NodeClass = decoder.ReadEnumeration<NodeClass>("NodeClass");
            BrowseName = decoder.ReadQualifiedName("BrowseName");
            DisplayName = decoder.ReadLocalizedText("DisplayName");
            Description = decoder.ReadLocalizedText("Description");
            WriteMask = decoder.ReadUInt32("WriteMask");
            UserWriteMask = decoder.ReadUInt32("UserWriteMask");
            RolePermissions = decoder.ReadEncodableArray<RolePermissionType>("RolePermissions");
            UserRolePermissions = decoder.ReadEncodableArray<RolePermissionType>("UserRolePermissions");
            AccessRestrictions = decoder.ReadUInt16("AccessRestrictions");
            References = decoder.ReadEncodableArray<ReferenceNode>("References");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ReferenceNode_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ReferenceNode_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ReferenceNode)]
    public class ReferenceNode : IEncodable
    {
        public NodeId? ReferenceTypeId { get; set; }
        public Boolean IsInverse { get; set; }
        public ExpandedNodeId? TargetId { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteNodeId("ReferenceTypeId", ReferenceTypeId);
            encoder.WriteBoolean("IsInverse", IsInverse);
            encoder.WriteExpandedNodeId("TargetId", TargetId);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ReferenceTypeId = decoder.ReadNodeId("ReferenceTypeId");
            IsInverse = decoder.ReadBoolean("IsInverse");
            TargetId = decoder.ReadExpandedNodeId("TargetId");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.TypeNode_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.TypeNode_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.TypeNode)]
    public class TypeNode : Node
    {
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.DataTypeNode_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.DataTypeNode_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.DataTypeNode)]
    public class DataTypeNode : TypeNode
    {
        public Boolean IsAbstract { get; set; }
        public DataTypeDefinition? DataTypeDefinition { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteBoolean("IsAbstract", IsAbstract);
            encoder.WriteExtensionObject<DataTypeDefinition>("DataTypeDefinition", DataTypeDefinition);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            IsAbstract = decoder.ReadBoolean("IsAbstract");
            DataTypeDefinition = decoder.ReadExtensionObject<DataTypeDefinition>("DataTypeDefinition");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ReferenceTypeNode_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ReferenceTypeNode_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ReferenceTypeNode)]
    public class ReferenceTypeNode : TypeNode
    {
        public Boolean IsAbstract { get; set; }
        public Boolean Symmetric { get; set; }
        public LocalizedText? InverseName { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteBoolean("IsAbstract", IsAbstract);
            encoder.WriteBoolean("Symmetric", Symmetric);
            encoder.WriteLocalizedText("InverseName", InverseName);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            IsAbstract = decoder.ReadBoolean("IsAbstract");
            Symmetric = decoder.ReadBoolean("Symmetric");
            InverseName = decoder.ReadLocalizedText("InverseName");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.VariableTypeNode_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.VariableTypeNode_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.VariableTypeNode)]
    public class VariableTypeNode : TypeNode
    {
        public Variant Value { get; set; }
        public NodeId? DataType { get; set; }
        public Int32 ValueRank { get; set; }
        public UInt32[]? ArrayDimensions { get; set; }
        public Boolean IsAbstract { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteVariant("Value", Value);
            encoder.WriteNodeId("DataType", DataType);
            encoder.WriteInt32("ValueRank", ValueRank);
            encoder.WriteUInt32Array("ArrayDimensions", ArrayDimensions);
            encoder.WriteBoolean("IsAbstract", IsAbstract);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Value = decoder.ReadVariant("Value");
            DataType = decoder.ReadNodeId("DataType");
            ValueRank = decoder.ReadInt32("ValueRank");
            ArrayDimensions = decoder.ReadUInt32Array("ArrayDimensions");
            IsAbstract = decoder.ReadBoolean("IsAbstract");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ObjectTypeNode_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ObjectTypeNode_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ObjectTypeNode)]
    public class ObjectTypeNode : TypeNode
    {
        public Boolean IsAbstract { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteBoolean("IsAbstract", IsAbstract);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            IsAbstract = decoder.ReadBoolean("IsAbstract");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.InstanceNode_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.InstanceNode_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.InstanceNode)]
    public class InstanceNode : Node
    {
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ViewNode_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ViewNode_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ViewNode)]
    public class ViewNode : InstanceNode
    {
        public Boolean ContainsNoLoops { get; set; }
        public Byte EventNotifier { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteBoolean("ContainsNoLoops", ContainsNoLoops);
            encoder.WriteByte("EventNotifier", EventNotifier);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ContainsNoLoops = decoder.ReadBoolean("ContainsNoLoops");
            EventNotifier = decoder.ReadByte("EventNotifier");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.MethodNode_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.MethodNode_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.MethodNode)]
    public class MethodNode : InstanceNode
    {
        public Boolean Executable { get; set; }
        public Boolean UserExecutable { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteBoolean("Executable", Executable);
            encoder.WriteBoolean("UserExecutable", UserExecutable);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Executable = decoder.ReadBoolean("Executable");
            UserExecutable = decoder.ReadBoolean("UserExecutable");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.VariableNode_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.VariableNode_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.VariableNode)]
    public class VariableNode : InstanceNode
    {
        public Variant Value { get; set; }
        public NodeId? DataType { get; set; }
        public Int32 ValueRank { get; set; }
        public UInt32[]? ArrayDimensions { get; set; }
        public Byte AccessLevel { get; set; }
        public Byte UserAccessLevel { get; set; }
        public Double MinimumSamplingInterval { get; set; }
        public Boolean Historizing { get; set; }
        public UInt32 AccessLevelEx { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteVariant("Value", Value);
            encoder.WriteNodeId("DataType", DataType);
            encoder.WriteInt32("ValueRank", ValueRank);
            encoder.WriteUInt32Array("ArrayDimensions", ArrayDimensions);
            encoder.WriteByte("AccessLevel", AccessLevel);
            encoder.WriteByte("UserAccessLevel", UserAccessLevel);
            encoder.WriteDouble("MinimumSamplingInterval", MinimumSamplingInterval);
            encoder.WriteBoolean("Historizing", Historizing);
            encoder.WriteUInt32("AccessLevelEx", AccessLevelEx);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Value = decoder.ReadVariant("Value");
            DataType = decoder.ReadNodeId("DataType");
            ValueRank = decoder.ReadInt32("ValueRank");
            ArrayDimensions = decoder.ReadUInt32Array("ArrayDimensions");
            AccessLevel = decoder.ReadByte("AccessLevel");
            UserAccessLevel = decoder.ReadByte("UserAccessLevel");
            MinimumSamplingInterval = decoder.ReadDouble("MinimumSamplingInterval");
            Historizing = decoder.ReadBoolean("Historizing");
            AccessLevelEx = decoder.ReadUInt32("AccessLevelEx");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ObjectNode_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ObjectNode_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ObjectNode)]
    public class ObjectNode : InstanceNode
    {
        public Byte EventNotifier { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteByte("EventNotifier", EventNotifier);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            EventNotifier = decoder.ReadByte("EventNotifier");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.Argument_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.Argument_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.Argument)]
    public class Argument : IEncodable
    {
        public String? Name { get; set; }
        public NodeId? DataType { get; set; }
        public Int32 ValueRank { get; set; }
        public UInt32[]? ArrayDimensions { get; set; }
        public LocalizedText? Description { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteString("Name", Name);
            encoder.WriteNodeId("DataType", DataType);
            encoder.WriteInt32("ValueRank", ValueRank);
            encoder.WriteUInt32Array("ArrayDimensions", ArrayDimensions);
            encoder.WriteLocalizedText("Description", Description);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Name = decoder.ReadString("Name");
            DataType = decoder.ReadNodeId("DataType");
            ValueRank = decoder.ReadInt32("ValueRank");
            ArrayDimensions = decoder.ReadUInt32Array("ArrayDimensions");
            Description = decoder.ReadLocalizedText("Description");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.OptionSet_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.OptionSet_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.OptionSet)]
    public class OptionSet : IEncodable
    {
        public Byte[]? Value { get; set; }
        public Byte[]? ValidBits { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteByteString("Value", Value);
            encoder.WriteByteString("ValidBits", ValidBits);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Value = decoder.ReadByteString("Value");
            ValidBits = decoder.ReadByteString("ValidBits");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.Union_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.Union_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.Union)]
    public class Union : IEncodable
    {
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.TimeZoneDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.TimeZoneDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.TimeZoneDataType)]
    public class TimeZoneDataType : IEncodable
    {
        public Int16 Offset { get; set; }
        public Boolean DaylightSavingInOffset { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteInt16("Offset", Offset);
            encoder.WriteBoolean("DaylightSavingInOffset", DaylightSavingInOffset);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Offset = decoder.ReadInt16("Offset");
            DaylightSavingInOffset = decoder.ReadBoolean("DaylightSavingInOffset");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.RequestHeader_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.RequestHeader_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.RequestHeader)]
    public class RequestHeader : IEncodable
    {
        public NodeId? AuthenticationToken { get; set; }
        public DateTime Timestamp { get; set; }
        public UInt32 RequestHandle { get; set; }
        public UInt32 ReturnDiagnostics { get; set; }
        public String? AuditEntryId { get; set; }
        public UInt32 TimeoutHint { get; set; }
        public ExtensionObject? AdditionalHeader { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteNodeId("AuthenticationToken", AuthenticationToken);
            encoder.WriteDateTime("Timestamp", Timestamp);
            encoder.WriteUInt32("RequestHandle", RequestHandle);
            encoder.WriteUInt32("ReturnDiagnostics", ReturnDiagnostics);
            encoder.WriteString("AuditEntryId", AuditEntryId);
            encoder.WriteUInt32("TimeoutHint", TimeoutHint);
            encoder.WriteExtensionObject("AdditionalHeader", AdditionalHeader);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            AuthenticationToken = decoder.ReadNodeId("AuthenticationToken");
            Timestamp = decoder.ReadDateTime("Timestamp");
            RequestHandle = decoder.ReadUInt32("RequestHandle");
            ReturnDiagnostics = decoder.ReadUInt32("ReturnDiagnostics");
            AuditEntryId = decoder.ReadString("AuditEntryId");
            TimeoutHint = decoder.ReadUInt32("TimeoutHint");
            AdditionalHeader = decoder.ReadExtensionObject("AdditionalHeader");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ResponseHeader_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ResponseHeader_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ResponseHeader)]
    public class ResponseHeader : IEncodable
    {
        public DateTime Timestamp { get; set; }
        public UInt32 RequestHandle { get; set; }
        public StatusCode ServiceResult { get; set; }
        public DiagnosticInfo? ServiceDiagnostics { get; set; }
        public String?[]? StringTable { get; set; }
        public ExtensionObject? AdditionalHeader { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteDateTime("Timestamp", Timestamp);
            encoder.WriteUInt32("RequestHandle", RequestHandle);
            encoder.WriteStatusCode("ServiceResult", ServiceResult);
            encoder.WriteDiagnosticInfo("ServiceDiagnostics", ServiceDiagnostics);
            encoder.WriteStringArray("StringTable", StringTable);
            encoder.WriteExtensionObject("AdditionalHeader", AdditionalHeader);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Timestamp = decoder.ReadDateTime("Timestamp");
            RequestHandle = decoder.ReadUInt32("RequestHandle");
            ServiceResult = decoder.ReadStatusCode("ServiceResult");
            ServiceDiagnostics = decoder.ReadDiagnosticInfo("ServiceDiagnostics");
            StringTable = decoder.ReadStringArray("StringTable");
            AdditionalHeader = decoder.ReadExtensionObject("AdditionalHeader");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ServiceFault_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ServiceFault_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ServiceFault)]
    public class ServiceFault : IServiceResponse
    {
        public ResponseHeader? ResponseHeader { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ResponseHeader>("ResponseHeader", ResponseHeader);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResponseHeader = decoder.ReadEncodable<ResponseHeader>("ResponseHeader");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.SessionlessInvokeRequestType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.SessionlessInvokeRequestType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.SessionlessInvokeRequestType)]
    public class SessionlessInvokeRequestType : IEncodable
    {
        public UInt32[]? UrisVersion { get; set; }
        public String?[]? NamespaceUris { get; set; }
        public String?[]? ServerUris { get; set; }
        public String?[]? LocaleIds { get; set; }
        public UInt32 ServiceId { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteUInt32Array("UrisVersion", UrisVersion);
            encoder.WriteStringArray("NamespaceUris", NamespaceUris);
            encoder.WriteStringArray("ServerUris", ServerUris);
            encoder.WriteStringArray("LocaleIds", LocaleIds);
            encoder.WriteUInt32("ServiceId", ServiceId);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            UrisVersion = decoder.ReadUInt32Array("UrisVersion");
            NamespaceUris = decoder.ReadStringArray("NamespaceUris");
            ServerUris = decoder.ReadStringArray("ServerUris");
            LocaleIds = decoder.ReadStringArray("LocaleIds");
            ServiceId = decoder.ReadUInt32("ServiceId");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.SessionlessInvokeResponseType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.SessionlessInvokeResponseType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.SessionlessInvokeResponseType)]
    public class SessionlessInvokeResponseType : IEncodable
    {
        public String?[]? NamespaceUris { get; set; }
        public String?[]? ServerUris { get; set; }
        public UInt32 ServiceId { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteStringArray("NamespaceUris", NamespaceUris);
            encoder.WriteStringArray("ServerUris", ServerUris);
            encoder.WriteUInt32("ServiceId", ServiceId);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            NamespaceUris = decoder.ReadStringArray("NamespaceUris");
            ServerUris = decoder.ReadStringArray("ServerUris");
            ServiceId = decoder.ReadUInt32("ServiceId");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.FindServersRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.FindServersRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.FindServersRequest)]
    public class FindServersRequest : IServiceRequest, IRequest<FindServersResponse>
    {
        public RequestHeader? RequestHeader { get; set; }
        public String? EndpointUrl { get; set; }
        public String?[]? LocaleIds { get; set; }
        public String?[]? ServerUris { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<RequestHeader>("RequestHeader", RequestHeader);
            encoder.WriteString("EndpointUrl", EndpointUrl);
            encoder.WriteStringArray("LocaleIds", LocaleIds);
            encoder.WriteStringArray("ServerUris", ServerUris);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RequestHeader = decoder.ReadEncodable<RequestHeader>("RequestHeader");
            EndpointUrl = decoder.ReadString("EndpointUrl");
            LocaleIds = decoder.ReadStringArray("LocaleIds");
            ServerUris = decoder.ReadStringArray("ServerUris");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.FindServersResponse_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.FindServersResponse_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.FindServersResponse)]
    public class FindServersResponse : IServiceResponse
    {
        public ResponseHeader? ResponseHeader { get; set; }
        public ApplicationDescription?[]? Servers { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ResponseHeader>("ResponseHeader", ResponseHeader);
            encoder.WriteEncodableArray<ApplicationDescription>("Servers", Servers);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResponseHeader = decoder.ReadEncodable<ResponseHeader>("ResponseHeader");
            Servers = decoder.ReadEncodableArray<ApplicationDescription>("Servers");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ServerOnNetwork_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ServerOnNetwork_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ServerOnNetwork)]
    public class ServerOnNetwork : IEncodable
    {
        public UInt32 RecordId { get; set; }
        public String? ServerName { get; set; }
        public String? DiscoveryUrl { get; set; }
        public String?[]? ServerCapabilities { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteUInt32("RecordId", RecordId);
            encoder.WriteString("ServerName", ServerName);
            encoder.WriteString("DiscoveryUrl", DiscoveryUrl);
            encoder.WriteStringArray("ServerCapabilities", ServerCapabilities);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RecordId = decoder.ReadUInt32("RecordId");
            ServerName = decoder.ReadString("ServerName");
            DiscoveryUrl = decoder.ReadString("DiscoveryUrl");
            ServerCapabilities = decoder.ReadStringArray("ServerCapabilities");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.FindServersOnNetworkRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.FindServersOnNetworkRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.FindServersOnNetworkRequest)]
    public class FindServersOnNetworkRequest : IServiceRequest, IRequest<FindServersOnNetworkResponse>
    {
        public RequestHeader? RequestHeader { get; set; }
        public UInt32 StartingRecordId { get; set; }
        public UInt32 MaxRecordsToReturn { get; set; }
        public String?[]? ServerCapabilityFilter { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<RequestHeader>("RequestHeader", RequestHeader);
            encoder.WriteUInt32("StartingRecordId", StartingRecordId);
            encoder.WriteUInt32("MaxRecordsToReturn", MaxRecordsToReturn);
            encoder.WriteStringArray("ServerCapabilityFilter", ServerCapabilityFilter);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RequestHeader = decoder.ReadEncodable<RequestHeader>("RequestHeader");
            StartingRecordId = decoder.ReadUInt32("StartingRecordId");
            MaxRecordsToReturn = decoder.ReadUInt32("MaxRecordsToReturn");
            ServerCapabilityFilter = decoder.ReadStringArray("ServerCapabilityFilter");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.FindServersOnNetworkResponse_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.FindServersOnNetworkResponse_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.FindServersOnNetworkResponse)]
    public class FindServersOnNetworkResponse : IServiceResponse
    {
        public ResponseHeader? ResponseHeader { get; set; }
        public DateTime LastCounterResetTime { get; set; }
        public ServerOnNetwork?[]? Servers { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ResponseHeader>("ResponseHeader", ResponseHeader);
            encoder.WriteDateTime("LastCounterResetTime", LastCounterResetTime);
            encoder.WriteEncodableArray<ServerOnNetwork>("Servers", Servers);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResponseHeader = decoder.ReadEncodable<ResponseHeader>("ResponseHeader");
            LastCounterResetTime = decoder.ReadDateTime("LastCounterResetTime");
            Servers = decoder.ReadEncodableArray<ServerOnNetwork>("Servers");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.GetEndpointsRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.GetEndpointsRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.GetEndpointsRequest)]
    public class GetEndpointsRequest : IServiceRequest, IRequest<GetEndpointsResponse>
    {
        public RequestHeader? RequestHeader { get; set; }
        public String? EndpointUrl { get; set; }
        public String?[]? LocaleIds { get; set; }
        public String?[]? ProfileUris { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<RequestHeader>("RequestHeader", RequestHeader);
            encoder.WriteString("EndpointUrl", EndpointUrl);
            encoder.WriteStringArray("LocaleIds", LocaleIds);
            encoder.WriteStringArray("ProfileUris", ProfileUris);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RequestHeader = decoder.ReadEncodable<RequestHeader>("RequestHeader");
            EndpointUrl = decoder.ReadString("EndpointUrl");
            LocaleIds = decoder.ReadStringArray("LocaleIds");
            ProfileUris = decoder.ReadStringArray("ProfileUris");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.GetEndpointsResponse_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.GetEndpointsResponse_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.GetEndpointsResponse)]
    public class GetEndpointsResponse : IServiceResponse
    {
        public ResponseHeader? ResponseHeader { get; set; }
        public EndpointDescription?[]? Endpoints { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ResponseHeader>("ResponseHeader", ResponseHeader);
            encoder.WriteEncodableArray<EndpointDescription>("Endpoints", Endpoints);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResponseHeader = decoder.ReadEncodable<ResponseHeader>("ResponseHeader");
            Endpoints = decoder.ReadEncodableArray<EndpointDescription>("Endpoints");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.RegisteredServer_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.RegisteredServer_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.RegisteredServer)]
    public class RegisteredServer : IEncodable
    {
        public String? ServerUri { get; set; }
        public String? ProductUri { get; set; }
        public LocalizedText?[]? ServerNames { get; set; }
        public ApplicationType ServerType { get; set; }
        public String? GatewayServerUri { get; set; }
        public String?[]? DiscoveryUrls { get; set; }
        public String? SemaphoreFilePath { get; set; }
        public Boolean IsOnline { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteString("ServerUri", ServerUri);
            encoder.WriteString("ProductUri", ProductUri);
            encoder.WriteLocalizedTextArray("ServerNames", ServerNames);
            encoder.WriteEnumeration<ApplicationType>("ServerType", ServerType);
            encoder.WriteString("GatewayServerUri", GatewayServerUri);
            encoder.WriteStringArray("DiscoveryUrls", DiscoveryUrls);
            encoder.WriteString("SemaphoreFilePath", SemaphoreFilePath);
            encoder.WriteBoolean("IsOnline", IsOnline);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ServerUri = decoder.ReadString("ServerUri");
            ProductUri = decoder.ReadString("ProductUri");
            ServerNames = decoder.ReadLocalizedTextArray("ServerNames");
            ServerType = decoder.ReadEnumeration<ApplicationType>("ServerType");
            GatewayServerUri = decoder.ReadString("GatewayServerUri");
            DiscoveryUrls = decoder.ReadStringArray("DiscoveryUrls");
            SemaphoreFilePath = decoder.ReadString("SemaphoreFilePath");
            IsOnline = decoder.ReadBoolean("IsOnline");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.RegisterServerRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.RegisterServerRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.RegisterServerRequest)]
    public class RegisterServerRequest : IServiceRequest, IRequest<RegisterServerResponse>
    {
        public RequestHeader? RequestHeader { get; set; }
        public RegisteredServer? Server { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<RequestHeader>("RequestHeader", RequestHeader);
            encoder.WriteEncodable<RegisteredServer>("Server", Server);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RequestHeader = decoder.ReadEncodable<RequestHeader>("RequestHeader");
            Server = decoder.ReadEncodable<RegisteredServer>("Server");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.RegisterServerResponse_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.RegisterServerResponse_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.RegisterServerResponse)]
    public class RegisterServerResponse : IServiceResponse
    {
        public ResponseHeader? ResponseHeader { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ResponseHeader>("ResponseHeader", ResponseHeader);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResponseHeader = decoder.ReadEncodable<ResponseHeader>("ResponseHeader");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.DiscoveryConfiguration_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.DiscoveryConfiguration_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.DiscoveryConfiguration)]
    public class DiscoveryConfiguration : IEncodable
    {
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.MdnsDiscoveryConfiguration_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.MdnsDiscoveryConfiguration_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.MdnsDiscoveryConfiguration)]
    public class MdnsDiscoveryConfiguration : DiscoveryConfiguration
    {
        public String? MdnsServerName { get; set; }
        public String?[]? ServerCapabilities { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteString("MdnsServerName", MdnsServerName);
            encoder.WriteStringArray("ServerCapabilities", ServerCapabilities);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            MdnsServerName = decoder.ReadString("MdnsServerName");
            ServerCapabilities = decoder.ReadStringArray("ServerCapabilities");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.RegisterServer2Request_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.RegisterServer2Request_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.RegisterServer2Request)]
    public class RegisterServer2Request : IServiceRequest, IRequest<RegisterServer2Response>
    {
        public RequestHeader? RequestHeader { get; set; }
        public RegisteredServer? Server { get; set; }
        public DiscoveryConfiguration?[]? DiscoveryConfiguration { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<RequestHeader>("RequestHeader", RequestHeader);
            encoder.WriteEncodable<RegisteredServer>("Server", Server);
            encoder.WriteExtensionObjectArray<DiscoveryConfiguration>("DiscoveryConfiguration", DiscoveryConfiguration);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RequestHeader = decoder.ReadEncodable<RequestHeader>("RequestHeader");
            Server = decoder.ReadEncodable<RegisteredServer>("Server");
            DiscoveryConfiguration = decoder.ReadExtensionObjectArray<DiscoveryConfiguration>("DiscoveryConfiguration");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.RegisterServer2Response_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.RegisterServer2Response_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.RegisterServer2Response)]
    public class RegisterServer2Response : IServiceResponse
    {
        public ResponseHeader? ResponseHeader { get; set; }
        public StatusCode[]? ConfigurationResults { get; set; }
        public DiagnosticInfo?[]? DiagnosticInfos { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ResponseHeader>("ResponseHeader", ResponseHeader);
            encoder.WriteStatusCodeArray("ConfigurationResults", ConfigurationResults);
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResponseHeader = decoder.ReadEncodable<ResponseHeader>("ResponseHeader");
            ConfigurationResults = decoder.ReadStatusCodeArray("ConfigurationResults");
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ChannelSecurityToken_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ChannelSecurityToken_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ChannelSecurityToken)]
    public class ChannelSecurityToken : IEncodable
    {
        public UInt32 ChannelId { get; set; }
        public UInt32 TokenId { get; set; }
        public DateTime CreatedAt { get; set; }
        public UInt32 RevisedLifetime { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteUInt32("ChannelId", ChannelId);
            encoder.WriteUInt32("TokenId", TokenId);
            encoder.WriteDateTime("CreatedAt", CreatedAt);
            encoder.WriteUInt32("RevisedLifetime", RevisedLifetime);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ChannelId = decoder.ReadUInt32("ChannelId");
            TokenId = decoder.ReadUInt32("TokenId");
            CreatedAt = decoder.ReadDateTime("CreatedAt");
            RevisedLifetime = decoder.ReadUInt32("RevisedLifetime");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.OpenSecureChannelRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.OpenSecureChannelRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.OpenSecureChannelRequest)]
    public class OpenSecureChannelRequest : IServiceRequest, IRequest<OpenSecureChannelResponse>
    {
        public RequestHeader? RequestHeader { get; set; }
        public UInt32 ClientProtocolVersion { get; set; }
        public SecurityTokenRequestType RequestType { get; set; }
        public MessageSecurityMode SecurityMode { get; set; }
        public Byte[]? ClientNonce { get; set; }
        public UInt32 RequestedLifetime { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<RequestHeader>("RequestHeader", RequestHeader);
            encoder.WriteUInt32("ClientProtocolVersion", ClientProtocolVersion);
            encoder.WriteEnumeration<SecurityTokenRequestType>("RequestType", RequestType);
            encoder.WriteEnumeration<MessageSecurityMode>("SecurityMode", SecurityMode);
            encoder.WriteByteString("ClientNonce", ClientNonce);
            encoder.WriteUInt32("RequestedLifetime", RequestedLifetime);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RequestHeader = decoder.ReadEncodable<RequestHeader>("RequestHeader");
            ClientProtocolVersion = decoder.ReadUInt32("ClientProtocolVersion");
            RequestType = decoder.ReadEnumeration<SecurityTokenRequestType>("RequestType");
            SecurityMode = decoder.ReadEnumeration<MessageSecurityMode>("SecurityMode");
            ClientNonce = decoder.ReadByteString("ClientNonce");
            RequestedLifetime = decoder.ReadUInt32("RequestedLifetime");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.OpenSecureChannelResponse_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.OpenSecureChannelResponse_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.OpenSecureChannelResponse)]
    public class OpenSecureChannelResponse : IServiceResponse
    {
        public ResponseHeader? ResponseHeader { get; set; }
        public UInt32 ServerProtocolVersion { get; set; }
        public ChannelSecurityToken? SecurityToken { get; set; }
        public Byte[]? ServerNonce { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ResponseHeader>("ResponseHeader", ResponseHeader);
            encoder.WriteUInt32("ServerProtocolVersion", ServerProtocolVersion);
            encoder.WriteEncodable<ChannelSecurityToken>("SecurityToken", SecurityToken);
            encoder.WriteByteString("ServerNonce", ServerNonce);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResponseHeader = decoder.ReadEncodable<ResponseHeader>("ResponseHeader");
            ServerProtocolVersion = decoder.ReadUInt32("ServerProtocolVersion");
            SecurityToken = decoder.ReadEncodable<ChannelSecurityToken>("SecurityToken");
            ServerNonce = decoder.ReadByteString("ServerNonce");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.CloseSecureChannelRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.CloseSecureChannelRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.CloseSecureChannelRequest)]
    public class CloseSecureChannelRequest : IServiceRequest, IRequest<CloseSecureChannelResponse>
    {
        public RequestHeader? RequestHeader { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<RequestHeader>("RequestHeader", RequestHeader);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RequestHeader = decoder.ReadEncodable<RequestHeader>("RequestHeader");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.CloseSecureChannelResponse_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.CloseSecureChannelResponse_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.CloseSecureChannelResponse)]
    public class CloseSecureChannelResponse : IServiceResponse
    {
        public ResponseHeader? ResponseHeader { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ResponseHeader>("ResponseHeader", ResponseHeader);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResponseHeader = decoder.ReadEncodable<ResponseHeader>("ResponseHeader");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.SignedSoftwareCertificate_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.SignedSoftwareCertificate_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.SignedSoftwareCertificate)]
    public class SignedSoftwareCertificate : IEncodable
    {
        public Byte[]? CertificateData { get; set; }
        public Byte[]? Signature { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteByteString("CertificateData", CertificateData);
            encoder.WriteByteString("Signature", Signature);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            CertificateData = decoder.ReadByteString("CertificateData");
            Signature = decoder.ReadByteString("Signature");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.SignatureData_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.SignatureData_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.SignatureData)]
    public class SignatureData : IEncodable
    {
        public String? Algorithm { get; set; }
        public Byte[]? Signature { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteString("Algorithm", Algorithm);
            encoder.WriteByteString("Signature", Signature);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Algorithm = decoder.ReadString("Algorithm");
            Signature = decoder.ReadByteString("Signature");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.CreateSessionRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.CreateSessionRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.CreateSessionRequest)]
    public class CreateSessionRequest : IServiceRequest, IRequest<CreateSessionResponse>
    {
        public RequestHeader? RequestHeader { get; set; }
        public ApplicationDescription? ClientDescription { get; set; }
        public String? ServerUri { get; set; }
        public String? EndpointUrl { get; set; }
        public String? SessionName { get; set; }
        public Byte[]? ClientNonce { get; set; }
        public Byte[]? ClientCertificate { get; set; }
        public Double RequestedSessionTimeout { get; set; }
        public UInt32 MaxResponseMessageSize { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<RequestHeader>("RequestHeader", RequestHeader);
            encoder.WriteEncodable<ApplicationDescription>("ClientDescription", ClientDescription);
            encoder.WriteString("ServerUri", ServerUri);
            encoder.WriteString("EndpointUrl", EndpointUrl);
            encoder.WriteString("SessionName", SessionName);
            encoder.WriteByteString("ClientNonce", ClientNonce);
            encoder.WriteByteString("ClientCertificate", ClientCertificate);
            encoder.WriteDouble("RequestedSessionTimeout", RequestedSessionTimeout);
            encoder.WriteUInt32("MaxResponseMessageSize", MaxResponseMessageSize);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RequestHeader = decoder.ReadEncodable<RequestHeader>("RequestHeader");
            ClientDescription = decoder.ReadEncodable<ApplicationDescription>("ClientDescription");
            ServerUri = decoder.ReadString("ServerUri");
            EndpointUrl = decoder.ReadString("EndpointUrl");
            SessionName = decoder.ReadString("SessionName");
            ClientNonce = decoder.ReadByteString("ClientNonce");
            ClientCertificate = decoder.ReadByteString("ClientCertificate");
            RequestedSessionTimeout = decoder.ReadDouble("RequestedSessionTimeout");
            MaxResponseMessageSize = decoder.ReadUInt32("MaxResponseMessageSize");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.CreateSessionResponse_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.CreateSessionResponse_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.CreateSessionResponse)]
    public class CreateSessionResponse : IServiceResponse
    {
        public ResponseHeader? ResponseHeader { get; set; }
        public NodeId? SessionId { get; set; }
        public NodeId? AuthenticationToken { get; set; }
        public Double RevisedSessionTimeout { get; set; }
        public Byte[]? ServerNonce { get; set; }
        public Byte[]? ServerCertificate { get; set; }
        public EndpointDescription?[]? ServerEndpoints { get; set; }
        public SignedSoftwareCertificate?[]? ServerSoftwareCertificates { get; set; }
        public SignatureData? ServerSignature { get; set; }
        public UInt32 MaxRequestMessageSize { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ResponseHeader>("ResponseHeader", ResponseHeader);
            encoder.WriteNodeId("SessionId", SessionId);
            encoder.WriteNodeId("AuthenticationToken", AuthenticationToken);
            encoder.WriteDouble("RevisedSessionTimeout", RevisedSessionTimeout);
            encoder.WriteByteString("ServerNonce", ServerNonce);
            encoder.WriteByteString("ServerCertificate", ServerCertificate);
            encoder.WriteEncodableArray<EndpointDescription>("ServerEndpoints", ServerEndpoints);
            encoder.WriteEncodableArray<SignedSoftwareCertificate>("ServerSoftwareCertificates", ServerSoftwareCertificates);
            encoder.WriteEncodable<SignatureData>("ServerSignature", ServerSignature);
            encoder.WriteUInt32("MaxRequestMessageSize", MaxRequestMessageSize);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResponseHeader = decoder.ReadEncodable<ResponseHeader>("ResponseHeader");
            SessionId = decoder.ReadNodeId("SessionId");
            AuthenticationToken = decoder.ReadNodeId("AuthenticationToken");
            RevisedSessionTimeout = decoder.ReadDouble("RevisedSessionTimeout");
            ServerNonce = decoder.ReadByteString("ServerNonce");
            ServerCertificate = decoder.ReadByteString("ServerCertificate");
            ServerEndpoints = decoder.ReadEncodableArray<EndpointDescription>("ServerEndpoints");
            ServerSoftwareCertificates = decoder.ReadEncodableArray<SignedSoftwareCertificate>("ServerSoftwareCertificates");
            ServerSignature = decoder.ReadEncodable<SignatureData>("ServerSignature");
            MaxRequestMessageSize = decoder.ReadUInt32("MaxRequestMessageSize");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.UserIdentityToken_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.UserIdentityToken_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.UserIdentityToken)]
    public class UserIdentityToken : IEncodable
    {
        public String? PolicyId { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteString("PolicyId", PolicyId);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            PolicyId = decoder.ReadString("PolicyId");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.IssuedIdentityToken_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.IssuedIdentityToken_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.IssuedIdentityToken)]
    public class IssuedIdentityToken : UserIdentityToken
    {
        public Byte[]? TokenData { get; set; }
        public String? EncryptionAlgorithm { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteByteString("TokenData", TokenData);
            encoder.WriteString("EncryptionAlgorithm", EncryptionAlgorithm);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            TokenData = decoder.ReadByteString("TokenData");
            EncryptionAlgorithm = decoder.ReadString("EncryptionAlgorithm");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.X509IdentityToken_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.X509IdentityToken_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.X509IdentityToken)]
    public class X509IdentityToken : UserIdentityToken
    {
        public Byte[]? CertificateData { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteByteString("CertificateData", CertificateData);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            CertificateData = decoder.ReadByteString("CertificateData");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.UserNameIdentityToken_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.UserNameIdentityToken_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.UserNameIdentityToken)]
    public class UserNameIdentityToken : UserIdentityToken
    {
        public String? UserName { get; set; }
        public Byte[]? Password { get; set; }
        public String? EncryptionAlgorithm { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteString("UserName", UserName);
            encoder.WriteByteString("Password", Password);
            encoder.WriteString("EncryptionAlgorithm", EncryptionAlgorithm);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            UserName = decoder.ReadString("UserName");
            Password = decoder.ReadByteString("Password");
            EncryptionAlgorithm = decoder.ReadString("EncryptionAlgorithm");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.AnonymousIdentityToken_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.AnonymousIdentityToken_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.AnonymousIdentityToken)]
    public class AnonymousIdentityToken : UserIdentityToken
    {
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ActivateSessionRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ActivateSessionRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ActivateSessionRequest)]
    public class ActivateSessionRequest : IServiceRequest, IRequest<ActivateSessionResponse>
    {
        public RequestHeader? RequestHeader { get; set; }
        public SignatureData? ClientSignature { get; set; }
        public SignedSoftwareCertificate?[]? ClientSoftwareCertificates { get; set; }
        public String?[]? LocaleIds { get; set; }
        public UserIdentityToken? UserIdentityToken { get; set; }
        public SignatureData? UserTokenSignature { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<RequestHeader>("RequestHeader", RequestHeader);
            encoder.WriteEncodable<SignatureData>("ClientSignature", ClientSignature);
            encoder.WriteEncodableArray<SignedSoftwareCertificate>("ClientSoftwareCertificates", ClientSoftwareCertificates);
            encoder.WriteStringArray("LocaleIds", LocaleIds);
            encoder.WriteExtensionObject<UserIdentityToken>("UserIdentityToken", UserIdentityToken);
            encoder.WriteEncodable<SignatureData>("UserTokenSignature", UserTokenSignature);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RequestHeader = decoder.ReadEncodable<RequestHeader>("RequestHeader");
            ClientSignature = decoder.ReadEncodable<SignatureData>("ClientSignature");
            ClientSoftwareCertificates = decoder.ReadEncodableArray<SignedSoftwareCertificate>("ClientSoftwareCertificates");
            LocaleIds = decoder.ReadStringArray("LocaleIds");
            UserIdentityToken = decoder.ReadExtensionObject<UserIdentityToken>("UserIdentityToken");
            UserTokenSignature = decoder.ReadEncodable<SignatureData>("UserTokenSignature");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ActivateSessionResponse_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ActivateSessionResponse_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ActivateSessionResponse)]
    public class ActivateSessionResponse : IServiceResponse
    {
        public ResponseHeader? ResponseHeader { get; set; }
        public Byte[]? ServerNonce { get; set; }
        public StatusCode[]? Results { get; set; }
        public DiagnosticInfo?[]? DiagnosticInfos { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ResponseHeader>("ResponseHeader", ResponseHeader);
            encoder.WriteByteString("ServerNonce", ServerNonce);
            encoder.WriteStatusCodeArray("Results", Results);
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResponseHeader = decoder.ReadEncodable<ResponseHeader>("ResponseHeader");
            ServerNonce = decoder.ReadByteString("ServerNonce");
            Results = decoder.ReadStatusCodeArray("Results");
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.CloseSessionRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.CloseSessionRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.CloseSessionRequest)]
    public class CloseSessionRequest : IServiceRequest, IRequest<CloseSessionResponse>
    {
        public RequestHeader? RequestHeader { get; set; }
        public Boolean DeleteSubscriptions { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<RequestHeader>("RequestHeader", RequestHeader);
            encoder.WriteBoolean("DeleteSubscriptions", DeleteSubscriptions);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RequestHeader = decoder.ReadEncodable<RequestHeader>("RequestHeader");
            DeleteSubscriptions = decoder.ReadBoolean("DeleteSubscriptions");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.CloseSessionResponse_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.CloseSessionResponse_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.CloseSessionResponse)]
    public class CloseSessionResponse : IServiceResponse
    {
        public ResponseHeader? ResponseHeader { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ResponseHeader>("ResponseHeader", ResponseHeader);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResponseHeader = decoder.ReadEncodable<ResponseHeader>("ResponseHeader");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.CancelRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.CancelRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.CancelRequest)]
    public class CancelRequest : IServiceRequest, IRequest<CancelResponse>
    {
        public RequestHeader? RequestHeader { get; set; }
        public UInt32 RequestHandle { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<RequestHeader>("RequestHeader", RequestHeader);
            encoder.WriteUInt32("RequestHandle", RequestHandle);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RequestHeader = decoder.ReadEncodable<RequestHeader>("RequestHeader");
            RequestHandle = decoder.ReadUInt32("RequestHandle");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.CancelResponse_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.CancelResponse_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.CancelResponse)]
    public class CancelResponse : IServiceResponse
    {
        public ResponseHeader? ResponseHeader { get; set; }
        public UInt32 CancelCount { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ResponseHeader>("ResponseHeader", ResponseHeader);
            encoder.WriteUInt32("CancelCount", CancelCount);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResponseHeader = decoder.ReadEncodable<ResponseHeader>("ResponseHeader");
            CancelCount = decoder.ReadUInt32("CancelCount");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.NodeAttributes_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.NodeAttributes_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.NodeAttributes)]
    public class NodeAttributes : IEncodable
    {
        public UInt32 SpecifiedAttributes { get; set; }
        public LocalizedText? DisplayName { get; set; }
        public LocalizedText? Description { get; set; }
        public UInt32 WriteMask { get; set; }
        public UInt32 UserWriteMask { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteUInt32("SpecifiedAttributes", SpecifiedAttributes);
            encoder.WriteLocalizedText("DisplayName", DisplayName);
            encoder.WriteLocalizedText("Description", Description);
            encoder.WriteUInt32("WriteMask", WriteMask);
            encoder.WriteUInt32("UserWriteMask", UserWriteMask);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            SpecifiedAttributes = decoder.ReadUInt32("SpecifiedAttributes");
            DisplayName = decoder.ReadLocalizedText("DisplayName");
            Description = decoder.ReadLocalizedText("Description");
            WriteMask = decoder.ReadUInt32("WriteMask");
            UserWriteMask = decoder.ReadUInt32("UserWriteMask");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.GenericAttributes_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.GenericAttributes_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.GenericAttributes)]
    public class GenericAttributes : NodeAttributes
    {
        public GenericAttributeValue?[]? AttributeValues { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodableArray<GenericAttributeValue>("AttributeValues", AttributeValues);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            AttributeValues = decoder.ReadEncodableArray<GenericAttributeValue>("AttributeValues");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.GenericAttributeValue_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.GenericAttributeValue_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.GenericAttributeValue)]
    public class GenericAttributeValue : IEncodable
    {
        public UInt32 AttributeId { get; set; }
        public Variant Value { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteUInt32("AttributeId", AttributeId);
            encoder.WriteVariant("Value", Value);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            AttributeId = decoder.ReadUInt32("AttributeId");
            Value = decoder.ReadVariant("Value");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ViewAttributes_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ViewAttributes_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ViewAttributes)]
    public class ViewAttributes : NodeAttributes
    {
        public Boolean ContainsNoLoops { get; set; }
        public Byte EventNotifier { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteBoolean("ContainsNoLoops", ContainsNoLoops);
            encoder.WriteByte("EventNotifier", EventNotifier);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ContainsNoLoops = decoder.ReadBoolean("ContainsNoLoops");
            EventNotifier = decoder.ReadByte("EventNotifier");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.DataTypeAttributes_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.DataTypeAttributes_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.DataTypeAttributes)]
    public class DataTypeAttributes : NodeAttributes
    {
        public Boolean IsAbstract { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteBoolean("IsAbstract", IsAbstract);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            IsAbstract = decoder.ReadBoolean("IsAbstract");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ReferenceTypeAttributes_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ReferenceTypeAttributes_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ReferenceTypeAttributes)]
    public class ReferenceTypeAttributes : NodeAttributes
    {
        public Boolean IsAbstract { get; set; }
        public Boolean Symmetric { get; set; }
        public LocalizedText? InverseName { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteBoolean("IsAbstract", IsAbstract);
            encoder.WriteBoolean("Symmetric", Symmetric);
            encoder.WriteLocalizedText("InverseName", InverseName);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            IsAbstract = decoder.ReadBoolean("IsAbstract");
            Symmetric = decoder.ReadBoolean("Symmetric");
            InverseName = decoder.ReadLocalizedText("InverseName");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.VariableTypeAttributes_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.VariableTypeAttributes_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.VariableTypeAttributes)]
    public class VariableTypeAttributes : NodeAttributes
    {
        public Variant Value { get; set; }
        public NodeId? DataType { get; set; }
        public Int32 ValueRank { get; set; }
        public UInt32[]? ArrayDimensions { get; set; }
        public Boolean IsAbstract { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteVariant("Value", Value);
            encoder.WriteNodeId("DataType", DataType);
            encoder.WriteInt32("ValueRank", ValueRank);
            encoder.WriteUInt32Array("ArrayDimensions", ArrayDimensions);
            encoder.WriteBoolean("IsAbstract", IsAbstract);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Value = decoder.ReadVariant("Value");
            DataType = decoder.ReadNodeId("DataType");
            ValueRank = decoder.ReadInt32("ValueRank");
            ArrayDimensions = decoder.ReadUInt32Array("ArrayDimensions");
            IsAbstract = decoder.ReadBoolean("IsAbstract");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ObjectTypeAttributes_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ObjectTypeAttributes_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ObjectTypeAttributes)]
    public class ObjectTypeAttributes : NodeAttributes
    {
        public Boolean IsAbstract { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteBoolean("IsAbstract", IsAbstract);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            IsAbstract = decoder.ReadBoolean("IsAbstract");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.MethodAttributes_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.MethodAttributes_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.MethodAttributes)]
    public class MethodAttributes : NodeAttributes
    {
        public Boolean Executable { get; set; }
        public Boolean UserExecutable { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteBoolean("Executable", Executable);
            encoder.WriteBoolean("UserExecutable", UserExecutable);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Executable = decoder.ReadBoolean("Executable");
            UserExecutable = decoder.ReadBoolean("UserExecutable");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.VariableAttributes_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.VariableAttributes_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.VariableAttributes)]
    public class VariableAttributes : NodeAttributes
    {
        public Variant Value { get; set; }
        public NodeId? DataType { get; set; }
        public Int32 ValueRank { get; set; }
        public UInt32[]? ArrayDimensions { get; set; }
        public Byte AccessLevel { get; set; }
        public Byte UserAccessLevel { get; set; }
        public Double MinimumSamplingInterval { get; set; }
        public Boolean Historizing { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteVariant("Value", Value);
            encoder.WriteNodeId("DataType", DataType);
            encoder.WriteInt32("ValueRank", ValueRank);
            encoder.WriteUInt32Array("ArrayDimensions", ArrayDimensions);
            encoder.WriteByte("AccessLevel", AccessLevel);
            encoder.WriteByte("UserAccessLevel", UserAccessLevel);
            encoder.WriteDouble("MinimumSamplingInterval", MinimumSamplingInterval);
            encoder.WriteBoolean("Historizing", Historizing);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Value = decoder.ReadVariant("Value");
            DataType = decoder.ReadNodeId("DataType");
            ValueRank = decoder.ReadInt32("ValueRank");
            ArrayDimensions = decoder.ReadUInt32Array("ArrayDimensions");
            AccessLevel = decoder.ReadByte("AccessLevel");
            UserAccessLevel = decoder.ReadByte("UserAccessLevel");
            MinimumSamplingInterval = decoder.ReadDouble("MinimumSamplingInterval");
            Historizing = decoder.ReadBoolean("Historizing");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ObjectAttributes_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ObjectAttributes_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ObjectAttributes)]
    public class ObjectAttributes : NodeAttributes
    {
        public Byte EventNotifier { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteByte("EventNotifier", EventNotifier);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            EventNotifier = decoder.ReadByte("EventNotifier");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.AddNodesItem_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.AddNodesItem_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.AddNodesItem)]
    public class AddNodesItem : IEncodable
    {
        public ExpandedNodeId? ParentNodeId { get; set; }
        public NodeId? ReferenceTypeId { get; set; }
        public ExpandedNodeId? RequestedNewNodeId { get; set; }
        public QualifiedName? BrowseName { get; set; }
        public NodeClass NodeClass { get; set; }
        public NodeAttributes? NodeAttributes { get; set; }
        public ExpandedNodeId? TypeDefinition { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteExpandedNodeId("ParentNodeId", ParentNodeId);
            encoder.WriteNodeId("ReferenceTypeId", ReferenceTypeId);
            encoder.WriteExpandedNodeId("RequestedNewNodeId", RequestedNewNodeId);
            encoder.WriteQualifiedName("BrowseName", BrowseName);
            encoder.WriteEnumeration<NodeClass>("NodeClass", NodeClass);
            encoder.WriteExtensionObject<NodeAttributes>("NodeAttributes", NodeAttributes);
            encoder.WriteExpandedNodeId("TypeDefinition", TypeDefinition);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ParentNodeId = decoder.ReadExpandedNodeId("ParentNodeId");
            ReferenceTypeId = decoder.ReadNodeId("ReferenceTypeId");
            RequestedNewNodeId = decoder.ReadExpandedNodeId("RequestedNewNodeId");
            BrowseName = decoder.ReadQualifiedName("BrowseName");
            NodeClass = decoder.ReadEnumeration<NodeClass>("NodeClass");
            NodeAttributes = decoder.ReadExtensionObject<NodeAttributes>("NodeAttributes");
            TypeDefinition = decoder.ReadExpandedNodeId("TypeDefinition");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.AddNodesResult_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.AddNodesResult_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.AddNodesResult)]
    public class AddNodesResult : IEncodable
    {
        public StatusCode StatusCode { get; set; }
        public NodeId? AddedNodeId { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteStatusCode("StatusCode", StatusCode);
            encoder.WriteNodeId("AddedNodeId", AddedNodeId);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            StatusCode = decoder.ReadStatusCode("StatusCode");
            AddedNodeId = decoder.ReadNodeId("AddedNodeId");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.AddNodesRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.AddNodesRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.AddNodesRequest)]
    public class AddNodesRequest : IServiceRequest, IRequest<AddNodesResponse>
    {
        public RequestHeader? RequestHeader { get; set; }
        public AddNodesItem?[]? NodesToAdd { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<RequestHeader>("RequestHeader", RequestHeader);
            encoder.WriteEncodableArray<AddNodesItem>("NodesToAdd", NodesToAdd);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RequestHeader = decoder.ReadEncodable<RequestHeader>("RequestHeader");
            NodesToAdd = decoder.ReadEncodableArray<AddNodesItem>("NodesToAdd");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.AddNodesResponse_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.AddNodesResponse_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.AddNodesResponse)]
    public class AddNodesResponse : IServiceResponse
    {
        public ResponseHeader? ResponseHeader { get; set; }
        public AddNodesResult?[]? Results { get; set; }
        public DiagnosticInfo?[]? DiagnosticInfos { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ResponseHeader>("ResponseHeader", ResponseHeader);
            encoder.WriteEncodableArray<AddNodesResult>("Results", Results);
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResponseHeader = decoder.ReadEncodable<ResponseHeader>("ResponseHeader");
            Results = decoder.ReadEncodableArray<AddNodesResult>("Results");
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.AddReferencesItem_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.AddReferencesItem_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.AddReferencesItem)]
    public class AddReferencesItem : IEncodable
    {
        public NodeId? SourceNodeId { get; set; }
        public NodeId? ReferenceTypeId { get; set; }
        public Boolean IsForward { get; set; }
        public String? TargetServerUri { get; set; }
        public ExpandedNodeId? TargetNodeId { get; set; }
        public NodeClass TargetNodeClass { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteNodeId("SourceNodeId", SourceNodeId);
            encoder.WriteNodeId("ReferenceTypeId", ReferenceTypeId);
            encoder.WriteBoolean("IsForward", IsForward);
            encoder.WriteString("TargetServerUri", TargetServerUri);
            encoder.WriteExpandedNodeId("TargetNodeId", TargetNodeId);
            encoder.WriteEnumeration<NodeClass>("TargetNodeClass", TargetNodeClass);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            SourceNodeId = decoder.ReadNodeId("SourceNodeId");
            ReferenceTypeId = decoder.ReadNodeId("ReferenceTypeId");
            IsForward = decoder.ReadBoolean("IsForward");
            TargetServerUri = decoder.ReadString("TargetServerUri");
            TargetNodeId = decoder.ReadExpandedNodeId("TargetNodeId");
            TargetNodeClass = decoder.ReadEnumeration<NodeClass>("TargetNodeClass");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.AddReferencesRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.AddReferencesRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.AddReferencesRequest)]
    public class AddReferencesRequest : IServiceRequest, IRequest<AddReferencesResponse>
    {
        public RequestHeader? RequestHeader { get; set; }
        public AddReferencesItem?[]? ReferencesToAdd { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<RequestHeader>("RequestHeader", RequestHeader);
            encoder.WriteEncodableArray<AddReferencesItem>("ReferencesToAdd", ReferencesToAdd);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RequestHeader = decoder.ReadEncodable<RequestHeader>("RequestHeader");
            ReferencesToAdd = decoder.ReadEncodableArray<AddReferencesItem>("ReferencesToAdd");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.AddReferencesResponse_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.AddReferencesResponse_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.AddReferencesResponse)]
    public class AddReferencesResponse : IServiceResponse
    {
        public ResponseHeader? ResponseHeader { get; set; }
        public StatusCode[]? Results { get; set; }
        public DiagnosticInfo?[]? DiagnosticInfos { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ResponseHeader>("ResponseHeader", ResponseHeader);
            encoder.WriteStatusCodeArray("Results", Results);
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResponseHeader = decoder.ReadEncodable<ResponseHeader>("ResponseHeader");
            Results = decoder.ReadStatusCodeArray("Results");
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.DeleteNodesItem_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.DeleteNodesItem_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.DeleteNodesItem)]
    public class DeleteNodesItem : IEncodable
    {
        public NodeId? NodeId { get; set; }
        public Boolean DeleteTargetReferences { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteNodeId("NodeId", NodeId);
            encoder.WriteBoolean("DeleteTargetReferences", DeleteTargetReferences);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            NodeId = decoder.ReadNodeId("NodeId");
            DeleteTargetReferences = decoder.ReadBoolean("DeleteTargetReferences");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.DeleteNodesRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.DeleteNodesRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.DeleteNodesRequest)]
    public class DeleteNodesRequest : IServiceRequest, IRequest<DeleteNodesResponse>
    {
        public RequestHeader? RequestHeader { get; set; }
        public DeleteNodesItem?[]? NodesToDelete { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<RequestHeader>("RequestHeader", RequestHeader);
            encoder.WriteEncodableArray<DeleteNodesItem>("NodesToDelete", NodesToDelete);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RequestHeader = decoder.ReadEncodable<RequestHeader>("RequestHeader");
            NodesToDelete = decoder.ReadEncodableArray<DeleteNodesItem>("NodesToDelete");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.DeleteNodesResponse_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.DeleteNodesResponse_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.DeleteNodesResponse)]
    public class DeleteNodesResponse : IServiceResponse
    {
        public ResponseHeader? ResponseHeader { get; set; }
        public StatusCode[]? Results { get; set; }
        public DiagnosticInfo?[]? DiagnosticInfos { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ResponseHeader>("ResponseHeader", ResponseHeader);
            encoder.WriteStatusCodeArray("Results", Results);
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResponseHeader = decoder.ReadEncodable<ResponseHeader>("ResponseHeader");
            Results = decoder.ReadStatusCodeArray("Results");
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.DeleteReferencesItem_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.DeleteReferencesItem_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.DeleteReferencesItem)]
    public class DeleteReferencesItem : IEncodable
    {
        public NodeId? SourceNodeId { get; set; }
        public NodeId? ReferenceTypeId { get; set; }
        public Boolean IsForward { get; set; }
        public ExpandedNodeId? TargetNodeId { get; set; }
        public Boolean DeleteBidirectional { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteNodeId("SourceNodeId", SourceNodeId);
            encoder.WriteNodeId("ReferenceTypeId", ReferenceTypeId);
            encoder.WriteBoolean("IsForward", IsForward);
            encoder.WriteExpandedNodeId("TargetNodeId", TargetNodeId);
            encoder.WriteBoolean("DeleteBidirectional", DeleteBidirectional);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            SourceNodeId = decoder.ReadNodeId("SourceNodeId");
            ReferenceTypeId = decoder.ReadNodeId("ReferenceTypeId");
            IsForward = decoder.ReadBoolean("IsForward");
            TargetNodeId = decoder.ReadExpandedNodeId("TargetNodeId");
            DeleteBidirectional = decoder.ReadBoolean("DeleteBidirectional");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.DeleteReferencesRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.DeleteReferencesRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.DeleteReferencesRequest)]
    public class DeleteReferencesRequest : IServiceRequest, IRequest<DeleteReferencesResponse>
    {
        public RequestHeader? RequestHeader { get; set; }
        public DeleteReferencesItem?[]? ReferencesToDelete { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<RequestHeader>("RequestHeader", RequestHeader);
            encoder.WriteEncodableArray<DeleteReferencesItem>("ReferencesToDelete", ReferencesToDelete);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RequestHeader = decoder.ReadEncodable<RequestHeader>("RequestHeader");
            ReferencesToDelete = decoder.ReadEncodableArray<DeleteReferencesItem>("ReferencesToDelete");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.DeleteReferencesResponse_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.DeleteReferencesResponse_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.DeleteReferencesResponse)]
    public class DeleteReferencesResponse : IServiceResponse
    {
        public ResponseHeader? ResponseHeader { get; set; }
        public StatusCode[]? Results { get; set; }
        public DiagnosticInfo?[]? DiagnosticInfos { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ResponseHeader>("ResponseHeader", ResponseHeader);
            encoder.WriteStatusCodeArray("Results", Results);
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResponseHeader = decoder.ReadEncodable<ResponseHeader>("ResponseHeader");
            Results = decoder.ReadStatusCodeArray("Results");
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ViewDescription_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ViewDescription_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ViewDescription)]
    public class ViewDescription : IEncodable
    {
        public NodeId? ViewId { get; set; }
        public DateTime Timestamp { get; set; }
        public UInt32 ViewVersion { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteNodeId("ViewId", ViewId);
            encoder.WriteDateTime("Timestamp", Timestamp);
            encoder.WriteUInt32("ViewVersion", ViewVersion);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ViewId = decoder.ReadNodeId("ViewId");
            Timestamp = decoder.ReadDateTime("Timestamp");
            ViewVersion = decoder.ReadUInt32("ViewVersion");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.BrowseDescription_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.BrowseDescription_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.BrowseDescription)]
    public class BrowseDescription : IEncodable
    {
        public NodeId? NodeId { get; set; }
        public BrowseDirection BrowseDirection { get; set; }
        public NodeId? ReferenceTypeId { get; set; }
        public Boolean IncludeSubtypes { get; set; }
        public UInt32 NodeClassMask { get; set; }
        public UInt32 ResultMask { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteNodeId("NodeId", NodeId);
            encoder.WriteEnumeration<BrowseDirection>("BrowseDirection", BrowseDirection);
            encoder.WriteNodeId("ReferenceTypeId", ReferenceTypeId);
            encoder.WriteBoolean("IncludeSubtypes", IncludeSubtypes);
            encoder.WriteUInt32("NodeClassMask", NodeClassMask);
            encoder.WriteUInt32("ResultMask", ResultMask);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            NodeId = decoder.ReadNodeId("NodeId");
            BrowseDirection = decoder.ReadEnumeration<BrowseDirection>("BrowseDirection");
            ReferenceTypeId = decoder.ReadNodeId("ReferenceTypeId");
            IncludeSubtypes = decoder.ReadBoolean("IncludeSubtypes");
            NodeClassMask = decoder.ReadUInt32("NodeClassMask");
            ResultMask = decoder.ReadUInt32("ResultMask");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ReferenceDescription_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ReferenceDescription_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ReferenceDescription)]
    public class ReferenceDescription : IEncodable
    {
        public NodeId? ReferenceTypeId { get; set; }
        public Boolean IsForward { get; set; }
        public ExpandedNodeId? NodeId { get; set; }
        public QualifiedName? BrowseName { get; set; }
        public LocalizedText? DisplayName { get; set; }
        public NodeClass NodeClass { get; set; }
        public ExpandedNodeId? TypeDefinition { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteNodeId("ReferenceTypeId", ReferenceTypeId);
            encoder.WriteBoolean("IsForward", IsForward);
            encoder.WriteExpandedNodeId("NodeId", NodeId);
            encoder.WriteQualifiedName("BrowseName", BrowseName);
            encoder.WriteLocalizedText("DisplayName", DisplayName);
            encoder.WriteEnumeration<NodeClass>("NodeClass", NodeClass);
            encoder.WriteExpandedNodeId("TypeDefinition", TypeDefinition);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ReferenceTypeId = decoder.ReadNodeId("ReferenceTypeId");
            IsForward = decoder.ReadBoolean("IsForward");
            NodeId = decoder.ReadExpandedNodeId("NodeId");
            BrowseName = decoder.ReadQualifiedName("BrowseName");
            DisplayName = decoder.ReadLocalizedText("DisplayName");
            NodeClass = decoder.ReadEnumeration<NodeClass>("NodeClass");
            TypeDefinition = decoder.ReadExpandedNodeId("TypeDefinition");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.BrowseResult_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.BrowseResult_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.BrowseResult)]
    public class BrowseResult : IEncodable
    {
        public StatusCode StatusCode { get; set; }
        public Byte[]? ContinuationPoint { get; set; }
        public ReferenceDescription?[]? References { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteStatusCode("StatusCode", StatusCode);
            encoder.WriteByteString("ContinuationPoint", ContinuationPoint);
            encoder.WriteEncodableArray<ReferenceDescription>("References", References);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            StatusCode = decoder.ReadStatusCode("StatusCode");
            ContinuationPoint = decoder.ReadByteString("ContinuationPoint");
            References = decoder.ReadEncodableArray<ReferenceDescription>("References");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.BrowseRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.BrowseRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.BrowseRequest)]
    public class BrowseRequest : IServiceRequest, IRequest<BrowseResponse>
    {
        public RequestHeader? RequestHeader { get; set; }
        public ViewDescription? View { get; set; }
        public UInt32 RequestedMaxReferencesPerNode { get; set; }
        public BrowseDescription?[]? NodesToBrowse { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<RequestHeader>("RequestHeader", RequestHeader);
            encoder.WriteEncodable<ViewDescription>("View", View);
            encoder.WriteUInt32("RequestedMaxReferencesPerNode", RequestedMaxReferencesPerNode);
            encoder.WriteEncodableArray<BrowseDescription>("NodesToBrowse", NodesToBrowse);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RequestHeader = decoder.ReadEncodable<RequestHeader>("RequestHeader");
            View = decoder.ReadEncodable<ViewDescription>("View");
            RequestedMaxReferencesPerNode = decoder.ReadUInt32("RequestedMaxReferencesPerNode");
            NodesToBrowse = decoder.ReadEncodableArray<BrowseDescription>("NodesToBrowse");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.BrowseResponse_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.BrowseResponse_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.BrowseResponse)]
    public class BrowseResponse : IServiceResponse
    {
        public ResponseHeader? ResponseHeader { get; set; }
        public BrowseResult?[]? Results { get; set; }
        public DiagnosticInfo?[]? DiagnosticInfos { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ResponseHeader>("ResponseHeader", ResponseHeader);
            encoder.WriteEncodableArray<BrowseResult>("Results", Results);
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResponseHeader = decoder.ReadEncodable<ResponseHeader>("ResponseHeader");
            Results = decoder.ReadEncodableArray<BrowseResult>("Results");
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.BrowseNextRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.BrowseNextRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.BrowseNextRequest)]
    public class BrowseNextRequest : IServiceRequest, IRequest<BrowseNextResponse>
    {
        public RequestHeader? RequestHeader { get; set; }
        public Boolean ReleaseContinuationPoints { get; set; }
        public Byte[]?[]? ContinuationPoints { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<RequestHeader>("RequestHeader", RequestHeader);
            encoder.WriteBoolean("ReleaseContinuationPoints", ReleaseContinuationPoints);
            encoder.WriteByteStringArray("ContinuationPoints", ContinuationPoints);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RequestHeader = decoder.ReadEncodable<RequestHeader>("RequestHeader");
            ReleaseContinuationPoints = decoder.ReadBoolean("ReleaseContinuationPoints");
            ContinuationPoints = decoder.ReadByteStringArray("ContinuationPoints");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.BrowseNextResponse_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.BrowseNextResponse_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.BrowseNextResponse)]
    public class BrowseNextResponse : IServiceResponse
    {
        public ResponseHeader? ResponseHeader { get; set; }
        public BrowseResult?[]? Results { get; set; }
        public DiagnosticInfo?[]? DiagnosticInfos { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ResponseHeader>("ResponseHeader", ResponseHeader);
            encoder.WriteEncodableArray<BrowseResult>("Results", Results);
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResponseHeader = decoder.ReadEncodable<ResponseHeader>("ResponseHeader");
            Results = decoder.ReadEncodableArray<BrowseResult>("Results");
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.BrowsePath_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.BrowsePath_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.BrowsePath)]
    public class BrowsePath : IEncodable
    {
        public NodeId? StartingNode { get; set; }
        public RelativePath? RelativePath { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteNodeId("StartingNode", StartingNode);
            encoder.WriteEncodable<RelativePath>("RelativePath", RelativePath);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            StartingNode = decoder.ReadNodeId("StartingNode");
            RelativePath = decoder.ReadEncodable<RelativePath>("RelativePath");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.BrowsePathTarget_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.BrowsePathTarget_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.BrowsePathTarget)]
    public class BrowsePathTarget : IEncodable
    {
        public ExpandedNodeId? TargetId { get; set; }
        public UInt32 RemainingPathIndex { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteExpandedNodeId("TargetId", TargetId);
            encoder.WriteUInt32("RemainingPathIndex", RemainingPathIndex);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            TargetId = decoder.ReadExpandedNodeId("TargetId");
            RemainingPathIndex = decoder.ReadUInt32("RemainingPathIndex");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.BrowsePathResult_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.BrowsePathResult_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.BrowsePathResult)]
    public class BrowsePathResult : IEncodable
    {
        public StatusCode StatusCode { get; set; }
        public BrowsePathTarget?[]? Targets { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteStatusCode("StatusCode", StatusCode);
            encoder.WriteEncodableArray<BrowsePathTarget>("Targets", Targets);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            StatusCode = decoder.ReadStatusCode("StatusCode");
            Targets = decoder.ReadEncodableArray<BrowsePathTarget>("Targets");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.TranslateBrowsePathsToNodeIdsRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.TranslateBrowsePathsToNodeIdsRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.TranslateBrowsePathsToNodeIdsRequest)]
    public class TranslateBrowsePathsToNodeIdsRequest : IServiceRequest, IRequest<TranslateBrowsePathsToNodeIdsResponse>
    {
        public RequestHeader? RequestHeader { get; set; }
        public BrowsePath?[]? BrowsePaths { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<RequestHeader>("RequestHeader", RequestHeader);
            encoder.WriteEncodableArray<BrowsePath>("BrowsePaths", BrowsePaths);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RequestHeader = decoder.ReadEncodable<RequestHeader>("RequestHeader");
            BrowsePaths = decoder.ReadEncodableArray<BrowsePath>("BrowsePaths");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.TranslateBrowsePathsToNodeIdsResponse_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.TranslateBrowsePathsToNodeIdsResponse_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.TranslateBrowsePathsToNodeIdsResponse)]
    public class TranslateBrowsePathsToNodeIdsResponse : IServiceResponse
    {
        public ResponseHeader? ResponseHeader { get; set; }
        public BrowsePathResult?[]? Results { get; set; }
        public DiagnosticInfo?[]? DiagnosticInfos { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ResponseHeader>("ResponseHeader", ResponseHeader);
            encoder.WriteEncodableArray<BrowsePathResult>("Results", Results);
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResponseHeader = decoder.ReadEncodable<ResponseHeader>("ResponseHeader");
            Results = decoder.ReadEncodableArray<BrowsePathResult>("Results");
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.RegisterNodesRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.RegisterNodesRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.RegisterNodesRequest)]
    public class RegisterNodesRequest : IServiceRequest, IRequest<RegisterNodesResponse>
    {
        public RequestHeader? RequestHeader { get; set; }
        public NodeId?[]? NodesToRegister { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<RequestHeader>("RequestHeader", RequestHeader);
            encoder.WriteNodeIdArray("NodesToRegister", NodesToRegister);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RequestHeader = decoder.ReadEncodable<RequestHeader>("RequestHeader");
            NodesToRegister = decoder.ReadNodeIdArray("NodesToRegister");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.RegisterNodesResponse_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.RegisterNodesResponse_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.RegisterNodesResponse)]
    public class RegisterNodesResponse : IServiceResponse
    {
        public ResponseHeader? ResponseHeader { get; set; }
        public NodeId?[]? RegisteredNodeIds { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ResponseHeader>("ResponseHeader", ResponseHeader);
            encoder.WriteNodeIdArray("RegisteredNodeIds", RegisteredNodeIds);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResponseHeader = decoder.ReadEncodable<ResponseHeader>("ResponseHeader");
            RegisteredNodeIds = decoder.ReadNodeIdArray("RegisteredNodeIds");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.UnregisterNodesRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.UnregisterNodesRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.UnregisterNodesRequest)]
    public class UnregisterNodesRequest : IServiceRequest, IRequest<UnregisterNodesResponse>
    {
        public RequestHeader? RequestHeader { get; set; }
        public NodeId?[]? NodesToUnregister { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<RequestHeader>("RequestHeader", RequestHeader);
            encoder.WriteNodeIdArray("NodesToUnregister", NodesToUnregister);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RequestHeader = decoder.ReadEncodable<RequestHeader>("RequestHeader");
            NodesToUnregister = decoder.ReadNodeIdArray("NodesToUnregister");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.UnregisterNodesResponse_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.UnregisterNodesResponse_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.UnregisterNodesResponse)]
    public class UnregisterNodesResponse : IServiceResponse
    {
        public ResponseHeader? ResponseHeader { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ResponseHeader>("ResponseHeader", ResponseHeader);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResponseHeader = decoder.ReadEncodable<ResponseHeader>("ResponseHeader");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.EndpointConfiguration_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.EndpointConfiguration_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.EndpointConfiguration)]
    public class EndpointConfiguration : IEncodable
    {
        public Int32 OperationTimeout { get; set; }
        public Boolean UseBinaryEncoding { get; set; }
        public Int32 MaxStringLength { get; set; }
        public Int32 MaxByteStringLength { get; set; }
        public Int32 MaxArrayLength { get; set; }
        public Int32 MaxMessageSize { get; set; }
        public Int32 MaxBufferSize { get; set; }
        public Int32 ChannelLifetime { get; set; }
        public Int32 SecurityTokenLifetime { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteInt32("OperationTimeout", OperationTimeout);
            encoder.WriteBoolean("UseBinaryEncoding", UseBinaryEncoding);
            encoder.WriteInt32("MaxStringLength", MaxStringLength);
            encoder.WriteInt32("MaxByteStringLength", MaxByteStringLength);
            encoder.WriteInt32("MaxArrayLength", MaxArrayLength);
            encoder.WriteInt32("MaxMessageSize", MaxMessageSize);
            encoder.WriteInt32("MaxBufferSize", MaxBufferSize);
            encoder.WriteInt32("ChannelLifetime", ChannelLifetime);
            encoder.WriteInt32("SecurityTokenLifetime", SecurityTokenLifetime);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            OperationTimeout = decoder.ReadInt32("OperationTimeout");
            UseBinaryEncoding = decoder.ReadBoolean("UseBinaryEncoding");
            MaxStringLength = decoder.ReadInt32("MaxStringLength");
            MaxByteStringLength = decoder.ReadInt32("MaxByteStringLength");
            MaxArrayLength = decoder.ReadInt32("MaxArrayLength");
            MaxMessageSize = decoder.ReadInt32("MaxMessageSize");
            MaxBufferSize = decoder.ReadInt32("MaxBufferSize");
            ChannelLifetime = decoder.ReadInt32("ChannelLifetime");
            SecurityTokenLifetime = decoder.ReadInt32("SecurityTokenLifetime");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.QueryDataDescription_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.QueryDataDescription_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.QueryDataDescription)]
    public class QueryDataDescription : IEncodable
    {
        public RelativePath? RelativePath { get; set; }
        public UInt32 AttributeId { get; set; }
        public String? IndexRange { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<RelativePath>("RelativePath", RelativePath);
            encoder.WriteUInt32("AttributeId", AttributeId);
            encoder.WriteString("IndexRange", IndexRange);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RelativePath = decoder.ReadEncodable<RelativePath>("RelativePath");
            AttributeId = decoder.ReadUInt32("AttributeId");
            IndexRange = decoder.ReadString("IndexRange");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.NodeTypeDescription_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.NodeTypeDescription_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.NodeTypeDescription)]
    public class NodeTypeDescription : IEncodable
    {
        public ExpandedNodeId? TypeDefinitionNode { get; set; }
        public Boolean IncludeSubTypes { get; set; }
        public QueryDataDescription?[]? DataToReturn { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteExpandedNodeId("TypeDefinitionNode", TypeDefinitionNode);
            encoder.WriteBoolean("IncludeSubTypes", IncludeSubTypes);
            encoder.WriteEncodableArray<QueryDataDescription>("DataToReturn", DataToReturn);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            TypeDefinitionNode = decoder.ReadExpandedNodeId("TypeDefinitionNode");
            IncludeSubTypes = decoder.ReadBoolean("IncludeSubTypes");
            DataToReturn = decoder.ReadEncodableArray<QueryDataDescription>("DataToReturn");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.QueryDataSet_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.QueryDataSet_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.QueryDataSet)]
    public class QueryDataSet : IEncodable
    {
        public ExpandedNodeId? NodeId { get; set; }
        public ExpandedNodeId? TypeDefinitionNode { get; set; }
        public Variant[]? Values { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteExpandedNodeId("NodeId", NodeId);
            encoder.WriteExpandedNodeId("TypeDefinitionNode", TypeDefinitionNode);
            encoder.WriteVariantArray("Values", Values);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            NodeId = decoder.ReadExpandedNodeId("NodeId");
            TypeDefinitionNode = decoder.ReadExpandedNodeId("TypeDefinitionNode");
            Values = decoder.ReadVariantArray("Values");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.NodeReference_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.NodeReference_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.NodeReference)]
    public class NodeReference : IEncodable
    {
        public NodeId? NodeId { get; set; }
        public NodeId? ReferenceTypeId { get; set; }
        public Boolean IsForward { get; set; }
        public NodeId?[]? ReferencedNodeIds { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteNodeId("NodeId", NodeId);
            encoder.WriteNodeId("ReferenceTypeId", ReferenceTypeId);
            encoder.WriteBoolean("IsForward", IsForward);
            encoder.WriteNodeIdArray("ReferencedNodeIds", ReferencedNodeIds);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            NodeId = decoder.ReadNodeId("NodeId");
            ReferenceTypeId = decoder.ReadNodeId("ReferenceTypeId");
            IsForward = decoder.ReadBoolean("IsForward");
            ReferencedNodeIds = decoder.ReadNodeIdArray("ReferencedNodeIds");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ContentFilterElementResult_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ContentFilterElementResult_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ContentFilterElementResult)]
    public class ContentFilterElementResult : IEncodable
    {
        public StatusCode StatusCode { get; set; }
        public StatusCode[]? OperandStatusCodes { get; set; }
        public DiagnosticInfo?[]? OperandDiagnosticInfos { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteStatusCode("StatusCode", StatusCode);
            encoder.WriteStatusCodeArray("OperandStatusCodes", OperandStatusCodes);
            encoder.WriteDiagnosticInfoArray("OperandDiagnosticInfos", OperandDiagnosticInfos);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            StatusCode = decoder.ReadStatusCode("StatusCode");
            OperandStatusCodes = decoder.ReadStatusCodeArray("OperandStatusCodes");
            OperandDiagnosticInfos = decoder.ReadDiagnosticInfoArray("OperandDiagnosticInfos");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ContentFilterResult_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ContentFilterResult_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ContentFilterResult)]
    public class ContentFilterResult : IEncodable
    {
        public ContentFilterElementResult?[]? ElementResults { get; set; }
        public DiagnosticInfo?[]? ElementDiagnosticInfos { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodableArray<ContentFilterElementResult>("ElementResults", ElementResults);
            encoder.WriteDiagnosticInfoArray("ElementDiagnosticInfos", ElementDiagnosticInfos);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ElementResults = decoder.ReadEncodableArray<ContentFilterElementResult>("ElementResults");
            ElementDiagnosticInfos = decoder.ReadDiagnosticInfoArray("ElementDiagnosticInfos");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ParsingResult_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ParsingResult_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ParsingResult)]
    public class ParsingResult : IEncodable
    {
        public StatusCode StatusCode { get; set; }
        public StatusCode[]? DataStatusCodes { get; set; }
        public DiagnosticInfo?[]? DataDiagnosticInfos { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteStatusCode("StatusCode", StatusCode);
            encoder.WriteStatusCodeArray("DataStatusCodes", DataStatusCodes);
            encoder.WriteDiagnosticInfoArray("DataDiagnosticInfos", DataDiagnosticInfos);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            StatusCode = decoder.ReadStatusCode("StatusCode");
            DataStatusCodes = decoder.ReadStatusCodeArray("DataStatusCodes");
            DataDiagnosticInfos = decoder.ReadDiagnosticInfoArray("DataDiagnosticInfos");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.QueryFirstRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.QueryFirstRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.QueryFirstRequest)]
    public class QueryFirstRequest : IServiceRequest, IRequest<QueryFirstResponse>
    {
        public RequestHeader? RequestHeader { get; set; }
        public ViewDescription? View { get; set; }
        public NodeTypeDescription?[]? NodeTypes { get; set; }
        public ContentFilter? Filter { get; set; }
        public UInt32 MaxDataSetsToReturn { get; set; }
        public UInt32 MaxReferencesToReturn { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<RequestHeader>("RequestHeader", RequestHeader);
            encoder.WriteEncodable<ViewDescription>("View", View);
            encoder.WriteEncodableArray<NodeTypeDescription>("NodeTypes", NodeTypes);
            encoder.WriteEncodable<ContentFilter>("Filter", Filter);
            encoder.WriteUInt32("MaxDataSetsToReturn", MaxDataSetsToReturn);
            encoder.WriteUInt32("MaxReferencesToReturn", MaxReferencesToReturn);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RequestHeader = decoder.ReadEncodable<RequestHeader>("RequestHeader");
            View = decoder.ReadEncodable<ViewDescription>("View");
            NodeTypes = decoder.ReadEncodableArray<NodeTypeDescription>("NodeTypes");
            Filter = decoder.ReadEncodable<ContentFilter>("Filter");
            MaxDataSetsToReturn = decoder.ReadUInt32("MaxDataSetsToReturn");
            MaxReferencesToReturn = decoder.ReadUInt32("MaxReferencesToReturn");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.QueryFirstResponse_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.QueryFirstResponse_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.QueryFirstResponse)]
    public class QueryFirstResponse : IServiceResponse
    {
        public ResponseHeader? ResponseHeader { get; set; }
        public QueryDataSet?[]? QueryDataSets { get; set; }
        public Byte[]? ContinuationPoint { get; set; }
        public ParsingResult?[]? ParsingResults { get; set; }
        public DiagnosticInfo?[]? DiagnosticInfos { get; set; }
        public ContentFilterResult? FilterResult { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ResponseHeader>("ResponseHeader", ResponseHeader);
            encoder.WriteEncodableArray<QueryDataSet>("QueryDataSets", QueryDataSets);
            encoder.WriteByteString("ContinuationPoint", ContinuationPoint);
            encoder.WriteEncodableArray<ParsingResult>("ParsingResults", ParsingResults);
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);
            encoder.WriteEncodable<ContentFilterResult>("FilterResult", FilterResult);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResponseHeader = decoder.ReadEncodable<ResponseHeader>("ResponseHeader");
            QueryDataSets = decoder.ReadEncodableArray<QueryDataSet>("QueryDataSets");
            ContinuationPoint = decoder.ReadByteString("ContinuationPoint");
            ParsingResults = decoder.ReadEncodableArray<ParsingResult>("ParsingResults");
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");
            FilterResult = decoder.ReadEncodable<ContentFilterResult>("FilterResult");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.QueryNextRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.QueryNextRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.QueryNextRequest)]
    public class QueryNextRequest : IServiceRequest, IRequest<QueryNextResponse>
    {
        public RequestHeader? RequestHeader { get; set; }
        public Boolean ReleaseContinuationPoint { get; set; }
        public Byte[]? ContinuationPoint { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<RequestHeader>("RequestHeader", RequestHeader);
            encoder.WriteBoolean("ReleaseContinuationPoint", ReleaseContinuationPoint);
            encoder.WriteByteString("ContinuationPoint", ContinuationPoint);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RequestHeader = decoder.ReadEncodable<RequestHeader>("RequestHeader");
            ReleaseContinuationPoint = decoder.ReadBoolean("ReleaseContinuationPoint");
            ContinuationPoint = decoder.ReadByteString("ContinuationPoint");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.QueryNextResponse_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.QueryNextResponse_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.QueryNextResponse)]
    public class QueryNextResponse : IServiceResponse
    {
        public ResponseHeader? ResponseHeader { get; set; }
        public QueryDataSet?[]? QueryDataSets { get; set; }
        public Byte[]? RevisedContinuationPoint { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ResponseHeader>("ResponseHeader", ResponseHeader);
            encoder.WriteEncodableArray<QueryDataSet>("QueryDataSets", QueryDataSets);
            encoder.WriteByteString("RevisedContinuationPoint", RevisedContinuationPoint);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResponseHeader = decoder.ReadEncodable<ResponseHeader>("ResponseHeader");
            QueryDataSets = decoder.ReadEncodableArray<QueryDataSet>("QueryDataSets");
            RevisedContinuationPoint = decoder.ReadByteString("RevisedContinuationPoint");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ReadValueId_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ReadValueId_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ReadValueId)]
    public class ReadValueId : IEncodable
    {
        public NodeId? NodeId { get; set; }
        public UInt32 AttributeId { get; set; }
        public String? IndexRange { get; set; }
        public QualifiedName? DataEncoding { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteNodeId("NodeId", NodeId);
            encoder.WriteUInt32("AttributeId", AttributeId);
            encoder.WriteString("IndexRange", IndexRange);
            encoder.WriteQualifiedName("DataEncoding", DataEncoding);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            NodeId = decoder.ReadNodeId("NodeId");
            AttributeId = decoder.ReadUInt32("AttributeId");
            IndexRange = decoder.ReadString("IndexRange");
            DataEncoding = decoder.ReadQualifiedName("DataEncoding");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ReadRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ReadRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ReadRequest)]
    public class ReadRequest : IServiceRequest, IRequest<ReadResponse>
    {
        public RequestHeader? RequestHeader { get; set; }
        public Double MaxAge { get; set; }
        public TimestampsToReturn TimestampsToReturn { get; set; }
        public ReadValueId?[]? NodesToRead { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<RequestHeader>("RequestHeader", RequestHeader);
            encoder.WriteDouble("MaxAge", MaxAge);
            encoder.WriteEnumeration<TimestampsToReturn>("TimestampsToReturn", TimestampsToReturn);
            encoder.WriteEncodableArray<ReadValueId>("NodesToRead", NodesToRead);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RequestHeader = decoder.ReadEncodable<RequestHeader>("RequestHeader");
            MaxAge = decoder.ReadDouble("MaxAge");
            TimestampsToReturn = decoder.ReadEnumeration<TimestampsToReturn>("TimestampsToReturn");
            NodesToRead = decoder.ReadEncodableArray<ReadValueId>("NodesToRead");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ReadResponse_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ReadResponse_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ReadResponse)]
    public class ReadResponse : IServiceResponse
    {
        public ResponseHeader? ResponseHeader { get; set; }
        public DataValue?[]? Results { get; set; }
        public DiagnosticInfo?[]? DiagnosticInfos { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ResponseHeader>("ResponseHeader", ResponseHeader);
            encoder.WriteDataValueArray("Results", Results);
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResponseHeader = decoder.ReadEncodable<ResponseHeader>("ResponseHeader");
            Results = decoder.ReadDataValueArray("Results");
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.HistoryReadValueId_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.HistoryReadValueId_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.HistoryReadValueId)]
    public class HistoryReadValueId : IEncodable
    {
        public NodeId? NodeId { get; set; }
        public String? IndexRange { get; set; }
        public QualifiedName? DataEncoding { get; set; }
        public Byte[]? ContinuationPoint { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteNodeId("NodeId", NodeId);
            encoder.WriteString("IndexRange", IndexRange);
            encoder.WriteQualifiedName("DataEncoding", DataEncoding);
            encoder.WriteByteString("ContinuationPoint", ContinuationPoint);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            NodeId = decoder.ReadNodeId("NodeId");
            IndexRange = decoder.ReadString("IndexRange");
            DataEncoding = decoder.ReadQualifiedName("DataEncoding");
            ContinuationPoint = decoder.ReadByteString("ContinuationPoint");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.HistoryBase_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.HistoryBase_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.HistoryBase)]
    public class HistoryBase : IEncodable
    {
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.HistoryEvent_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.HistoryEvent_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.HistoryEvent)]
    public class HistoryEvent : HistoryBase
    {
        public HistoryEventFieldList?[]? Events { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodableArray<HistoryEventFieldList>("Events", Events);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Events = decoder.ReadEncodableArray<HistoryEventFieldList>("Events");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.HistoryEventFieldList_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.HistoryEventFieldList_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.HistoryEventFieldList)]
    public class HistoryEventFieldList : IEncodable
    {
        public Variant[]? EventFields { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteVariantArray("EventFields", EventFields);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            EventFields = decoder.ReadVariantArray("EventFields");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.HistoryData_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.HistoryData_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.HistoryData)]
    public class HistoryData : HistoryBase
    {
        public DataValue?[]? DataValues { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteDataValueArray("DataValues", DataValues);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            DataValues = decoder.ReadDataValueArray("DataValues");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.HistoryModifiedData_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.HistoryModifiedData_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.HistoryModifiedData)]
    public class HistoryModifiedData : HistoryData
    {
        public ModificationInfo?[]? ModificationInfos { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodableArray<ModificationInfo>("ModificationInfos", ModificationInfos);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ModificationInfos = decoder.ReadEncodableArray<ModificationInfo>("ModificationInfos");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ModificationInfo_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ModificationInfo_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ModificationInfo)]
    public class ModificationInfo : IEncodable
    {
        public DateTime ModificationTime { get; set; }
        public HistoryUpdateType UpdateType { get; set; }
        public String? UserName { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteDateTime("ModificationTime", ModificationTime);
            encoder.WriteEnumeration<HistoryUpdateType>("UpdateType", UpdateType);
            encoder.WriteString("UserName", UserName);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ModificationTime = decoder.ReadDateTime("ModificationTime");
            UpdateType = decoder.ReadEnumeration<HistoryUpdateType>("UpdateType");
            UserName = decoder.ReadString("UserName");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.HistoryReadResult_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.HistoryReadResult_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.HistoryReadResult)]
    public class HistoryReadResult : IEncodable
    {
        public StatusCode StatusCode { get; set; }
        public Byte[]? ContinuationPoint { get; set; }
        public HistoryBase? HistoryData { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteStatusCode("StatusCode", StatusCode);
            encoder.WriteByteString("ContinuationPoint", ContinuationPoint);
            encoder.WriteExtensionObject<HistoryBase>("HistoryData", HistoryData);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            StatusCode = decoder.ReadStatusCode("StatusCode");
            ContinuationPoint = decoder.ReadByteString("ContinuationPoint");
            HistoryData = decoder.ReadExtensionObject<HistoryBase>("HistoryData");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.HistoryReadDetails_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.HistoryReadDetails_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.HistoryReadDetails)]
    public class HistoryReadDetails : IEncodable
    {
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ReadAtTimeDetails_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ReadAtTimeDetails_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ReadAtTimeDetails)]
    public class ReadAtTimeDetails : HistoryReadDetails
    {
        public DateTime[]? ReqTimes { get; set; }
        public Boolean UseSimpleBounds { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteDateTimeArray("ReqTimes", ReqTimes);
            encoder.WriteBoolean("UseSimpleBounds", UseSimpleBounds);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ReqTimes = decoder.ReadDateTimeArray("ReqTimes");
            UseSimpleBounds = decoder.ReadBoolean("UseSimpleBounds");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ReadProcessedDetails_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ReadProcessedDetails_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ReadProcessedDetails)]
    public class ReadProcessedDetails : HistoryReadDetails
    {
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public Double ProcessingInterval { get; set; }
        public NodeId?[]? AggregateType { get; set; }
        public AggregateConfiguration? AggregateConfiguration { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteDateTime("StartTime", StartTime);
            encoder.WriteDateTime("EndTime", EndTime);
            encoder.WriteDouble("ProcessingInterval", ProcessingInterval);
            encoder.WriteNodeIdArray("AggregateType", AggregateType);
            encoder.WriteEncodable<AggregateConfiguration>("AggregateConfiguration", AggregateConfiguration);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            StartTime = decoder.ReadDateTime("StartTime");
            EndTime = decoder.ReadDateTime("EndTime");
            ProcessingInterval = decoder.ReadDouble("ProcessingInterval");
            AggregateType = decoder.ReadNodeIdArray("AggregateType");
            AggregateConfiguration = decoder.ReadEncodable<AggregateConfiguration>("AggregateConfiguration");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.AggregateConfiguration_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.AggregateConfiguration_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.AggregateConfiguration)]
    public class AggregateConfiguration : IEncodable
    {
        public Boolean UseServerCapabilitiesDefaults { get; set; }
        public Boolean TreatUncertainAsBad { get; set; }
        public Byte PercentDataBad { get; set; }
        public Byte PercentDataGood { get; set; }
        public Boolean UseSlopedExtrapolation { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteBoolean("UseServerCapabilitiesDefaults", UseServerCapabilitiesDefaults);
            encoder.WriteBoolean("TreatUncertainAsBad", TreatUncertainAsBad);
            encoder.WriteByte("PercentDataBad", PercentDataBad);
            encoder.WriteByte("PercentDataGood", PercentDataGood);
            encoder.WriteBoolean("UseSlopedExtrapolation", UseSlopedExtrapolation);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            UseServerCapabilitiesDefaults = decoder.ReadBoolean("UseServerCapabilitiesDefaults");
            TreatUncertainAsBad = decoder.ReadBoolean("TreatUncertainAsBad");
            PercentDataBad = decoder.ReadByte("PercentDataBad");
            PercentDataGood = decoder.ReadByte("PercentDataGood");
            UseSlopedExtrapolation = decoder.ReadBoolean("UseSlopedExtrapolation");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ReadRawModifiedDetails_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ReadRawModifiedDetails_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ReadRawModifiedDetails)]
    public class ReadRawModifiedDetails : HistoryReadDetails
    {
        public Boolean IsReadModified { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public UInt32 NumValuesPerNode { get; set; }
        public Boolean ReturnBounds { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteBoolean("IsReadModified", IsReadModified);
            encoder.WriteDateTime("StartTime", StartTime);
            encoder.WriteDateTime("EndTime", EndTime);
            encoder.WriteUInt32("NumValuesPerNode", NumValuesPerNode);
            encoder.WriteBoolean("ReturnBounds", ReturnBounds);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            IsReadModified = decoder.ReadBoolean("IsReadModified");
            StartTime = decoder.ReadDateTime("StartTime");
            EndTime = decoder.ReadDateTime("EndTime");
            NumValuesPerNode = decoder.ReadUInt32("NumValuesPerNode");
            ReturnBounds = decoder.ReadBoolean("ReturnBounds");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ReadEventDetails_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ReadEventDetails_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ReadEventDetails)]
    public class ReadEventDetails : HistoryReadDetails
    {
        public UInt32 NumValuesPerNode { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public EventFilter? Filter { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteUInt32("NumValuesPerNode", NumValuesPerNode);
            encoder.WriteDateTime("StartTime", StartTime);
            encoder.WriteDateTime("EndTime", EndTime);
            encoder.WriteEncodable<EventFilter>("Filter", Filter);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            NumValuesPerNode = decoder.ReadUInt32("NumValuesPerNode");
            StartTime = decoder.ReadDateTime("StartTime");
            EndTime = decoder.ReadDateTime("EndTime");
            Filter = decoder.ReadEncodable<EventFilter>("Filter");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.EventFilter_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.EventFilter_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.EventFilter)]
    public class EventFilter : MonitoringFilter
    {
        public SimpleAttributeOperand?[]? SelectClauses { get; set; }
        public ContentFilter? WhereClause { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodableArray<SimpleAttributeOperand>("SelectClauses", SelectClauses);
            encoder.WriteEncodable<ContentFilter>("WhereClause", WhereClause);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            SelectClauses = decoder.ReadEncodableArray<SimpleAttributeOperand>("SelectClauses");
            WhereClause = decoder.ReadEncodable<ContentFilter>("WhereClause");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.MonitoringFilter_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.MonitoringFilter_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.MonitoringFilter)]
    public class MonitoringFilter : IEncodable
    {
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.AggregateFilter_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.AggregateFilter_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.AggregateFilter)]
    public class AggregateFilter : MonitoringFilter
    {
        public DateTime StartTime { get; set; }
        public NodeId? AggregateType { get; set; }
        public Double ProcessingInterval { get; set; }
        public AggregateConfiguration? AggregateConfiguration { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteDateTime("StartTime", StartTime);
            encoder.WriteNodeId("AggregateType", AggregateType);
            encoder.WriteDouble("ProcessingInterval", ProcessingInterval);
            encoder.WriteEncodable<AggregateConfiguration>("AggregateConfiguration", AggregateConfiguration);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            StartTime = decoder.ReadDateTime("StartTime");
            AggregateType = decoder.ReadNodeId("AggregateType");
            ProcessingInterval = decoder.ReadDouble("ProcessingInterval");
            AggregateConfiguration = decoder.ReadEncodable<AggregateConfiguration>("AggregateConfiguration");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.DataChangeFilter_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.DataChangeFilter_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.DataChangeFilter)]
    public class DataChangeFilter : MonitoringFilter
    {
        public DataChangeTrigger Trigger { get; set; }
        public UInt32 DeadbandType { get; set; }
        public Double DeadbandValue { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEnumeration<DataChangeTrigger>("Trigger", Trigger);
            encoder.WriteUInt32("DeadbandType", DeadbandType);
            encoder.WriteDouble("DeadbandValue", DeadbandValue);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Trigger = decoder.ReadEnumeration<DataChangeTrigger>("Trigger");
            DeadbandType = decoder.ReadUInt32("DeadbandType");
            DeadbandValue = decoder.ReadDouble("DeadbandValue");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.HistoryReadRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.HistoryReadRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.HistoryReadRequest)]
    public class HistoryReadRequest : IServiceRequest, IRequest<HistoryReadResponse>
    {
        public RequestHeader? RequestHeader { get; set; }
        public HistoryReadDetails? HistoryReadDetails { get; set; }
        public TimestampsToReturn TimestampsToReturn { get; set; }
        public Boolean ReleaseContinuationPoints { get; set; }
        public HistoryReadValueId?[]? NodesToRead { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<RequestHeader>("RequestHeader", RequestHeader);
            encoder.WriteExtensionObject<HistoryReadDetails>("HistoryReadDetails", HistoryReadDetails);
            encoder.WriteEnumeration<TimestampsToReturn>("TimestampsToReturn", TimestampsToReturn);
            encoder.WriteBoolean("ReleaseContinuationPoints", ReleaseContinuationPoints);
            encoder.WriteEncodableArray<HistoryReadValueId>("NodesToRead", NodesToRead);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RequestHeader = decoder.ReadEncodable<RequestHeader>("RequestHeader");
            HistoryReadDetails = decoder.ReadExtensionObject<HistoryReadDetails>("HistoryReadDetails");
            TimestampsToReturn = decoder.ReadEnumeration<TimestampsToReturn>("TimestampsToReturn");
            ReleaseContinuationPoints = decoder.ReadBoolean("ReleaseContinuationPoints");
            NodesToRead = decoder.ReadEncodableArray<HistoryReadValueId>("NodesToRead");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.HistoryReadResponse_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.HistoryReadResponse_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.HistoryReadResponse)]
    public class HistoryReadResponse : IServiceResponse
    {
        public ResponseHeader? ResponseHeader { get; set; }
        public HistoryReadResult?[]? Results { get; set; }
        public DiagnosticInfo?[]? DiagnosticInfos { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ResponseHeader>("ResponseHeader", ResponseHeader);
            encoder.WriteEncodableArray<HistoryReadResult>("Results", Results);
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResponseHeader = decoder.ReadEncodable<ResponseHeader>("ResponseHeader");
            Results = decoder.ReadEncodableArray<HistoryReadResult>("Results");
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.WriteValue_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.WriteValue_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.WriteValue)]
    public class WriteValue : IEncodable
    {
        public NodeId? NodeId { get; set; }
        public UInt32 AttributeId { get; set; }
        public String? IndexRange { get; set; }
        public DataValue? Value { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteNodeId("NodeId", NodeId);
            encoder.WriteUInt32("AttributeId", AttributeId);
            encoder.WriteString("IndexRange", IndexRange);
            encoder.WriteDataValue("Value", Value);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            NodeId = decoder.ReadNodeId("NodeId");
            AttributeId = decoder.ReadUInt32("AttributeId");
            IndexRange = decoder.ReadString("IndexRange");
            Value = decoder.ReadDataValue("Value");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.WriteRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.WriteRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.WriteRequest)]
    public class WriteRequest : IServiceRequest, IRequest<WriteResponse>
    {
        public RequestHeader? RequestHeader { get; set; }
        public WriteValue?[]? NodesToWrite { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<RequestHeader>("RequestHeader", RequestHeader);
            encoder.WriteEncodableArray<WriteValue>("NodesToWrite", NodesToWrite);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RequestHeader = decoder.ReadEncodable<RequestHeader>("RequestHeader");
            NodesToWrite = decoder.ReadEncodableArray<WriteValue>("NodesToWrite");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.WriteResponse_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.WriteResponse_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.WriteResponse)]
    public class WriteResponse : IServiceResponse
    {
        public ResponseHeader? ResponseHeader { get; set; }
        public StatusCode[]? Results { get; set; }
        public DiagnosticInfo?[]? DiagnosticInfos { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ResponseHeader>("ResponseHeader", ResponseHeader);
            encoder.WriteStatusCodeArray("Results", Results);
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResponseHeader = decoder.ReadEncodable<ResponseHeader>("ResponseHeader");
            Results = decoder.ReadStatusCodeArray("Results");
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.HistoryUpdateDetails_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.HistoryUpdateDetails_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.HistoryUpdateDetails)]
    public class HistoryUpdateDetails : IEncodable
    {
        public NodeId? NodeId { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteNodeId("NodeId", NodeId);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            NodeId = decoder.ReadNodeId("NodeId");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.DeleteEventDetails_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.DeleteEventDetails_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.DeleteEventDetails)]
    public class DeleteEventDetails : HistoryUpdateDetails
    {
        public Byte[]?[]? EventIds { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteByteStringArray("EventIds", EventIds);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            EventIds = decoder.ReadByteStringArray("EventIds");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.DeleteAtTimeDetails_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.DeleteAtTimeDetails_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.DeleteAtTimeDetails)]
    public class DeleteAtTimeDetails : HistoryUpdateDetails
    {
        public DateTime[]? ReqTimes { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteDateTimeArray("ReqTimes", ReqTimes);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ReqTimes = decoder.ReadDateTimeArray("ReqTimes");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.DeleteRawModifiedDetails_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.DeleteRawModifiedDetails_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.DeleteRawModifiedDetails)]
    public class DeleteRawModifiedDetails : HistoryUpdateDetails
    {
        public Boolean IsDeleteModified { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteBoolean("IsDeleteModified", IsDeleteModified);
            encoder.WriteDateTime("StartTime", StartTime);
            encoder.WriteDateTime("EndTime", EndTime);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            IsDeleteModified = decoder.ReadBoolean("IsDeleteModified");
            StartTime = decoder.ReadDateTime("StartTime");
            EndTime = decoder.ReadDateTime("EndTime");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.UpdateEventDetails_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.UpdateEventDetails_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.UpdateEventDetails)]
    public class UpdateEventDetails : HistoryUpdateDetails
    {
        public PerformUpdateType PerformInsertReplace { get; set; }
        public EventFilter? Filter { get; set; }
        public HistoryEventFieldList?[]? EventData { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEnumeration<PerformUpdateType>("PerformInsertReplace", PerformInsertReplace);
            encoder.WriteEncodable<EventFilter>("Filter", Filter);
            encoder.WriteEncodableArray<HistoryEventFieldList>("EventData", EventData);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            PerformInsertReplace = decoder.ReadEnumeration<PerformUpdateType>("PerformInsertReplace");
            Filter = decoder.ReadEncodable<EventFilter>("Filter");
            EventData = decoder.ReadEncodableArray<HistoryEventFieldList>("EventData");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.UpdateStructureDataDetails_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.UpdateStructureDataDetails_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.UpdateStructureDataDetails)]
    public class UpdateStructureDataDetails : HistoryUpdateDetails
    {
        public PerformUpdateType PerformInsertReplace { get; set; }
        public DataValue?[]? UpdateValues { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEnumeration<PerformUpdateType>("PerformInsertReplace", PerformInsertReplace);
            encoder.WriteDataValueArray("UpdateValues", UpdateValues);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            PerformInsertReplace = decoder.ReadEnumeration<PerformUpdateType>("PerformInsertReplace");
            UpdateValues = decoder.ReadDataValueArray("UpdateValues");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.UpdateDataDetails_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.UpdateDataDetails_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.UpdateDataDetails)]
    public class UpdateDataDetails : HistoryUpdateDetails
    {
        public PerformUpdateType PerformInsertReplace { get; set; }
        public DataValue?[]? UpdateValues { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEnumeration<PerformUpdateType>("PerformInsertReplace", PerformInsertReplace);
            encoder.WriteDataValueArray("UpdateValues", UpdateValues);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            PerformInsertReplace = decoder.ReadEnumeration<PerformUpdateType>("PerformInsertReplace");
            UpdateValues = decoder.ReadDataValueArray("UpdateValues");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.HistoryUpdateResult_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.HistoryUpdateResult_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.HistoryUpdateResult)]
    public class HistoryUpdateResult : IEncodable
    {
        public StatusCode StatusCode { get; set; }
        public StatusCode[]? OperationResults { get; set; }
        public DiagnosticInfo?[]? DiagnosticInfos { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteStatusCode("StatusCode", StatusCode);
            encoder.WriteStatusCodeArray("OperationResults", OperationResults);
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            StatusCode = decoder.ReadStatusCode("StatusCode");
            OperationResults = decoder.ReadStatusCodeArray("OperationResults");
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.HistoryUpdateRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.HistoryUpdateRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.HistoryUpdateRequest)]
    public class HistoryUpdateRequest : IServiceRequest, IRequest<HistoryUpdateResponse>
    {
        public RequestHeader? RequestHeader { get; set; }
        public HistoryUpdateDetails?[]? HistoryUpdateDetails { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<RequestHeader>("RequestHeader", RequestHeader);
            encoder.WriteExtensionObjectArray<HistoryUpdateDetails>("HistoryUpdateDetails", HistoryUpdateDetails);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RequestHeader = decoder.ReadEncodable<RequestHeader>("RequestHeader");
            HistoryUpdateDetails = decoder.ReadExtensionObjectArray<HistoryUpdateDetails>("HistoryUpdateDetails");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.HistoryUpdateResponse_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.HistoryUpdateResponse_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.HistoryUpdateResponse)]
    public class HistoryUpdateResponse : IServiceResponse
    {
        public ResponseHeader? ResponseHeader { get; set; }
        public HistoryUpdateResult?[]? Results { get; set; }
        public DiagnosticInfo?[]? DiagnosticInfos { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ResponseHeader>("ResponseHeader", ResponseHeader);
            encoder.WriteEncodableArray<HistoryUpdateResult>("Results", Results);
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResponseHeader = decoder.ReadEncodable<ResponseHeader>("ResponseHeader");
            Results = decoder.ReadEncodableArray<HistoryUpdateResult>("Results");
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.CallMethodRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.CallMethodRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.CallMethodRequest)]
    public class CallMethodRequest : IEncodable
    {
        public NodeId? ObjectId { get; set; }
        public NodeId? MethodId { get; set; }
        public Variant[]? InputArguments { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteNodeId("ObjectId", ObjectId);
            encoder.WriteNodeId("MethodId", MethodId);
            encoder.WriteVariantArray("InputArguments", InputArguments);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ObjectId = decoder.ReadNodeId("ObjectId");
            MethodId = decoder.ReadNodeId("MethodId");
            InputArguments = decoder.ReadVariantArray("InputArguments");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.CallMethodResult_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.CallMethodResult_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.CallMethodResult)]
    public class CallMethodResult : IEncodable
    {
        public StatusCode StatusCode { get; set; }
        public StatusCode[]? InputArgumentResults { get; set; }
        public DiagnosticInfo?[]? InputArgumentDiagnosticInfos { get; set; }
        public Variant[]? OutputArguments { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteStatusCode("StatusCode", StatusCode);
            encoder.WriteStatusCodeArray("InputArgumentResults", InputArgumentResults);
            encoder.WriteDiagnosticInfoArray("InputArgumentDiagnosticInfos", InputArgumentDiagnosticInfos);
            encoder.WriteVariantArray("OutputArguments", OutputArguments);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            StatusCode = decoder.ReadStatusCode("StatusCode");
            InputArgumentResults = decoder.ReadStatusCodeArray("InputArgumentResults");
            InputArgumentDiagnosticInfos = decoder.ReadDiagnosticInfoArray("InputArgumentDiagnosticInfos");
            OutputArguments = decoder.ReadVariantArray("OutputArguments");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.CallRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.CallRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.CallRequest)]
    public class CallRequest : IServiceRequest, IRequest<CallResponse>
    {
        public RequestHeader? RequestHeader { get; set; }
        public CallMethodRequest?[]? MethodsToCall { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<RequestHeader>("RequestHeader", RequestHeader);
            encoder.WriteEncodableArray<CallMethodRequest>("MethodsToCall", MethodsToCall);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RequestHeader = decoder.ReadEncodable<RequestHeader>("RequestHeader");
            MethodsToCall = decoder.ReadEncodableArray<CallMethodRequest>("MethodsToCall");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.CallResponse_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.CallResponse_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.CallResponse)]
    public class CallResponse : IServiceResponse
    {
        public ResponseHeader? ResponseHeader { get; set; }
        public CallMethodResult?[]? Results { get; set; }
        public DiagnosticInfo?[]? DiagnosticInfos { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ResponseHeader>("ResponseHeader", ResponseHeader);
            encoder.WriteEncodableArray<CallMethodResult>("Results", Results);
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResponseHeader = decoder.ReadEncodable<ResponseHeader>("ResponseHeader");
            Results = decoder.ReadEncodableArray<CallMethodResult>("Results");
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.MonitoringFilterResult_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.MonitoringFilterResult_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.MonitoringFilterResult)]
    public class MonitoringFilterResult : IEncodable
    {
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.AggregateFilterResult_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.AggregateFilterResult_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.AggregateFilterResult)]
    public class AggregateFilterResult : MonitoringFilterResult
    {
        public DateTime RevisedStartTime { get; set; }
        public Double RevisedProcessingInterval { get; set; }
        public AggregateConfiguration? RevisedAggregateConfiguration { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteDateTime("RevisedStartTime", RevisedStartTime);
            encoder.WriteDouble("RevisedProcessingInterval", RevisedProcessingInterval);
            encoder.WriteEncodable<AggregateConfiguration>("RevisedAggregateConfiguration", RevisedAggregateConfiguration);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RevisedStartTime = decoder.ReadDateTime("RevisedStartTime");
            RevisedProcessingInterval = decoder.ReadDouble("RevisedProcessingInterval");
            RevisedAggregateConfiguration = decoder.ReadEncodable<AggregateConfiguration>("RevisedAggregateConfiguration");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.EventFilterResult_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.EventFilterResult_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.EventFilterResult)]
    public class EventFilterResult : MonitoringFilterResult
    {
        public StatusCode[]? SelectClauseResults { get; set; }
        public DiagnosticInfo?[]? SelectClauseDiagnosticInfos { get; set; }
        public ContentFilterResult? WhereClauseResult { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteStatusCodeArray("SelectClauseResults", SelectClauseResults);
            encoder.WriteDiagnosticInfoArray("SelectClauseDiagnosticInfos", SelectClauseDiagnosticInfos);
            encoder.WriteEncodable<ContentFilterResult>("WhereClauseResult", WhereClauseResult);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            SelectClauseResults = decoder.ReadStatusCodeArray("SelectClauseResults");
            SelectClauseDiagnosticInfos = decoder.ReadDiagnosticInfoArray("SelectClauseDiagnosticInfos");
            WhereClauseResult = decoder.ReadEncodable<ContentFilterResult>("WhereClauseResult");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.MonitoringParameters_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.MonitoringParameters_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.MonitoringParameters)]
    public class MonitoringParameters : IEncodable
    {
        public UInt32 ClientHandle { get; set; }
        public Double SamplingInterval { get; set; }
        public MonitoringFilter? Filter { get; set; }
        public UInt32 QueueSize { get; set; }
        public Boolean DiscardOldest { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteUInt32("ClientHandle", ClientHandle);
            encoder.WriteDouble("SamplingInterval", SamplingInterval);
            encoder.WriteExtensionObject<MonitoringFilter>("Filter", Filter);
            encoder.WriteUInt32("QueueSize", QueueSize);
            encoder.WriteBoolean("DiscardOldest", DiscardOldest);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ClientHandle = decoder.ReadUInt32("ClientHandle");
            SamplingInterval = decoder.ReadDouble("SamplingInterval");
            Filter = decoder.ReadExtensionObject<MonitoringFilter>("Filter");
            QueueSize = decoder.ReadUInt32("QueueSize");
            DiscardOldest = decoder.ReadBoolean("DiscardOldest");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.MonitoredItemCreateRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.MonitoredItemCreateRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.MonitoredItemCreateRequest)]
    public class MonitoredItemCreateRequest : IEncodable
    {
        public ReadValueId? ItemToMonitor { get; set; }
        public MonitoringMode MonitoringMode { get; set; }
        public MonitoringParameters? RequestedParameters { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ReadValueId>("ItemToMonitor", ItemToMonitor);
            encoder.WriteEnumeration<MonitoringMode>("MonitoringMode", MonitoringMode);
            encoder.WriteEncodable<MonitoringParameters>("RequestedParameters", RequestedParameters);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ItemToMonitor = decoder.ReadEncodable<ReadValueId>("ItemToMonitor");
            MonitoringMode = decoder.ReadEnumeration<MonitoringMode>("MonitoringMode");
            RequestedParameters = decoder.ReadEncodable<MonitoringParameters>("RequestedParameters");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.MonitoredItemCreateResult_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.MonitoredItemCreateResult_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.MonitoredItemCreateResult)]
    public class MonitoredItemCreateResult : IEncodable
    {
        public StatusCode StatusCode { get; set; }
        public UInt32 MonitoredItemId { get; set; }
        public Double RevisedSamplingInterval { get; set; }
        public UInt32 RevisedQueueSize { get; set; }
        public MonitoringFilterResult? FilterResult { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteStatusCode("StatusCode", StatusCode);
            encoder.WriteUInt32("MonitoredItemId", MonitoredItemId);
            encoder.WriteDouble("RevisedSamplingInterval", RevisedSamplingInterval);
            encoder.WriteUInt32("RevisedQueueSize", RevisedQueueSize);
            encoder.WriteExtensionObject<MonitoringFilterResult>("FilterResult", FilterResult);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            StatusCode = decoder.ReadStatusCode("StatusCode");
            MonitoredItemId = decoder.ReadUInt32("MonitoredItemId");
            RevisedSamplingInterval = decoder.ReadDouble("RevisedSamplingInterval");
            RevisedQueueSize = decoder.ReadUInt32("RevisedQueueSize");
            FilterResult = decoder.ReadExtensionObject<MonitoringFilterResult>("FilterResult");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.CreateMonitoredItemsRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.CreateMonitoredItemsRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.CreateMonitoredItemsRequest)]
    public class CreateMonitoredItemsRequest : IServiceRequest, IRequest<CreateMonitoredItemsResponse>
    {
        public RequestHeader? RequestHeader { get; set; }
        public UInt32 SubscriptionId { get; set; }
        public TimestampsToReturn TimestampsToReturn { get; set; }
        public MonitoredItemCreateRequest?[]? ItemsToCreate { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<RequestHeader>("RequestHeader", RequestHeader);
            encoder.WriteUInt32("SubscriptionId", SubscriptionId);
            encoder.WriteEnumeration<TimestampsToReturn>("TimestampsToReturn", TimestampsToReturn);
            encoder.WriteEncodableArray<MonitoredItemCreateRequest>("ItemsToCreate", ItemsToCreate);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RequestHeader = decoder.ReadEncodable<RequestHeader>("RequestHeader");
            SubscriptionId = decoder.ReadUInt32("SubscriptionId");
            TimestampsToReturn = decoder.ReadEnumeration<TimestampsToReturn>("TimestampsToReturn");
            ItemsToCreate = decoder.ReadEncodableArray<MonitoredItemCreateRequest>("ItemsToCreate");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.CreateMonitoredItemsResponse_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.CreateMonitoredItemsResponse_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.CreateMonitoredItemsResponse)]
    public class CreateMonitoredItemsResponse : IServiceResponse
    {
        public ResponseHeader? ResponseHeader { get; set; }
        public MonitoredItemCreateResult?[]? Results { get; set; }
        public DiagnosticInfo?[]? DiagnosticInfos { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ResponseHeader>("ResponseHeader", ResponseHeader);
            encoder.WriteEncodableArray<MonitoredItemCreateResult>("Results", Results);
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResponseHeader = decoder.ReadEncodable<ResponseHeader>("ResponseHeader");
            Results = decoder.ReadEncodableArray<MonitoredItemCreateResult>("Results");
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.MonitoredItemModifyRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.MonitoredItemModifyRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.MonitoredItemModifyRequest)]
    public class MonitoredItemModifyRequest : IEncodable
    {
        public UInt32 MonitoredItemId { get; set; }
        public MonitoringParameters? RequestedParameters { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteUInt32("MonitoredItemId", MonitoredItemId);
            encoder.WriteEncodable<MonitoringParameters>("RequestedParameters", RequestedParameters);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            MonitoredItemId = decoder.ReadUInt32("MonitoredItemId");
            RequestedParameters = decoder.ReadEncodable<MonitoringParameters>("RequestedParameters");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.MonitoredItemModifyResult_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.MonitoredItemModifyResult_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.MonitoredItemModifyResult)]
    public class MonitoredItemModifyResult : IEncodable
    {
        public StatusCode StatusCode { get; set; }
        public Double RevisedSamplingInterval { get; set; }
        public UInt32 RevisedQueueSize { get; set; }
        public MonitoringFilterResult? FilterResult { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteStatusCode("StatusCode", StatusCode);
            encoder.WriteDouble("RevisedSamplingInterval", RevisedSamplingInterval);
            encoder.WriteUInt32("RevisedQueueSize", RevisedQueueSize);
            encoder.WriteExtensionObject<MonitoringFilterResult>("FilterResult", FilterResult);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            StatusCode = decoder.ReadStatusCode("StatusCode");
            RevisedSamplingInterval = decoder.ReadDouble("RevisedSamplingInterval");
            RevisedQueueSize = decoder.ReadUInt32("RevisedQueueSize");
            FilterResult = decoder.ReadExtensionObject<MonitoringFilterResult>("FilterResult");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ModifyMonitoredItemsRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ModifyMonitoredItemsRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ModifyMonitoredItemsRequest)]
    public class ModifyMonitoredItemsRequest : IServiceRequest, IRequest<ModifyMonitoredItemsResponse>
    {
        public RequestHeader? RequestHeader { get; set; }
        public UInt32 SubscriptionId { get; set; }
        public TimestampsToReturn TimestampsToReturn { get; set; }
        public MonitoredItemModifyRequest?[]? ItemsToModify { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<RequestHeader>("RequestHeader", RequestHeader);
            encoder.WriteUInt32("SubscriptionId", SubscriptionId);
            encoder.WriteEnumeration<TimestampsToReturn>("TimestampsToReturn", TimestampsToReturn);
            encoder.WriteEncodableArray<MonitoredItemModifyRequest>("ItemsToModify", ItemsToModify);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RequestHeader = decoder.ReadEncodable<RequestHeader>("RequestHeader");
            SubscriptionId = decoder.ReadUInt32("SubscriptionId");
            TimestampsToReturn = decoder.ReadEnumeration<TimestampsToReturn>("TimestampsToReturn");
            ItemsToModify = decoder.ReadEncodableArray<MonitoredItemModifyRequest>("ItemsToModify");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ModifyMonitoredItemsResponse_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ModifyMonitoredItemsResponse_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ModifyMonitoredItemsResponse)]
    public class ModifyMonitoredItemsResponse : IServiceResponse
    {
        public ResponseHeader? ResponseHeader { get; set; }
        public MonitoredItemModifyResult?[]? Results { get; set; }
        public DiagnosticInfo?[]? DiagnosticInfos { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ResponseHeader>("ResponseHeader", ResponseHeader);
            encoder.WriteEncodableArray<MonitoredItemModifyResult>("Results", Results);
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResponseHeader = decoder.ReadEncodable<ResponseHeader>("ResponseHeader");
            Results = decoder.ReadEncodableArray<MonitoredItemModifyResult>("Results");
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.SetMonitoringModeRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.SetMonitoringModeRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.SetMonitoringModeRequest)]
    public class SetMonitoringModeRequest : IServiceRequest, IRequest<SetMonitoringModeResponse>
    {
        public RequestHeader? RequestHeader { get; set; }
        public UInt32 SubscriptionId { get; set; }
        public MonitoringMode MonitoringMode { get; set; }
        public UInt32[]? MonitoredItemIds { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<RequestHeader>("RequestHeader", RequestHeader);
            encoder.WriteUInt32("SubscriptionId", SubscriptionId);
            encoder.WriteEnumeration<MonitoringMode>("MonitoringMode", MonitoringMode);
            encoder.WriteUInt32Array("MonitoredItemIds", MonitoredItemIds);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RequestHeader = decoder.ReadEncodable<RequestHeader>("RequestHeader");
            SubscriptionId = decoder.ReadUInt32("SubscriptionId");
            MonitoringMode = decoder.ReadEnumeration<MonitoringMode>("MonitoringMode");
            MonitoredItemIds = decoder.ReadUInt32Array("MonitoredItemIds");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.SetMonitoringModeResponse_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.SetMonitoringModeResponse_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.SetMonitoringModeResponse)]
    public class SetMonitoringModeResponse : IServiceResponse
    {
        public ResponseHeader? ResponseHeader { get; set; }
        public StatusCode[]? Results { get; set; }
        public DiagnosticInfo?[]? DiagnosticInfos { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ResponseHeader>("ResponseHeader", ResponseHeader);
            encoder.WriteStatusCodeArray("Results", Results);
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResponseHeader = decoder.ReadEncodable<ResponseHeader>("ResponseHeader");
            Results = decoder.ReadStatusCodeArray("Results");
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.SetTriggeringRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.SetTriggeringRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.SetTriggeringRequest)]
    public class SetTriggeringRequest : IServiceRequest, IRequest<SetTriggeringResponse>
    {
        public RequestHeader? RequestHeader { get; set; }
        public UInt32 SubscriptionId { get; set; }
        public UInt32 TriggeringItemId { get; set; }
        public UInt32[]? LinksToAdd { get; set; }
        public UInt32[]? LinksToRemove { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<RequestHeader>("RequestHeader", RequestHeader);
            encoder.WriteUInt32("SubscriptionId", SubscriptionId);
            encoder.WriteUInt32("TriggeringItemId", TriggeringItemId);
            encoder.WriteUInt32Array("LinksToAdd", LinksToAdd);
            encoder.WriteUInt32Array("LinksToRemove", LinksToRemove);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RequestHeader = decoder.ReadEncodable<RequestHeader>("RequestHeader");
            SubscriptionId = decoder.ReadUInt32("SubscriptionId");
            TriggeringItemId = decoder.ReadUInt32("TriggeringItemId");
            LinksToAdd = decoder.ReadUInt32Array("LinksToAdd");
            LinksToRemove = decoder.ReadUInt32Array("LinksToRemove");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.SetTriggeringResponse_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.SetTriggeringResponse_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.SetTriggeringResponse)]
    public class SetTriggeringResponse : IServiceResponse
    {
        public ResponseHeader? ResponseHeader { get; set; }
        public StatusCode[]? AddResults { get; set; }
        public DiagnosticInfo?[]? AddDiagnosticInfos { get; set; }
        public StatusCode[]? RemoveResults { get; set; }
        public DiagnosticInfo?[]? RemoveDiagnosticInfos { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ResponseHeader>("ResponseHeader", ResponseHeader);
            encoder.WriteStatusCodeArray("AddResults", AddResults);
            encoder.WriteDiagnosticInfoArray("AddDiagnosticInfos", AddDiagnosticInfos);
            encoder.WriteStatusCodeArray("RemoveResults", RemoveResults);
            encoder.WriteDiagnosticInfoArray("RemoveDiagnosticInfos", RemoveDiagnosticInfos);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResponseHeader = decoder.ReadEncodable<ResponseHeader>("ResponseHeader");
            AddResults = decoder.ReadStatusCodeArray("AddResults");
            AddDiagnosticInfos = decoder.ReadDiagnosticInfoArray("AddDiagnosticInfos");
            RemoveResults = decoder.ReadStatusCodeArray("RemoveResults");
            RemoveDiagnosticInfos = decoder.ReadDiagnosticInfoArray("RemoveDiagnosticInfos");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.DeleteMonitoredItemsRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.DeleteMonitoredItemsRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.DeleteMonitoredItemsRequest)]
    public class DeleteMonitoredItemsRequest : IServiceRequest, IRequest<DeleteMonitoredItemsResponse>
    {
        public RequestHeader? RequestHeader { get; set; }
        public UInt32 SubscriptionId { get; set; }
        public UInt32[]? MonitoredItemIds { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<RequestHeader>("RequestHeader", RequestHeader);
            encoder.WriteUInt32("SubscriptionId", SubscriptionId);
            encoder.WriteUInt32Array("MonitoredItemIds", MonitoredItemIds);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RequestHeader = decoder.ReadEncodable<RequestHeader>("RequestHeader");
            SubscriptionId = decoder.ReadUInt32("SubscriptionId");
            MonitoredItemIds = decoder.ReadUInt32Array("MonitoredItemIds");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.DeleteMonitoredItemsResponse_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.DeleteMonitoredItemsResponse_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.DeleteMonitoredItemsResponse)]
    public class DeleteMonitoredItemsResponse : IServiceResponse
    {
        public ResponseHeader? ResponseHeader { get; set; }
        public StatusCode[]? Results { get; set; }
        public DiagnosticInfo?[]? DiagnosticInfos { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ResponseHeader>("ResponseHeader", ResponseHeader);
            encoder.WriteStatusCodeArray("Results", Results);
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResponseHeader = decoder.ReadEncodable<ResponseHeader>("ResponseHeader");
            Results = decoder.ReadStatusCodeArray("Results");
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.CreateSubscriptionRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.CreateSubscriptionRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.CreateSubscriptionRequest)]
    public class CreateSubscriptionRequest : IServiceRequest, IRequest<CreateSubscriptionResponse>
    {
        public RequestHeader? RequestHeader { get; set; }
        public Double RequestedPublishingInterval { get; set; }
        public UInt32 RequestedLifetimeCount { get; set; }
        public UInt32 RequestedMaxKeepAliveCount { get; set; }
        public UInt32 MaxNotificationsPerPublish { get; set; }
        public Boolean PublishingEnabled { get; set; }
        public Byte Priority { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<RequestHeader>("RequestHeader", RequestHeader);
            encoder.WriteDouble("RequestedPublishingInterval", RequestedPublishingInterval);
            encoder.WriteUInt32("RequestedLifetimeCount", RequestedLifetimeCount);
            encoder.WriteUInt32("RequestedMaxKeepAliveCount", RequestedMaxKeepAliveCount);
            encoder.WriteUInt32("MaxNotificationsPerPublish", MaxNotificationsPerPublish);
            encoder.WriteBoolean("PublishingEnabled", PublishingEnabled);
            encoder.WriteByte("Priority", Priority);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RequestHeader = decoder.ReadEncodable<RequestHeader>("RequestHeader");
            RequestedPublishingInterval = decoder.ReadDouble("RequestedPublishingInterval");
            RequestedLifetimeCount = decoder.ReadUInt32("RequestedLifetimeCount");
            RequestedMaxKeepAliveCount = decoder.ReadUInt32("RequestedMaxKeepAliveCount");
            MaxNotificationsPerPublish = decoder.ReadUInt32("MaxNotificationsPerPublish");
            PublishingEnabled = decoder.ReadBoolean("PublishingEnabled");
            Priority = decoder.ReadByte("Priority");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.CreateSubscriptionResponse_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.CreateSubscriptionResponse_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.CreateSubscriptionResponse)]
    public class CreateSubscriptionResponse : IServiceResponse
    {
        public ResponseHeader? ResponseHeader { get; set; }
        public UInt32 SubscriptionId { get; set; }
        public Double RevisedPublishingInterval { get; set; }
        public UInt32 RevisedLifetimeCount { get; set; }
        public UInt32 RevisedMaxKeepAliveCount { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ResponseHeader>("ResponseHeader", ResponseHeader);
            encoder.WriteUInt32("SubscriptionId", SubscriptionId);
            encoder.WriteDouble("RevisedPublishingInterval", RevisedPublishingInterval);
            encoder.WriteUInt32("RevisedLifetimeCount", RevisedLifetimeCount);
            encoder.WriteUInt32("RevisedMaxKeepAliveCount", RevisedMaxKeepAliveCount);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResponseHeader = decoder.ReadEncodable<ResponseHeader>("ResponseHeader");
            SubscriptionId = decoder.ReadUInt32("SubscriptionId");
            RevisedPublishingInterval = decoder.ReadDouble("RevisedPublishingInterval");
            RevisedLifetimeCount = decoder.ReadUInt32("RevisedLifetimeCount");
            RevisedMaxKeepAliveCount = decoder.ReadUInt32("RevisedMaxKeepAliveCount");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ModifySubscriptionRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ModifySubscriptionRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ModifySubscriptionRequest)]
    public class ModifySubscriptionRequest : IServiceRequest, IRequest<ModifySubscriptionResponse>
    {
        public RequestHeader? RequestHeader { get; set; }
        public UInt32 SubscriptionId { get; set; }
        public Double RequestedPublishingInterval { get; set; }
        public UInt32 RequestedLifetimeCount { get; set; }
        public UInt32 RequestedMaxKeepAliveCount { get; set; }
        public UInt32 MaxNotificationsPerPublish { get; set; }
        public Byte Priority { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<RequestHeader>("RequestHeader", RequestHeader);
            encoder.WriteUInt32("SubscriptionId", SubscriptionId);
            encoder.WriteDouble("RequestedPublishingInterval", RequestedPublishingInterval);
            encoder.WriteUInt32("RequestedLifetimeCount", RequestedLifetimeCount);
            encoder.WriteUInt32("RequestedMaxKeepAliveCount", RequestedMaxKeepAliveCount);
            encoder.WriteUInt32("MaxNotificationsPerPublish", MaxNotificationsPerPublish);
            encoder.WriteByte("Priority", Priority);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RequestHeader = decoder.ReadEncodable<RequestHeader>("RequestHeader");
            SubscriptionId = decoder.ReadUInt32("SubscriptionId");
            RequestedPublishingInterval = decoder.ReadDouble("RequestedPublishingInterval");
            RequestedLifetimeCount = decoder.ReadUInt32("RequestedLifetimeCount");
            RequestedMaxKeepAliveCount = decoder.ReadUInt32("RequestedMaxKeepAliveCount");
            MaxNotificationsPerPublish = decoder.ReadUInt32("MaxNotificationsPerPublish");
            Priority = decoder.ReadByte("Priority");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ModifySubscriptionResponse_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ModifySubscriptionResponse_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ModifySubscriptionResponse)]
    public class ModifySubscriptionResponse : IServiceResponse
    {
        public ResponseHeader? ResponseHeader { get; set; }
        public Double RevisedPublishingInterval { get; set; }
        public UInt32 RevisedLifetimeCount { get; set; }
        public UInt32 RevisedMaxKeepAliveCount { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ResponseHeader>("ResponseHeader", ResponseHeader);
            encoder.WriteDouble("RevisedPublishingInterval", RevisedPublishingInterval);
            encoder.WriteUInt32("RevisedLifetimeCount", RevisedLifetimeCount);
            encoder.WriteUInt32("RevisedMaxKeepAliveCount", RevisedMaxKeepAliveCount);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResponseHeader = decoder.ReadEncodable<ResponseHeader>("ResponseHeader");
            RevisedPublishingInterval = decoder.ReadDouble("RevisedPublishingInterval");
            RevisedLifetimeCount = decoder.ReadUInt32("RevisedLifetimeCount");
            RevisedMaxKeepAliveCount = decoder.ReadUInt32("RevisedMaxKeepAliveCount");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.SetPublishingModeRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.SetPublishingModeRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.SetPublishingModeRequest)]
    public class SetPublishingModeRequest : IServiceRequest, IRequest<SetPublishingModeResponse>
    {
        public RequestHeader? RequestHeader { get; set; }
        public Boolean PublishingEnabled { get; set; }
        public UInt32[]? SubscriptionIds { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<RequestHeader>("RequestHeader", RequestHeader);
            encoder.WriteBoolean("PublishingEnabled", PublishingEnabled);
            encoder.WriteUInt32Array("SubscriptionIds", SubscriptionIds);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RequestHeader = decoder.ReadEncodable<RequestHeader>("RequestHeader");
            PublishingEnabled = decoder.ReadBoolean("PublishingEnabled");
            SubscriptionIds = decoder.ReadUInt32Array("SubscriptionIds");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.SetPublishingModeResponse_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.SetPublishingModeResponse_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.SetPublishingModeResponse)]
    public class SetPublishingModeResponse : IServiceResponse
    {
        public ResponseHeader? ResponseHeader { get; set; }
        public StatusCode[]? Results { get; set; }
        public DiagnosticInfo?[]? DiagnosticInfos { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ResponseHeader>("ResponseHeader", ResponseHeader);
            encoder.WriteStatusCodeArray("Results", Results);
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResponseHeader = decoder.ReadEncodable<ResponseHeader>("ResponseHeader");
            Results = decoder.ReadStatusCodeArray("Results");
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.NotificationMessage_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.NotificationMessage_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.NotificationMessage)]
    public class NotificationMessage : IEncodable
    {
        public UInt32 SequenceNumber { get; set; }
        public DateTime PublishTime { get; set; }
        public NotificationData?[]? NotificationData { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteUInt32("SequenceNumber", SequenceNumber);
            encoder.WriteDateTime("PublishTime", PublishTime);
            encoder.WriteExtensionObjectArray<NotificationData>("NotificationData", NotificationData);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            SequenceNumber = decoder.ReadUInt32("SequenceNumber");
            PublishTime = decoder.ReadDateTime("PublishTime");
            NotificationData = decoder.ReadExtensionObjectArray<NotificationData>("NotificationData");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.NotificationData_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.NotificationData_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.NotificationData)]
    public class NotificationData : IEncodable
    {
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.StatusChangeNotification_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.StatusChangeNotification_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.StatusChangeNotification)]
    public class StatusChangeNotification : NotificationData, INotification
    {
        public StatusCode Status { get; set; }
        public DiagnosticInfo? DiagnosticInfo { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteStatusCode("Status", Status);
            encoder.WriteDiagnosticInfo("DiagnosticInfo", DiagnosticInfo);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Status = decoder.ReadStatusCode("Status");
            DiagnosticInfo = decoder.ReadDiagnosticInfo("DiagnosticInfo");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.EventNotificationList_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.EventNotificationList_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.EventNotificationList)]
    public class EventNotificationList : NotificationData, INotification
    {
        public EventFieldList?[]? Events { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodableArray<EventFieldList>("Events", Events);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Events = decoder.ReadEncodableArray<EventFieldList>("Events");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.EventFieldList_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.EventFieldList_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.EventFieldList)]
    public class EventFieldList : IEncodable
    {
        public UInt32 ClientHandle { get; set; }
        public Variant[]? EventFields { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteUInt32("ClientHandle", ClientHandle);
            encoder.WriteVariantArray("EventFields", EventFields);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ClientHandle = decoder.ReadUInt32("ClientHandle");
            EventFields = decoder.ReadVariantArray("EventFields");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.DataChangeNotification_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.DataChangeNotification_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.DataChangeNotification)]
    public class DataChangeNotification : NotificationData, INotification
    {
        public MonitoredItemNotification?[]? MonitoredItems { get; set; }
        public DiagnosticInfo?[]? DiagnosticInfos { get; set; }
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodableArray<MonitoredItemNotification>("MonitoredItems", MonitoredItems);
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);
            encoder.PopNamespace();
        }
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            MonitoredItems = decoder.ReadEncodableArray<MonitoredItemNotification>("MonitoredItems");
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.MonitoredItemNotification_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.MonitoredItemNotification_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.MonitoredItemNotification)]
    public class MonitoredItemNotification : IEncodable
    {
        public UInt32 ClientHandle { get; set; }
        public DataValue? Value { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteUInt32("ClientHandle", ClientHandle);
            encoder.WriteDataValue("Value", Value);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ClientHandle = decoder.ReadUInt32("ClientHandle");
            Value = decoder.ReadDataValue("Value");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.SubscriptionAcknowledgement_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.SubscriptionAcknowledgement_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.SubscriptionAcknowledgement)]
    public class SubscriptionAcknowledgement : IEncodable
    {
        public UInt32 SubscriptionId { get; set; }
        public UInt32 SequenceNumber { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteUInt32("SubscriptionId", SubscriptionId);
            encoder.WriteUInt32("SequenceNumber", SequenceNumber);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            SubscriptionId = decoder.ReadUInt32("SubscriptionId");
            SequenceNumber = decoder.ReadUInt32("SequenceNumber");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.PublishRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.PublishRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.PublishRequest)]
    public class PublishRequest : IServiceRequest, IRequest<PublishResponse>
    {
        public RequestHeader? RequestHeader { get; set; }
        public SubscriptionAcknowledgement?[]? SubscriptionAcknowledgements { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<RequestHeader>("RequestHeader", RequestHeader);
            encoder.WriteEncodableArray<SubscriptionAcknowledgement>("SubscriptionAcknowledgements", SubscriptionAcknowledgements);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RequestHeader = decoder.ReadEncodable<RequestHeader>("RequestHeader");
            SubscriptionAcknowledgements = decoder.ReadEncodableArray<SubscriptionAcknowledgement>("SubscriptionAcknowledgements");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.PublishResponse_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.PublishResponse_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.PublishResponse)]
    public class PublishResponse : IServiceResponse
    {
        public ResponseHeader? ResponseHeader { get; set; }
        public UInt32 SubscriptionId { get; set; }
        public UInt32[]? AvailableSequenceNumbers { get; set; }
        public Boolean MoreNotifications { get; set; }
        public NotificationMessage? NotificationMessage { get; set; }
        public StatusCode[]? Results { get; set; }
        public DiagnosticInfo?[]? DiagnosticInfos { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ResponseHeader>("ResponseHeader", ResponseHeader);
            encoder.WriteUInt32("SubscriptionId", SubscriptionId);
            encoder.WriteUInt32Array("AvailableSequenceNumbers", AvailableSequenceNumbers);
            encoder.WriteBoolean("MoreNotifications", MoreNotifications);
            encoder.WriteEncodable<NotificationMessage>("NotificationMessage", NotificationMessage);
            encoder.WriteStatusCodeArray("Results", Results);
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResponseHeader = decoder.ReadEncodable<ResponseHeader>("ResponseHeader");
            SubscriptionId = decoder.ReadUInt32("SubscriptionId");
            AvailableSequenceNumbers = decoder.ReadUInt32Array("AvailableSequenceNumbers");
            MoreNotifications = decoder.ReadBoolean("MoreNotifications");
            NotificationMessage = decoder.ReadEncodable<NotificationMessage>("NotificationMessage");
            Results = decoder.ReadStatusCodeArray("Results");
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.RepublishRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.RepublishRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.RepublishRequest)]
    public class RepublishRequest : IServiceRequest, IRequest<RepublishResponse>
    {
        public RequestHeader? RequestHeader { get; set; }
        public UInt32 SubscriptionId { get; set; }
        public UInt32 RetransmitSequenceNumber { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<RequestHeader>("RequestHeader", RequestHeader);
            encoder.WriteUInt32("SubscriptionId", SubscriptionId);
            encoder.WriteUInt32("RetransmitSequenceNumber", RetransmitSequenceNumber);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RequestHeader = decoder.ReadEncodable<RequestHeader>("RequestHeader");
            SubscriptionId = decoder.ReadUInt32("SubscriptionId");
            RetransmitSequenceNumber = decoder.ReadUInt32("RetransmitSequenceNumber");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.RepublishResponse_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.RepublishResponse_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.RepublishResponse)]
    public class RepublishResponse : IServiceResponse
    {
        public ResponseHeader? ResponseHeader { get; set; }
        public NotificationMessage? NotificationMessage { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ResponseHeader>("ResponseHeader", ResponseHeader);
            encoder.WriteEncodable<NotificationMessage>("NotificationMessage", NotificationMessage);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResponseHeader = decoder.ReadEncodable<ResponseHeader>("ResponseHeader");
            NotificationMessage = decoder.ReadEncodable<NotificationMessage>("NotificationMessage");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.TransferResult_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.TransferResult_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.TransferResult)]
    public class TransferResult : IEncodable
    {
        public StatusCode StatusCode { get; set; }
        public UInt32[]? AvailableSequenceNumbers { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteStatusCode("StatusCode", StatusCode);
            encoder.WriteUInt32Array("AvailableSequenceNumbers", AvailableSequenceNumbers);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            StatusCode = decoder.ReadStatusCode("StatusCode");
            AvailableSequenceNumbers = decoder.ReadUInt32Array("AvailableSequenceNumbers");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.TransferSubscriptionsRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.TransferSubscriptionsRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.TransferSubscriptionsRequest)]
    public class TransferSubscriptionsRequest : IServiceRequest, IRequest<TransferSubscriptionsResponse>
    {
        public RequestHeader? RequestHeader { get; set; }
        public UInt32[]? SubscriptionIds { get; set; }
        public Boolean SendInitialValues { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<RequestHeader>("RequestHeader", RequestHeader);
            encoder.WriteUInt32Array("SubscriptionIds", SubscriptionIds);
            encoder.WriteBoolean("SendInitialValues", SendInitialValues);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RequestHeader = decoder.ReadEncodable<RequestHeader>("RequestHeader");
            SubscriptionIds = decoder.ReadUInt32Array("SubscriptionIds");
            SendInitialValues = decoder.ReadBoolean("SendInitialValues");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.TransferSubscriptionsResponse_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.TransferSubscriptionsResponse_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.TransferSubscriptionsResponse)]
    public class TransferSubscriptionsResponse : IServiceResponse
    {
        public ResponseHeader? ResponseHeader { get; set; }
        public TransferResult?[]? Results { get; set; }
        public DiagnosticInfo?[]? DiagnosticInfos { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ResponseHeader>("ResponseHeader", ResponseHeader);
            encoder.WriteEncodableArray<TransferResult>("Results", Results);
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResponseHeader = decoder.ReadEncodable<ResponseHeader>("ResponseHeader");
            Results = decoder.ReadEncodableArray<TransferResult>("Results");
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.DeleteSubscriptionsRequest_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.DeleteSubscriptionsRequest_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.DeleteSubscriptionsRequest)]
    public class DeleteSubscriptionsRequest : IServiceRequest, IRequest<DeleteSubscriptionsResponse>
    {
        public RequestHeader? RequestHeader { get; set; }
        public UInt32[]? SubscriptionIds { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<RequestHeader>("RequestHeader", RequestHeader);
            encoder.WriteUInt32Array("SubscriptionIds", SubscriptionIds);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            RequestHeader = decoder.ReadEncodable<RequestHeader>("RequestHeader");
            SubscriptionIds = decoder.ReadUInt32Array("SubscriptionIds");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.DeleteSubscriptionsResponse_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.DeleteSubscriptionsResponse_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.DeleteSubscriptionsResponse)]
    public class DeleteSubscriptionsResponse : IServiceResponse
    {
        public ResponseHeader? ResponseHeader { get; set; }
        public StatusCode[]? Results { get; set; }
        public DiagnosticInfo?[]? DiagnosticInfos { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<ResponseHeader>("ResponseHeader", ResponseHeader);
            encoder.WriteStatusCodeArray("Results", Results);
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ResponseHeader = decoder.ReadEncodable<ResponseHeader>("ResponseHeader");
            Results = decoder.ReadStatusCodeArray("Results");
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.BuildInfo_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.BuildInfo_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.BuildInfo)]
    public class BuildInfo : IEncodable
    {
        public String? ProductUri { get; set; }
        public String? ManufacturerName { get; set; }
        public String? ProductName { get; set; }
        public String? SoftwareVersion { get; set; }
        public String? BuildNumber { get; set; }
        public DateTime BuildDate { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteString("ProductUri", ProductUri);
            encoder.WriteString("ManufacturerName", ManufacturerName);
            encoder.WriteString("ProductName", ProductName);
            encoder.WriteString("SoftwareVersion", SoftwareVersion);
            encoder.WriteString("BuildNumber", BuildNumber);
            encoder.WriteDateTime("BuildDate", BuildDate);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ProductUri = decoder.ReadString("ProductUri");
            ManufacturerName = decoder.ReadString("ManufacturerName");
            ProductName = decoder.ReadString("ProductName");
            SoftwareVersion = decoder.ReadString("SoftwareVersion");
            BuildNumber = decoder.ReadString("BuildNumber");
            BuildDate = decoder.ReadDateTime("BuildDate");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.RedundantServerDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.RedundantServerDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.RedundantServerDataType)]
    public class RedundantServerDataType : IEncodable
    {
        public String? ServerId { get; set; }
        public Byte ServiceLevel { get; set; }
        public ServerState ServerState { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteString("ServerId", ServerId);
            encoder.WriteByte("ServiceLevel", ServiceLevel);
            encoder.WriteEnumeration<ServerState>("ServerState", ServerState);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ServerId = decoder.ReadString("ServerId");
            ServiceLevel = decoder.ReadByte("ServiceLevel");
            ServerState = decoder.ReadEnumeration<ServerState>("ServerState");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.EndpointUrlListDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.EndpointUrlListDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.EndpointUrlListDataType)]
    public class EndpointUrlListDataType : IEncodable
    {
        public String?[]? EndpointUrlList { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteStringArray("EndpointUrlList", EndpointUrlList);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            EndpointUrlList = decoder.ReadStringArray("EndpointUrlList");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.NetworkGroupDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.NetworkGroupDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.NetworkGroupDataType)]
    public class NetworkGroupDataType : IEncodable
    {
        public String? ServerUri { get; set; }
        public EndpointUrlListDataType?[]? NetworkPaths { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteString("ServerUri", ServerUri);
            encoder.WriteEncodableArray<EndpointUrlListDataType>("NetworkPaths", NetworkPaths);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ServerUri = decoder.ReadString("ServerUri");
            NetworkPaths = decoder.ReadEncodableArray<EndpointUrlListDataType>("NetworkPaths");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.SamplingIntervalDiagnosticsDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.SamplingIntervalDiagnosticsDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.SamplingIntervalDiagnosticsDataType)]
    public class SamplingIntervalDiagnosticsDataType : IEncodable
    {
        public Double SamplingInterval { get; set; }
        public UInt32 MonitoredItemCount { get; set; }
        public UInt32 MaxMonitoredItemCount { get; set; }
        public UInt32 DisabledMonitoredItemCount { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteDouble("SamplingInterval", SamplingInterval);
            encoder.WriteUInt32("MonitoredItemCount", MonitoredItemCount);
            encoder.WriteUInt32("MaxMonitoredItemCount", MaxMonitoredItemCount);
            encoder.WriteUInt32("DisabledMonitoredItemCount", DisabledMonitoredItemCount);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            SamplingInterval = decoder.ReadDouble("SamplingInterval");
            MonitoredItemCount = decoder.ReadUInt32("MonitoredItemCount");
            MaxMonitoredItemCount = decoder.ReadUInt32("MaxMonitoredItemCount");
            DisabledMonitoredItemCount = decoder.ReadUInt32("DisabledMonitoredItemCount");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ServerDiagnosticsSummaryDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ServerDiagnosticsSummaryDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ServerDiagnosticsSummaryDataType)]
    public class ServerDiagnosticsSummaryDataType : IEncodable
    {
        public UInt32 ServerViewCount { get; set; }
        public UInt32 CurrentSessionCount { get; set; }
        public UInt32 CumulatedSessionCount { get; set; }
        public UInt32 SecurityRejectedSessionCount { get; set; }
        public UInt32 RejectedSessionCount { get; set; }
        public UInt32 SessionTimeoutCount { get; set; }
        public UInt32 SessionAbortCount { get; set; }
        public UInt32 CurrentSubscriptionCount { get; set; }
        public UInt32 CumulatedSubscriptionCount { get; set; }
        public UInt32 PublishingIntervalCount { get; set; }
        public UInt32 SecurityRejectedRequestsCount { get; set; }
        public UInt32 RejectedRequestsCount { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteUInt32("ServerViewCount", ServerViewCount);
            encoder.WriteUInt32("CurrentSessionCount", CurrentSessionCount);
            encoder.WriteUInt32("CumulatedSessionCount", CumulatedSessionCount);
            encoder.WriteUInt32("SecurityRejectedSessionCount", SecurityRejectedSessionCount);
            encoder.WriteUInt32("RejectedSessionCount", RejectedSessionCount);
            encoder.WriteUInt32("SessionTimeoutCount", SessionTimeoutCount);
            encoder.WriteUInt32("SessionAbortCount", SessionAbortCount);
            encoder.WriteUInt32("CurrentSubscriptionCount", CurrentSubscriptionCount);
            encoder.WriteUInt32("CumulatedSubscriptionCount", CumulatedSubscriptionCount);
            encoder.WriteUInt32("PublishingIntervalCount", PublishingIntervalCount);
            encoder.WriteUInt32("SecurityRejectedRequestsCount", SecurityRejectedRequestsCount);
            encoder.WriteUInt32("RejectedRequestsCount", RejectedRequestsCount);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            ServerViewCount = decoder.ReadUInt32("ServerViewCount");
            CurrentSessionCount = decoder.ReadUInt32("CurrentSessionCount");
            CumulatedSessionCount = decoder.ReadUInt32("CumulatedSessionCount");
            SecurityRejectedSessionCount = decoder.ReadUInt32("SecurityRejectedSessionCount");
            RejectedSessionCount = decoder.ReadUInt32("RejectedSessionCount");
            SessionTimeoutCount = decoder.ReadUInt32("SessionTimeoutCount");
            SessionAbortCount = decoder.ReadUInt32("SessionAbortCount");
            CurrentSubscriptionCount = decoder.ReadUInt32("CurrentSubscriptionCount");
            CumulatedSubscriptionCount = decoder.ReadUInt32("CumulatedSubscriptionCount");
            PublishingIntervalCount = decoder.ReadUInt32("PublishingIntervalCount");
            SecurityRejectedRequestsCount = decoder.ReadUInt32("SecurityRejectedRequestsCount");
            RejectedRequestsCount = decoder.ReadUInt32("RejectedRequestsCount");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ServerStatusDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ServerStatusDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ServerStatusDataType)]
    public class ServerStatusDataType : IEncodable
    {
        public DateTime StartTime { get; set; }
        public DateTime CurrentTime { get; set; }
        public ServerState State { get; set; }
        public BuildInfo? BuildInfo { get; set; }
        public UInt32 SecondsTillShutdown { get; set; }
        public LocalizedText? ShutdownReason { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteDateTime("StartTime", StartTime);
            encoder.WriteDateTime("CurrentTime", CurrentTime);
            encoder.WriteEnumeration<ServerState>("State", State);
            encoder.WriteEncodable<BuildInfo>("BuildInfo", BuildInfo);
            encoder.WriteUInt32("SecondsTillShutdown", SecondsTillShutdown);
            encoder.WriteLocalizedText("ShutdownReason", ShutdownReason);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            StartTime = decoder.ReadDateTime("StartTime");
            CurrentTime = decoder.ReadDateTime("CurrentTime");
            State = decoder.ReadEnumeration<ServerState>("State");
            BuildInfo = decoder.ReadEncodable<BuildInfo>("BuildInfo");
            SecondsTillShutdown = decoder.ReadUInt32("SecondsTillShutdown");
            ShutdownReason = decoder.ReadLocalizedText("ShutdownReason");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.SessionDiagnosticsDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.SessionDiagnosticsDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.SessionDiagnosticsDataType)]
    public class SessionDiagnosticsDataType : IEncodable
    {
        public NodeId? SessionId { get; set; }
        public String? SessionName { get; set; }
        public ApplicationDescription? ClientDescription { get; set; }
        public String? ServerUri { get; set; }
        public String? EndpointUrl { get; set; }
        public String?[]? LocaleIds { get; set; }
        public Double ActualSessionTimeout { get; set; }
        public UInt32 MaxResponseMessageSize { get; set; }
        public DateTime ClientConnectionTime { get; set; }
        public DateTime ClientLastContactTime { get; set; }
        public UInt32 CurrentSubscriptionsCount { get; set; }
        public UInt32 CurrentMonitoredItemsCount { get; set; }
        public UInt32 CurrentPublishRequestsInQueue { get; set; }
        public ServiceCounterDataType? TotalRequestCount { get; set; }
        public UInt32 UnauthorizedRequestCount { get; set; }
        public ServiceCounterDataType? ReadCount { get; set; }
        public ServiceCounterDataType? HistoryReadCount { get; set; }
        public ServiceCounterDataType? WriteCount { get; set; }
        public ServiceCounterDataType? HistoryUpdateCount { get; set; }
        public ServiceCounterDataType? CallCount { get; set; }
        public ServiceCounterDataType? CreateMonitoredItemsCount { get; set; }
        public ServiceCounterDataType? ModifyMonitoredItemsCount { get; set; }
        public ServiceCounterDataType? SetMonitoringModeCount { get; set; }
        public ServiceCounterDataType? SetTriggeringCount { get; set; }
        public ServiceCounterDataType? DeleteMonitoredItemsCount { get; set; }
        public ServiceCounterDataType? CreateSubscriptionCount { get; set; }
        public ServiceCounterDataType? ModifySubscriptionCount { get; set; }
        public ServiceCounterDataType? SetPublishingModeCount { get; set; }
        public ServiceCounterDataType? PublishCount { get; set; }
        public ServiceCounterDataType? RepublishCount { get; set; }
        public ServiceCounterDataType? TransferSubscriptionsCount { get; set; }
        public ServiceCounterDataType? DeleteSubscriptionsCount { get; set; }
        public ServiceCounterDataType? AddNodesCount { get; set; }
        public ServiceCounterDataType? AddReferencesCount { get; set; }
        public ServiceCounterDataType? DeleteNodesCount { get; set; }
        public ServiceCounterDataType? DeleteReferencesCount { get; set; }
        public ServiceCounterDataType? BrowseCount { get; set; }
        public ServiceCounterDataType? BrowseNextCount { get; set; }
        public ServiceCounterDataType? TranslateBrowsePathsToNodeIdsCount { get; set; }
        public ServiceCounterDataType? QueryFirstCount { get; set; }
        public ServiceCounterDataType? QueryNextCount { get; set; }
        public ServiceCounterDataType? RegisterNodesCount { get; set; }
        public ServiceCounterDataType? UnregisterNodesCount { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteNodeId("SessionId", SessionId);
            encoder.WriteString("SessionName", SessionName);
            encoder.WriteEncodable<ApplicationDescription>("ClientDescription", ClientDescription);
            encoder.WriteString("ServerUri", ServerUri);
            encoder.WriteString("EndpointUrl", EndpointUrl);
            encoder.WriteStringArray("LocaleIds", LocaleIds);
            encoder.WriteDouble("ActualSessionTimeout", ActualSessionTimeout);
            encoder.WriteUInt32("MaxResponseMessageSize", MaxResponseMessageSize);
            encoder.WriteDateTime("ClientConnectionTime", ClientConnectionTime);
            encoder.WriteDateTime("ClientLastContactTime", ClientLastContactTime);
            encoder.WriteUInt32("CurrentSubscriptionsCount", CurrentSubscriptionsCount);
            encoder.WriteUInt32("CurrentMonitoredItemsCount", CurrentMonitoredItemsCount);
            encoder.WriteUInt32("CurrentPublishRequestsInQueue", CurrentPublishRequestsInQueue);
            encoder.WriteEncodable<ServiceCounterDataType>("TotalRequestCount", TotalRequestCount);
            encoder.WriteUInt32("UnauthorizedRequestCount", UnauthorizedRequestCount);
            encoder.WriteEncodable<ServiceCounterDataType>("ReadCount", ReadCount);
            encoder.WriteEncodable<ServiceCounterDataType>("HistoryReadCount", HistoryReadCount);
            encoder.WriteEncodable<ServiceCounterDataType>("WriteCount", WriteCount);
            encoder.WriteEncodable<ServiceCounterDataType>("HistoryUpdateCount", HistoryUpdateCount);
            encoder.WriteEncodable<ServiceCounterDataType>("CallCount", CallCount);
            encoder.WriteEncodable<ServiceCounterDataType>("CreateMonitoredItemsCount", CreateMonitoredItemsCount);
            encoder.WriteEncodable<ServiceCounterDataType>("ModifyMonitoredItemsCount", ModifyMonitoredItemsCount);
            encoder.WriteEncodable<ServiceCounterDataType>("SetMonitoringModeCount", SetMonitoringModeCount);
            encoder.WriteEncodable<ServiceCounterDataType>("SetTriggeringCount", SetTriggeringCount);
            encoder.WriteEncodable<ServiceCounterDataType>("DeleteMonitoredItemsCount", DeleteMonitoredItemsCount);
            encoder.WriteEncodable<ServiceCounterDataType>("CreateSubscriptionCount", CreateSubscriptionCount);
            encoder.WriteEncodable<ServiceCounterDataType>("ModifySubscriptionCount", ModifySubscriptionCount);
            encoder.WriteEncodable<ServiceCounterDataType>("SetPublishingModeCount", SetPublishingModeCount);
            encoder.WriteEncodable<ServiceCounterDataType>("PublishCount", PublishCount);
            encoder.WriteEncodable<ServiceCounterDataType>("RepublishCount", RepublishCount);
            encoder.WriteEncodable<ServiceCounterDataType>("TransferSubscriptionsCount", TransferSubscriptionsCount);
            encoder.WriteEncodable<ServiceCounterDataType>("DeleteSubscriptionsCount", DeleteSubscriptionsCount);
            encoder.WriteEncodable<ServiceCounterDataType>("AddNodesCount", AddNodesCount);
            encoder.WriteEncodable<ServiceCounterDataType>("AddReferencesCount", AddReferencesCount);
            encoder.WriteEncodable<ServiceCounterDataType>("DeleteNodesCount", DeleteNodesCount);
            encoder.WriteEncodable<ServiceCounterDataType>("DeleteReferencesCount", DeleteReferencesCount);
            encoder.WriteEncodable<ServiceCounterDataType>("BrowseCount", BrowseCount);
            encoder.WriteEncodable<ServiceCounterDataType>("BrowseNextCount", BrowseNextCount);
            encoder.WriteEncodable<ServiceCounterDataType>("TranslateBrowsePathsToNodeIdsCount", TranslateBrowsePathsToNodeIdsCount);
            encoder.WriteEncodable<ServiceCounterDataType>("QueryFirstCount", QueryFirstCount);
            encoder.WriteEncodable<ServiceCounterDataType>("QueryNextCount", QueryNextCount);
            encoder.WriteEncodable<ServiceCounterDataType>("RegisterNodesCount", RegisterNodesCount);
            encoder.WriteEncodable<ServiceCounterDataType>("UnregisterNodesCount", UnregisterNodesCount);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            SessionId = decoder.ReadNodeId("SessionId");
            SessionName = decoder.ReadString("SessionName");
            ClientDescription = decoder.ReadEncodable<ApplicationDescription>("ClientDescription");
            ServerUri = decoder.ReadString("ServerUri");
            EndpointUrl = decoder.ReadString("EndpointUrl");
            LocaleIds = decoder.ReadStringArray("LocaleIds");
            ActualSessionTimeout = decoder.ReadDouble("ActualSessionTimeout");
            MaxResponseMessageSize = decoder.ReadUInt32("MaxResponseMessageSize");
            ClientConnectionTime = decoder.ReadDateTime("ClientConnectionTime");
            ClientLastContactTime = decoder.ReadDateTime("ClientLastContactTime");
            CurrentSubscriptionsCount = decoder.ReadUInt32("CurrentSubscriptionsCount");
            CurrentMonitoredItemsCount = decoder.ReadUInt32("CurrentMonitoredItemsCount");
            CurrentPublishRequestsInQueue = decoder.ReadUInt32("CurrentPublishRequestsInQueue");
            TotalRequestCount = decoder.ReadEncodable<ServiceCounterDataType>("TotalRequestCount");
            UnauthorizedRequestCount = decoder.ReadUInt32("UnauthorizedRequestCount");
            ReadCount = decoder.ReadEncodable<ServiceCounterDataType>("ReadCount");
            HistoryReadCount = decoder.ReadEncodable<ServiceCounterDataType>("HistoryReadCount");
            WriteCount = decoder.ReadEncodable<ServiceCounterDataType>("WriteCount");
            HistoryUpdateCount = decoder.ReadEncodable<ServiceCounterDataType>("HistoryUpdateCount");
            CallCount = decoder.ReadEncodable<ServiceCounterDataType>("CallCount");
            CreateMonitoredItemsCount = decoder.ReadEncodable<ServiceCounterDataType>("CreateMonitoredItemsCount");
            ModifyMonitoredItemsCount = decoder.ReadEncodable<ServiceCounterDataType>("ModifyMonitoredItemsCount");
            SetMonitoringModeCount = decoder.ReadEncodable<ServiceCounterDataType>("SetMonitoringModeCount");
            SetTriggeringCount = decoder.ReadEncodable<ServiceCounterDataType>("SetTriggeringCount");
            DeleteMonitoredItemsCount = decoder.ReadEncodable<ServiceCounterDataType>("DeleteMonitoredItemsCount");
            CreateSubscriptionCount = decoder.ReadEncodable<ServiceCounterDataType>("CreateSubscriptionCount");
            ModifySubscriptionCount = decoder.ReadEncodable<ServiceCounterDataType>("ModifySubscriptionCount");
            SetPublishingModeCount = decoder.ReadEncodable<ServiceCounterDataType>("SetPublishingModeCount");
            PublishCount = decoder.ReadEncodable<ServiceCounterDataType>("PublishCount");
            RepublishCount = decoder.ReadEncodable<ServiceCounterDataType>("RepublishCount");
            TransferSubscriptionsCount = decoder.ReadEncodable<ServiceCounterDataType>("TransferSubscriptionsCount");
            DeleteSubscriptionsCount = decoder.ReadEncodable<ServiceCounterDataType>("DeleteSubscriptionsCount");
            AddNodesCount = decoder.ReadEncodable<ServiceCounterDataType>("AddNodesCount");
            AddReferencesCount = decoder.ReadEncodable<ServiceCounterDataType>("AddReferencesCount");
            DeleteNodesCount = decoder.ReadEncodable<ServiceCounterDataType>("DeleteNodesCount");
            DeleteReferencesCount = decoder.ReadEncodable<ServiceCounterDataType>("DeleteReferencesCount");
            BrowseCount = decoder.ReadEncodable<ServiceCounterDataType>("BrowseCount");
            BrowseNextCount = decoder.ReadEncodable<ServiceCounterDataType>("BrowseNextCount");
            TranslateBrowsePathsToNodeIdsCount = decoder.ReadEncodable<ServiceCounterDataType>("TranslateBrowsePathsToNodeIdsCount");
            QueryFirstCount = decoder.ReadEncodable<ServiceCounterDataType>("QueryFirstCount");
            QueryNextCount = decoder.ReadEncodable<ServiceCounterDataType>("QueryNextCount");
            RegisterNodesCount = decoder.ReadEncodable<ServiceCounterDataType>("RegisterNodesCount");
            UnregisterNodesCount = decoder.ReadEncodable<ServiceCounterDataType>("UnregisterNodesCount");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ServiceCounterDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ServiceCounterDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ServiceCounterDataType)]
    public class ServiceCounterDataType : IEncodable
    {
        public UInt32 TotalCount { get; set; }
        public UInt32 ErrorCount { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteUInt32("TotalCount", TotalCount);
            encoder.WriteUInt32("ErrorCount", ErrorCount);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            TotalCount = decoder.ReadUInt32("TotalCount");
            ErrorCount = decoder.ReadUInt32("ErrorCount");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.SessionSecurityDiagnosticsDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.SessionSecurityDiagnosticsDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.SessionSecurityDiagnosticsDataType)]
    public class SessionSecurityDiagnosticsDataType : IEncodable
    {
        public NodeId? SessionId { get; set; }
        public String? ClientUserIdOfSession { get; set; }
        public String?[]? ClientUserIdHistory { get; set; }
        public String? AuthenticationMechanism { get; set; }
        public String? Encoding { get; set; }
        public String? TransportProtocol { get; set; }
        public MessageSecurityMode SecurityMode { get; set; }
        public String? SecurityPolicyUri { get; set; }
        public Byte[]? ClientCertificate { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteNodeId("SessionId", SessionId);
            encoder.WriteString("ClientUserIdOfSession", ClientUserIdOfSession);
            encoder.WriteStringArray("ClientUserIdHistory", ClientUserIdHistory);
            encoder.WriteString("AuthenticationMechanism", AuthenticationMechanism);
            encoder.WriteString("Encoding", Encoding);
            encoder.WriteString("TransportProtocol", TransportProtocol);
            encoder.WriteEnumeration<MessageSecurityMode>("SecurityMode", SecurityMode);
            encoder.WriteString("SecurityPolicyUri", SecurityPolicyUri);
            encoder.WriteByteString("ClientCertificate", ClientCertificate);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            SessionId = decoder.ReadNodeId("SessionId");
            ClientUserIdOfSession = decoder.ReadString("ClientUserIdOfSession");
            ClientUserIdHistory = decoder.ReadStringArray("ClientUserIdHistory");
            AuthenticationMechanism = decoder.ReadString("AuthenticationMechanism");
            Encoding = decoder.ReadString("Encoding");
            TransportProtocol = decoder.ReadString("TransportProtocol");
            SecurityMode = decoder.ReadEnumeration<MessageSecurityMode>("SecurityMode");
            SecurityPolicyUri = decoder.ReadString("SecurityPolicyUri");
            ClientCertificate = decoder.ReadByteString("ClientCertificate");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.StatusResult_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.StatusResult_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.StatusResult)]
    public class StatusResult : IEncodable
    {
        public StatusCode StatusCode { get; set; }
        public DiagnosticInfo? DiagnosticInfo { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteStatusCode("StatusCode", StatusCode);
            encoder.WriteDiagnosticInfo("DiagnosticInfo", DiagnosticInfo);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            StatusCode = decoder.ReadStatusCode("StatusCode");
            DiagnosticInfo = decoder.ReadDiagnosticInfo("DiagnosticInfo");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.SubscriptionDiagnosticsDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.SubscriptionDiagnosticsDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.SubscriptionDiagnosticsDataType)]
    public class SubscriptionDiagnosticsDataType : IEncodable
    {
        public NodeId? SessionId { get; set; }
        public UInt32 SubscriptionId { get; set; }
        public Byte Priority { get; set; }
        public Double PublishingInterval { get; set; }
        public UInt32 MaxKeepAliveCount { get; set; }
        public UInt32 MaxLifetimeCount { get; set; }
        public UInt32 MaxNotificationsPerPublish { get; set; }
        public Boolean PublishingEnabled { get; set; }
        public UInt32 ModifyCount { get; set; }
        public UInt32 EnableCount { get; set; }
        public UInt32 DisableCount { get; set; }
        public UInt32 RepublishRequestCount { get; set; }
        public UInt32 RepublishMessageRequestCount { get; set; }
        public UInt32 RepublishMessageCount { get; set; }
        public UInt32 TransferRequestCount { get; set; }
        public UInt32 TransferredToAltClientCount { get; set; }
        public UInt32 TransferredToSameClientCount { get; set; }
        public UInt32 PublishRequestCount { get; set; }
        public UInt32 DataChangeNotificationsCount { get; set; }
        public UInt32 EventNotificationsCount { get; set; }
        public UInt32 NotificationsCount { get; set; }
        public UInt32 LatePublishRequestCount { get; set; }
        public UInt32 CurrentKeepAliveCount { get; set; }
        public UInt32 CurrentLifetimeCount { get; set; }
        public UInt32 UnacknowledgedMessageCount { get; set; }
        public UInt32 DiscardedMessageCount { get; set; }
        public UInt32 MonitoredItemCount { get; set; }
        public UInt32 DisabledMonitoredItemCount { get; set; }
        public UInt32 MonitoringQueueOverflowCount { get; set; }
        public UInt32 NextSequenceNumber { get; set; }
        public UInt32 EventQueueOverFlowCount { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteNodeId("SessionId", SessionId);
            encoder.WriteUInt32("SubscriptionId", SubscriptionId);
            encoder.WriteByte("Priority", Priority);
            encoder.WriteDouble("PublishingInterval", PublishingInterval);
            encoder.WriteUInt32("MaxKeepAliveCount", MaxKeepAliveCount);
            encoder.WriteUInt32("MaxLifetimeCount", MaxLifetimeCount);
            encoder.WriteUInt32("MaxNotificationsPerPublish", MaxNotificationsPerPublish);
            encoder.WriteBoolean("PublishingEnabled", PublishingEnabled);
            encoder.WriteUInt32("ModifyCount", ModifyCount);
            encoder.WriteUInt32("EnableCount", EnableCount);
            encoder.WriteUInt32("DisableCount", DisableCount);
            encoder.WriteUInt32("RepublishRequestCount", RepublishRequestCount);
            encoder.WriteUInt32("RepublishMessageRequestCount", RepublishMessageRequestCount);
            encoder.WriteUInt32("RepublishMessageCount", RepublishMessageCount);
            encoder.WriteUInt32("TransferRequestCount", TransferRequestCount);
            encoder.WriteUInt32("TransferredToAltClientCount", TransferredToAltClientCount);
            encoder.WriteUInt32("TransferredToSameClientCount", TransferredToSameClientCount);
            encoder.WriteUInt32("PublishRequestCount", PublishRequestCount);
            encoder.WriteUInt32("DataChangeNotificationsCount", DataChangeNotificationsCount);
            encoder.WriteUInt32("EventNotificationsCount", EventNotificationsCount);
            encoder.WriteUInt32("NotificationsCount", NotificationsCount);
            encoder.WriteUInt32("LatePublishRequestCount", LatePublishRequestCount);
            encoder.WriteUInt32("CurrentKeepAliveCount", CurrentKeepAliveCount);
            encoder.WriteUInt32("CurrentLifetimeCount", CurrentLifetimeCount);
            encoder.WriteUInt32("UnacknowledgedMessageCount", UnacknowledgedMessageCount);
            encoder.WriteUInt32("DiscardedMessageCount", DiscardedMessageCount);
            encoder.WriteUInt32("MonitoredItemCount", MonitoredItemCount);
            encoder.WriteUInt32("DisabledMonitoredItemCount", DisabledMonitoredItemCount);
            encoder.WriteUInt32("MonitoringQueueOverflowCount", MonitoringQueueOverflowCount);
            encoder.WriteUInt32("NextSequenceNumber", NextSequenceNumber);
            encoder.WriteUInt32("EventQueueOverFlowCount", EventQueueOverFlowCount);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            SessionId = decoder.ReadNodeId("SessionId");
            SubscriptionId = decoder.ReadUInt32("SubscriptionId");
            Priority = decoder.ReadByte("Priority");
            PublishingInterval = decoder.ReadDouble("PublishingInterval");
            MaxKeepAliveCount = decoder.ReadUInt32("MaxKeepAliveCount");
            MaxLifetimeCount = decoder.ReadUInt32("MaxLifetimeCount");
            MaxNotificationsPerPublish = decoder.ReadUInt32("MaxNotificationsPerPublish");
            PublishingEnabled = decoder.ReadBoolean("PublishingEnabled");
            ModifyCount = decoder.ReadUInt32("ModifyCount");
            EnableCount = decoder.ReadUInt32("EnableCount");
            DisableCount = decoder.ReadUInt32("DisableCount");
            RepublishRequestCount = decoder.ReadUInt32("RepublishRequestCount");
            RepublishMessageRequestCount = decoder.ReadUInt32("RepublishMessageRequestCount");
            RepublishMessageCount = decoder.ReadUInt32("RepublishMessageCount");
            TransferRequestCount = decoder.ReadUInt32("TransferRequestCount");
            TransferredToAltClientCount = decoder.ReadUInt32("TransferredToAltClientCount");
            TransferredToSameClientCount = decoder.ReadUInt32("TransferredToSameClientCount");
            PublishRequestCount = decoder.ReadUInt32("PublishRequestCount");
            DataChangeNotificationsCount = decoder.ReadUInt32("DataChangeNotificationsCount");
            EventNotificationsCount = decoder.ReadUInt32("EventNotificationsCount");
            NotificationsCount = decoder.ReadUInt32("NotificationsCount");
            LatePublishRequestCount = decoder.ReadUInt32("LatePublishRequestCount");
            CurrentKeepAliveCount = decoder.ReadUInt32("CurrentKeepAliveCount");
            CurrentLifetimeCount = decoder.ReadUInt32("CurrentLifetimeCount");
            UnacknowledgedMessageCount = decoder.ReadUInt32("UnacknowledgedMessageCount");
            DiscardedMessageCount = decoder.ReadUInt32("DiscardedMessageCount");
            MonitoredItemCount = decoder.ReadUInt32("MonitoredItemCount");
            DisabledMonitoredItemCount = decoder.ReadUInt32("DisabledMonitoredItemCount");
            MonitoringQueueOverflowCount = decoder.ReadUInt32("MonitoringQueueOverflowCount");
            NextSequenceNumber = decoder.ReadUInt32("NextSequenceNumber");
            EventQueueOverFlowCount = decoder.ReadUInt32("EventQueueOverFlowCount");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ModelChangeStructureDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ModelChangeStructureDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ModelChangeStructureDataType)]
    public class ModelChangeStructureDataType : IEncodable
    {
        public NodeId? Affected { get; set; }
        public NodeId? AffectedType { get; set; }
        public Byte Verb { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteNodeId("Affected", Affected);
            encoder.WriteNodeId("AffectedType", AffectedType);
            encoder.WriteByte("Verb", Verb);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Affected = decoder.ReadNodeId("Affected");
            AffectedType = decoder.ReadNodeId("AffectedType");
            Verb = decoder.ReadByte("Verb");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.SemanticChangeStructureDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.SemanticChangeStructureDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.SemanticChangeStructureDataType)]
    public class SemanticChangeStructureDataType : IEncodable
    {
        public NodeId? Affected { get; set; }
        public NodeId? AffectedType { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteNodeId("Affected", Affected);
            encoder.WriteNodeId("AffectedType", AffectedType);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Affected = decoder.ReadNodeId("Affected");
            AffectedType = decoder.ReadNodeId("AffectedType");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.Range_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.Range_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.Range)]
    public class Range : IEncodable
    {
        public Double Low { get; set; }
        public Double High { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteDouble("Low", Low);
            encoder.WriteDouble("High", High);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Low = decoder.ReadDouble("Low");
            High = decoder.ReadDouble("High");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.EUInformation_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.EUInformation_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.EUInformation)]
    public class EUInformation : IEncodable
    {
        public String? NamespaceUri { get; set; }
        public Int32 UnitId { get; set; }
        public LocalizedText? DisplayName { get; set; }
        public LocalizedText? Description { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteString("NamespaceUri", NamespaceUri);
            encoder.WriteInt32("UnitId", UnitId);
            encoder.WriteLocalizedText("DisplayName", DisplayName);
            encoder.WriteLocalizedText("Description", Description);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            NamespaceUri = decoder.ReadString("NamespaceUri");
            UnitId = decoder.ReadInt32("UnitId");
            DisplayName = decoder.ReadLocalizedText("DisplayName");
            Description = decoder.ReadLocalizedText("Description");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ComplexNumberType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ComplexNumberType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ComplexNumberType)]
    public class ComplexNumberType : IEncodable
    {
        public Single Real { get; set; }
        public Single Imaginary { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteFloat("Real", Real);
            encoder.WriteFloat("Imaginary", Imaginary);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Real = decoder.ReadFloat("Real");
            Imaginary = decoder.ReadFloat("Imaginary");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.DoubleComplexNumberType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.DoubleComplexNumberType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.DoubleComplexNumberType)]
    public class DoubleComplexNumberType : IEncodable
    {
        public Double Real { get; set; }
        public Double Imaginary { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteDouble("Real", Real);
            encoder.WriteDouble("Imaginary", Imaginary);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Real = decoder.ReadDouble("Real");
            Imaginary = decoder.ReadDouble("Imaginary");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.AxisInformation_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.AxisInformation_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.AxisInformation)]
    public class AxisInformation : IEncodable
    {
        public EUInformation? EngineeringUnits { get; set; }
        public Range? EURange { get; set; }
        public LocalizedText? Title { get; set; }
        public AxisScaleEnumeration AxisScaleType { get; set; }
        public Double[]? AxisSteps { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteEncodable<EUInformation>("EngineeringUnits", EngineeringUnits);
            encoder.WriteEncodable<Range>("EURange", EURange);
            encoder.WriteLocalizedText("Title", Title);
            encoder.WriteEnumeration<AxisScaleEnumeration>("AxisScaleType", AxisScaleType);
            encoder.WriteDoubleArray("AxisSteps", AxisSteps);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            EngineeringUnits = decoder.ReadEncodable<EUInformation>("EngineeringUnits");
            EURange = decoder.ReadEncodable<Range>("EURange");
            Title = decoder.ReadLocalizedText("Title");
            AxisScaleType = decoder.ReadEnumeration<AxisScaleEnumeration>("AxisScaleType");
            AxisSteps = decoder.ReadDoubleArray("AxisSteps");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.XVType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.XVType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.XVType)]
    public class XVType : IEncodable
    {
        public Double X { get; set; }
        public Single Value { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteDouble("X", X);
            encoder.WriteFloat("Value", Value);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            X = decoder.ReadDouble("X");
            Value = decoder.ReadFloat("Value");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ProgramDiagnosticDataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ProgramDiagnosticDataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ProgramDiagnosticDataType)]
    public class ProgramDiagnosticDataType : IEncodable
    {
        public NodeId? CreateSessionId { get; set; }
        public String? CreateClientName { get; set; }
        public DateTime InvocationCreationTime { get; set; }
        public DateTime LastTransitionTime { get; set; }
        public String? LastMethodCall { get; set; }
        public NodeId? LastMethodSessionId { get; set; }
        public Argument?[]? LastMethodInputArguments { get; set; }
        public Argument?[]? LastMethodOutputArguments { get; set; }
        public DateTime LastMethodCallTime { get; set; }
        public StatusResult? LastMethodReturnStatus { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteNodeId("CreateSessionId", CreateSessionId);
            encoder.WriteString("CreateClientName", CreateClientName);
            encoder.WriteDateTime("InvocationCreationTime", InvocationCreationTime);
            encoder.WriteDateTime("LastTransitionTime", LastTransitionTime);
            encoder.WriteString("LastMethodCall", LastMethodCall);
            encoder.WriteNodeId("LastMethodSessionId", LastMethodSessionId);
            encoder.WriteEncodableArray<Argument>("LastMethodInputArguments", LastMethodInputArguments);
            encoder.WriteEncodableArray<Argument>("LastMethodOutputArguments", LastMethodOutputArguments);
            encoder.WriteDateTime("LastMethodCallTime", LastMethodCallTime);
            encoder.WriteEncodable<StatusResult>("LastMethodReturnStatus", LastMethodReturnStatus);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            CreateSessionId = decoder.ReadNodeId("CreateSessionId");
            CreateClientName = decoder.ReadString("CreateClientName");
            InvocationCreationTime = decoder.ReadDateTime("InvocationCreationTime");
            LastTransitionTime = decoder.ReadDateTime("LastTransitionTime");
            LastMethodCall = decoder.ReadString("LastMethodCall");
            LastMethodSessionId = decoder.ReadNodeId("LastMethodSessionId");
            LastMethodInputArguments = decoder.ReadEncodableArray<Argument>("LastMethodInputArguments");
            LastMethodOutputArguments = decoder.ReadEncodableArray<Argument>("LastMethodOutputArguments");
            LastMethodCallTime = decoder.ReadDateTime("LastMethodCallTime");
            LastMethodReturnStatus = decoder.ReadEncodable<StatusResult>("LastMethodReturnStatus");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.ProgramDiagnostic2DataType_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.ProgramDiagnostic2DataType_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.ProgramDiagnostic2DataType)]
    public class ProgramDiagnostic2DataType : IEncodable
    {
        public NodeId? CreateSessionId { get; set; }
        public String? CreateClientName { get; set; }
        public DateTime InvocationCreationTime { get; set; }
        public DateTime LastTransitionTime { get; set; }
        public String? LastMethodCall { get; set; }
        public NodeId? LastMethodSessionId { get; set; }
        public Argument?[]? LastMethodInputArguments { get; set; }
        public Argument?[]? LastMethodOutputArguments { get; set; }
        public Variant[]? LastMethodInputValues { get; set; }
        public Variant[]? LastMethodOutputValues { get; set; }
        public DateTime LastMethodCallTime { get; set; }
        public StatusResult? LastMethodReturnStatus { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteNodeId("CreateSessionId", CreateSessionId);
            encoder.WriteString("CreateClientName", CreateClientName);
            encoder.WriteDateTime("InvocationCreationTime", InvocationCreationTime);
            encoder.WriteDateTime("LastTransitionTime", LastTransitionTime);
            encoder.WriteString("LastMethodCall", LastMethodCall);
            encoder.WriteNodeId("LastMethodSessionId", LastMethodSessionId);
            encoder.WriteEncodableArray<Argument>("LastMethodInputArguments", LastMethodInputArguments);
            encoder.WriteEncodableArray<Argument>("LastMethodOutputArguments", LastMethodOutputArguments);
            encoder.WriteVariantArray("LastMethodInputValues", LastMethodInputValues);
            encoder.WriteVariantArray("LastMethodOutputValues", LastMethodOutputValues);
            encoder.WriteDateTime("LastMethodCallTime", LastMethodCallTime);
            encoder.WriteEncodable<StatusResult>("LastMethodReturnStatus", LastMethodReturnStatus);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            CreateSessionId = decoder.ReadNodeId("CreateSessionId");
            CreateClientName = decoder.ReadString("CreateClientName");
            InvocationCreationTime = decoder.ReadDateTime("InvocationCreationTime");
            LastTransitionTime = decoder.ReadDateTime("LastTransitionTime");
            LastMethodCall = decoder.ReadString("LastMethodCall");
            LastMethodSessionId = decoder.ReadNodeId("LastMethodSessionId");
            LastMethodInputArguments = decoder.ReadEncodableArray<Argument>("LastMethodInputArguments");
            LastMethodOutputArguments = decoder.ReadEncodableArray<Argument>("LastMethodOutputArguments");
            LastMethodInputValues = decoder.ReadVariantArray("LastMethodInputValues");
            LastMethodOutputValues = decoder.ReadVariantArray("LastMethodOutputValues");
            LastMethodCallTime = decoder.ReadDateTime("LastMethodCallTime");
            LastMethodReturnStatus = decoder.ReadEncodable<StatusResult>("LastMethodReturnStatus");
            decoder.PopNamespace();
        }
    }
    [BinaryEncodingId(ObjectIds.Annotation_Encoding_DefaultBinary)]
    [XmlEncodingId(ObjectIds.Annotation_Encoding_DefaultXml)]
    [DataTypeId(DataTypeIds.Annotation)]
    public class Annotation : IEncodable
    {
        public String? Message { get; set; }
        public String? UserName { get; set; }
        public DateTime AnnotationTime { get; set; }
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            encoder.WriteString("Message", Message);
            encoder.WriteString("UserName", UserName);
            encoder.WriteDateTime("AnnotationTime", AnnotationTime);
            encoder.PopNamespace();
        }
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/2008/02/Types.xsd");
            Message = decoder.ReadString("Message");
            UserName = decoder.ReadString("UserName");
            AnnotationTime = decoder.ReadDateTime("AnnotationTime");
            decoder.PopNamespace();
        }
    }
}
