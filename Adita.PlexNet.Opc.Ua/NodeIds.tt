<#@ template debug="true" hostspecific="true" language="C#" 
#><#@ assembly name="System.Core" 
#><#@ import namespace="System.Linq" 
#><#@ import namespace="System.Text" 
#><#@ import namespace="System.Collections.Generic" 
#><#@ assembly name="System.Xml.dll" 
#><#@ import namespace="System.Xml" 
#><#@ import namespace="System.IO" 
#><#@ output extension="generated.cs" 
#><# 
var filename = this.Host.ResolvePath(@"Schemas\NodeIds.csv");
var comma = new[] { ',' };
var fields = 
    from l in File.ReadAllLines(filename)
    let s = l.Split(comma, 3)
    select new { Name = s[0], Value = s[1], Type =s[2] };

#>// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Adita.PlexNet.Opc.Ua
{
    public static class DataTypeIds
    {
<# foreach (var f in fields.Where(ff=>ff.Type=="DataType")) { #>        public const string <#= f.Name #> = "i=<#= f.Value #>";
<# } #>        public const string HistoryBase = "i=99999";
    }
    public static class MethodIds
    {
<# foreach (var f in fields.Where(ff=>ff.Type=="Method")) { #>        public const string <#= f.Name #> = "i=<#= f.Value #>";
<# } #>    }
    public static class ObjectIds
    {
<# foreach (var f in fields.Where(ff=>ff.Type=="Object")) { #>        public const string <#= f.Name #> = "i=<#= f.Value #>";
<# } #>        public const string HistoryBase_Encoding_DefaultBinary = "i=99998";
        public const string HistoryBase_Encoding_DefaultXml = "i=99997";
    }
    public static class ObjectTypeIds
    {
<# foreach (var f in fields.Where(ff=>ff.Type=="ObjectType")) { #>        public const string <#= f.Name #> = "i=<#= f.Value #>";
<# } #>    }
    public static class ReferenceTypeIds
    {
<# foreach (var f in fields.Where(ff=>ff.Type=="ReferenceType")) { #>        public const string <#= f.Name #> = "i=<#= f.Value #>";
<# } #>    }
    public static class VariableIds
    {
<# foreach (var f in fields.Where(ff=>ff.Type=="Variable")) { #>        public const string <#= f.Name #> = "i=<#= f.Value #>";
<# } #>    }
    public static class VariableTypeIds
    {
<# foreach (var f in fields.Where(ff=>ff.Type=="VariableType")) { #>        public const string <#= f.Name #> = "i=<#= f.Value #>";
<# } #>    }
}
